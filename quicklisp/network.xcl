; -*- Mode: Lisp -*-
; Compiler policy: safety 1, space 1, speed 1, debug 1
; SYSTEM:*FORCE-FULL-CALLS* is NIL
; SYSTEM:*FORCE-TYPE-CHECKS* is NIL

(SYSTEM:INIT-FASL COMMON-LISP:NIL)

(COMMON-LISP:SETQ SYSTEM:*SOURCE-FILE* #P"/home/wbooze/quicklisp/quicklisp/network.lisp")

(SYSTEM:%IN-PACKAGE "QL-NETWORK")

(LET ((#$G7803 (ENSURE-GENERIC-FUNCTION '%HOST-ADDRESS :LAMBDA-LIST '(LISP HOST))))
 (LET* ((#$G7806 (SYSTEM::ENSURE-METHOD '%HOST-ADDRESS :LAMBDA-LIST '(#$%IMPLEMENTATION
 HOST) :QUALIFIERS NIL :SPECIALIZERS (SYSTEM:LIST2 'SBCL T) :FUNCTION (FUNCTION (LAMBDA
 (#$GF-ARGS-VAR #$NEXT-METHOD-LIST-7807) (DECLARE (IGNORE #$NEXT-METHOD-LIST-7807))
 (LET ((#$%IMPLEMENTATION (SYSTEM:%CAR #$GF-ARGS-VAR)) (HOST (SYSTEM:%CADR #$GF-ARGS-VAR)))
 (DECLARE (IGNORABLE #$%IMPLEMENTATION HOST)) (QL-SBCL:HOST-ENT-ADDRESS (QL-SBCL:GET-HOST-BY-NAME
 HOST))))) :FAST-FUNCTION (FUNCTION (LAMBDA (#$%IMPLEMENTATION HOST) (DECLARE (IGNORABLE
 #$%IMPLEMENTATION HOST)) (QL-SBCL:HOST-ENT-ADDRESS (QL-SBCL:GET-HOST-BY-NAME HOST))))))
 (#$G7805 (FDEFINITION '%HOST-ADDRESS)) (#$G7804 (CONS #$G7806 (SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS
 #$G7805)))) (FUNCALL (FUNCTION (SETF SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS)) #$G7804
 #$G7805)) (LET* ((#$G7810 (SYSTEM::ENSURE-METHOD '%HOST-ADDRESS :LAMBDA-LIST '(#$%IMPLEMENTATION
 HOST) :QUALIFIERS NIL :SPECIALIZERS (SYSTEM:LIST2 T T) :FUNCTION (FUNCTION (LAMBDA
 (#$GF-ARGS-VAR #$NEXT-METHOD-LIST-7811) (DECLARE (IGNORE #$NEXT-METHOD-LIST-7811))
 (LET ((#$%IMPLEMENTATION (SYSTEM:%CAR #$GF-ARGS-VAR)) (HOST (SYSTEM:%CADR #$GF-ARGS-VAR)))
 (DECLARE (IGNORABLE #$%IMPLEMENTATION HOST)) HOST))) :FAST-FUNCTION (FUNCTION (LAMBDA
 (#$%IMPLEMENTATION HOST) (DECLARE (IGNORABLE #$%IMPLEMENTATION HOST)) HOST)))) (#$G7809
 (FDEFINITION '%HOST-ADDRESS)) (#$G7808 (CONS #$G7810 (SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS
 #$G7809)))) (FUNCALL (FUNCTION (SETF SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS)) #$G7808
 #$G7809)) #$G7803)

(COMPILER::LOAD-DEFUN 'HOST-ADDRESS '(#6%U‰åƒì #3(:CALL 5 "RT_current_thread") #7%‰Eüƒìh
 #3(:CONSTANT 4 *IMPLEMENTATION*) #3%ÿuü #3(:CALL 5 "RT_thread_symbol_value") #14%ƒÄ‰$‹E‰D$h
 #3(:CONSTANT 4 %HOST-ADDRESS) #3(:CALL 5 "RT_fast_call_symbol_2") #5%ƒÄÉÃ) 'NIL
 1 1 '((NIL . *IMPLEMENTATION*) (-1 . #$THREAD-7813) (2 . HOST)) 76)

(LET ((#$G7816 (ENSURE-GENERIC-FUNCTION '%OPEN-CONNECTION :LAMBDA-LIST '(LISP HOST
 PORT) ':DOCUMENTATION '"Open and return a network connection to HOST on the
  given PORT."))) (LET* ((#$G7819 (SYSTEM::ENSURE-METHOD '%OPEN-CONNECTION :LAMBDA-LIST
 '(#$%IMPLEMENTATION HOST PORT) :QUALIFIERS NIL :SPECIALIZERS (SYSTEM:LIST3 'SBCL
 T T) :FUNCTION (FUNCTION (LAMBDA (#$GF-ARGS-VAR #$NEXT-METHOD-LIST-7820) (DECLARE
 (IGNORE #$NEXT-METHOD-LIST-7820)) (LET ((#$%IMPLEMENTATION (SYSTEM:%CAR #$GF-ARGS-VAR))
 (HOST (SYSTEM:%CADR #$GF-ARGS-VAR)) (PORT (SYSTEM:%CADDR #$GF-ARGS-VAR))) (DECLARE
 (IGNORABLE #$%IMPLEMENTATION HOST PORT)) (LET* ((ENDPOINT (QL-SBCL:HOST-ENT-ADDRESS
 (QL-SBCL:GET-HOST-BY-NAME HOST))) (SOCKET (MAKE-INSTANCE 'QL-SBCL:INET-SOCKET :PROTOCOL
 :TCP :TYPE :STREAM))) (QL-SBCL:SOCKET-CONNECT SOCKET ENDPOINT PORT) (QL-SBCL:SOCKET-MAKE-STREAM
 SOCKET :ELEMENT-TYPE '(UNSIGNED-BYTE 8) :INPUT T :OUTPUT T :BUFFERING :FULL)))))
 :FAST-FUNCTION (FUNCTION (LAMBDA (#$%IMPLEMENTATION HOST PORT) (DECLARE (IGNORABLE
 #$%IMPLEMENTATION HOST PORT)) (LET* ((ENDPOINT (QL-SBCL:HOST-ENT-ADDRESS (QL-SBCL:GET-HOST-BY-NAME
 HOST))) (SOCKET (MAKE-INSTANCE 'QL-SBCL:INET-SOCKET :PROTOCOL :TCP :TYPE :STREAM)))
 (QL-SBCL:SOCKET-CONNECT SOCKET ENDPOINT PORT) (QL-SBCL:SOCKET-MAKE-STREAM SOCKET
 :ELEMENT-TYPE '(UNSIGNED-BYTE 8) :INPUT T :OUTPUT T :BUFFERING :FULL)))))) (#$G7818
 (FDEFINITION '%OPEN-CONNECTION)) (#$G7817 (CONS #$G7819 (SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS
 #$G7818)))) (FUNCALL (FUNCTION (SETF SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS)) #$G7817
 #$G7818)) (LET* ((#$G7823 (SYSTEM::ENSURE-METHOD '%OPEN-CONNECTION :LAMBDA-LIST '(#$%IMPLEMENTATION
 HOST PORT) :QUALIFIERS NIL :SPECIALIZERS (SYSTEM:LIST3 'LISPWORKS T T) :FUNCTION
 (FUNCTION (LAMBDA (#$GF-ARGS-VAR #$NEXT-METHOD-LIST-7824) (DECLARE (IGNORE #$NEXT-METHOD-LIST-7824))
 (LET ((#$%IMPLEMENTATION (SYSTEM:%CAR #$GF-ARGS-VAR)) (HOST (SYSTEM:%CADR #$GF-ARGS-VAR))
 (PORT (SYSTEM:%CADDR #$GF-ARGS-VAR))) (DECLARE (IGNORABLE #$%IMPLEMENTATION HOST
 PORT)) (QL-LISPWORKS:OPEN-TCP-STREAM HOST PORT :DIRECTION :IO :READ-TIMEOUT NIL :ELEMENT-TYPE
 '(UNSIGNED-BYTE 8) :TIMEOUT 5)))) :FAST-FUNCTION (FUNCTION (LAMBDA (#$%IMPLEMENTATION
 HOST PORT) (DECLARE (IGNORABLE #$%IMPLEMENTATION HOST PORT)) (QL-LISPWORKS:OPEN-TCP-STREAM
 HOST PORT :DIRECTION :IO :READ-TIMEOUT NIL :ELEMENT-TYPE '(UNSIGNED-BYTE 8) :TIMEOUT
 5))))) (#$G7822 (FDEFINITION '%OPEN-CONNECTION)) (#$G7821 (CONS #$G7823 (SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS
 #$G7822)))) (FUNCALL (FUNCTION (SETF SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS)) #$G7821
 #$G7822)) (LET* ((#$G7827 (SYSTEM::ENSURE-METHOD '%OPEN-CONNECTION :LAMBDA-LIST '(#$%IMPLEMENTATION
 HOST PORT) :QUALIFIERS NIL :SPECIALIZERS (SYSTEM:LIST3 'MKCL T T) :FUNCTION (FUNCTION
 (LAMBDA (#$GF-ARGS-VAR #$NEXT-METHOD-LIST-7828) (DECLARE (IGNORE #$NEXT-METHOD-LIST-7828))
 (LET ((#$%IMPLEMENTATION (SYSTEM:%CAR #$GF-ARGS-VAR)) (HOST (SYSTEM:%CADR #$GF-ARGS-VAR))
 (PORT (SYSTEM:%CADDR #$GF-ARGS-VAR))) (DECLARE (IGNORABLE #$%IMPLEMENTATION HOST
 PORT)) (LET* ((ENDPOINT (QL-MKCL:HOST-ENT-ADDRESS (QL-MKCL:GET-HOST-BY-NAME HOST)))
 (SOCKET (MAKE-INSTANCE 'QL-MKCL:INET-SOCKET :PROTOCOL :TCP :TYPE :STREAM))) (QL-MKCL:SOCKET-CONNECT
 SOCKET ENDPOINT PORT) (QL-MKCL:SOCKET-MAKE-STREAM SOCKET :ELEMENT-TYPE '(UNSIGNED-BYTE
 8) :INPUT T :OUTPUT T :BUFFERING :FULL))))) :FAST-FUNCTION (FUNCTION (LAMBDA (#$%IMPLEMENTATION
 HOST PORT) (DECLARE (IGNORABLE #$%IMPLEMENTATION HOST PORT)) (LET* ((ENDPOINT (QL-MKCL:HOST-ENT-ADDRESS
 (QL-MKCL:GET-HOST-BY-NAME HOST))) (SOCKET (MAKE-INSTANCE 'QL-MKCL:INET-SOCKET :PROTOCOL
 :TCP :TYPE :STREAM))) (QL-MKCL:SOCKET-CONNECT SOCKET ENDPOINT PORT) (QL-MKCL:SOCKET-MAKE-STREAM
 SOCKET :ELEMENT-TYPE '(UNSIGNED-BYTE 8) :INPUT T :OUTPUT T :BUFFERING :FULL))))))
 (#$G7826 (FDEFINITION '%OPEN-CONNECTION)) (#$G7825 (CONS #$G7827 (SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS
 #$G7826)))) (FUNCALL (FUNCTION (SETF SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS)) #$G7825
 #$G7826)) (LET* ((#$G7831 (SYSTEM::ENSURE-METHOD '%OPEN-CONNECTION :LAMBDA-LIST '(#$%IMPLEMENTATION
 HOST PORT) :QUALIFIERS NIL :SPECIALIZERS (SYSTEM:LIST3 'ECL T T) :FUNCTION (FUNCTION
 (LAMBDA (#$GF-ARGS-VAR #$NEXT-METHOD-LIST-7832) (DECLARE (IGNORE #$NEXT-METHOD-LIST-7832))
 (LET ((#$%IMPLEMENTATION (SYSTEM:%CAR #$GF-ARGS-VAR)) (HOST (SYSTEM:%CADR #$GF-ARGS-VAR))
 (PORT (SYSTEM:%CADDR #$GF-ARGS-VAR))) (DECLARE (IGNORABLE #$%IMPLEMENTATION HOST
 PORT)) (LET* ((ENDPOINT (QL-ECL:HOST-ENT-ADDRESS (QL-ECL:GET-HOST-BY-NAME HOST)))
 (SOCKET (MAKE-INSTANCE 'QL-ECL:INET-SOCKET :PROTOCOL :TCP :TYPE :STREAM))) (QL-ECL:SOCKET-CONNECT
 SOCKET ENDPOINT PORT) (QL-ECL:SOCKET-MAKE-STREAM SOCKET :ELEMENT-TYPE '(UNSIGNED-BYTE
 8) :INPUT T :OUTPUT T :BUFFERING :FULL))))) :FAST-FUNCTION (FUNCTION (LAMBDA (#$%IMPLEMENTATION
 HOST PORT) (DECLARE (IGNORABLE #$%IMPLEMENTATION HOST PORT)) (LET* ((ENDPOINT (QL-ECL:HOST-ENT-ADDRESS
 (QL-ECL:GET-HOST-BY-NAME HOST))) (SOCKET (MAKE-INSTANCE 'QL-ECL:INET-SOCKET :PROTOCOL
 :TCP :TYPE :STREAM))) (QL-ECL:SOCKET-CONNECT SOCKET ENDPOINT PORT) (QL-ECL:SOCKET-MAKE-STREAM
 SOCKET :ELEMENT-TYPE '(UNSIGNED-BYTE 8) :INPUT T :OUTPUT T :BUFFERING :FULL))))))
 (#$G7830 (FDEFINITION '%OPEN-CONNECTION)) (#$G7829 (CONS #$G7831 (SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS
 #$G7830)))) (FUNCALL (FUNCTION (SETF SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS)) #$G7829
 #$G7830)) (LET* ((#$G7835 (SYSTEM::ENSURE-METHOD '%OPEN-CONNECTION :LAMBDA-LIST '(#$%IMPLEMENTATION
 HOST PORT) :QUALIFIERS NIL :SPECIALIZERS (SYSTEM:LIST3 'SCL T T) :FUNCTION (FUNCTION
 (LAMBDA (#$GF-ARGS-VAR #$NEXT-METHOD-LIST-7836) (DECLARE (IGNORE #$NEXT-METHOD-LIST-7836))
 (LET ((#$%IMPLEMENTATION (SYSTEM:%CAR #$GF-ARGS-VAR)) (HOST (SYSTEM:%CADR #$GF-ARGS-VAR))
 (PORT (SYSTEM:%CADDR #$GF-ARGS-VAR))) (DECLARE (IGNORABLE #$%IMPLEMENTATION HOST
 PORT)) (LET ((FD (QL-SCL:CONNECT-TO-INET-SOCKET HOST PORT))) (QL-SCL:MAKE-FD-STREAM
 FD :ELEMENT-TYPE '(UNSIGNED-BYTE 8) :INPUT T :OUTPUT T))))) :FAST-FUNCTION (FUNCTION
 (LAMBDA (#$%IMPLEMENTATION HOST PORT) (DECLARE (IGNORABLE #$%IMPLEMENTATION HOST
 PORT)) (LET ((FD (QL-SCL:CONNECT-TO-INET-SOCKET HOST PORT))) (QL-SCL:MAKE-FD-STREAM
 FD :ELEMENT-TYPE '(UNSIGNED-BYTE 8) :INPUT T :OUTPUT T)))))) (#$G7834 (FDEFINITION
 '%OPEN-CONNECTION)) (#$G7833 (CONS #$G7835 (SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS
 #$G7834)))) (FUNCALL (FUNCTION (SETF SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS)) #$G7833
 #$G7834)) (LET* ((#$G7839 (SYSTEM::ENSURE-METHOD '%OPEN-CONNECTION :LAMBDA-LIST '(#$%IMPLEMENTATION
 HOST PORT) :QUALIFIERS NIL :SPECIALIZERS (SYSTEM:LIST3 'CMUCL T T) :FUNCTION (FUNCTION
 (LAMBDA (#$GF-ARGS-VAR #$NEXT-METHOD-LIST-7840) (DECLARE (IGNORE #$NEXT-METHOD-LIST-7840))
 (LET ((#$%IMPLEMENTATION (SYSTEM:%CAR #$GF-ARGS-VAR)) (HOST (SYSTEM:%CADR #$GF-ARGS-VAR))
 (PORT (SYSTEM:%CADDR #$GF-ARGS-VAR))) (DECLARE (IGNORABLE #$%IMPLEMENTATION HOST
 PORT)) (LET ((FD (QL-CMUCL:CONNECT-TO-INET-SOCKET HOST PORT))) (QL-CMUCL:MAKE-FD-STREAM
 FD :ELEMENT-TYPE '(UNSIGNED-BYTE 8) :BINARY-STREAM-P T :INPUT T :OUTPUT T))))) :FAST-FUNCTION
 (FUNCTION (LAMBDA (#$%IMPLEMENTATION HOST PORT) (DECLARE (IGNORABLE #$%IMPLEMENTATION
 HOST PORT)) (LET ((FD (QL-CMUCL:CONNECT-TO-INET-SOCKET HOST PORT))) (QL-CMUCL:MAKE-FD-STREAM
 FD :ELEMENT-TYPE '(UNSIGNED-BYTE 8) :BINARY-STREAM-P T :INPUT T :OUTPUT T)))))) (#$G7838
 (FDEFINITION '%OPEN-CONNECTION)) (#$G7837 (CONS #$G7839 (SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS
 #$G7838)))) (FUNCALL (FUNCTION (SETF SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS)) #$G7837
 #$G7838)) (LET* ((#$G7843 (SYSTEM::ENSURE-METHOD '%OPEN-CONNECTION :LAMBDA-LIST '(#$%IMPLEMENTATION
 HOST PORT) :QUALIFIERS NIL :SPECIALIZERS (SYSTEM:LIST3 'CLISP T T) :FUNCTION (FUNCTION
 (LAMBDA (#$GF-ARGS-VAR #$NEXT-METHOD-LIST-7844) (DECLARE (IGNORE #$NEXT-METHOD-LIST-7844))
 (LET ((#$%IMPLEMENTATION (SYSTEM:%CAR #$GF-ARGS-VAR)) (HOST (SYSTEM:%CADR #$GF-ARGS-VAR))
 (PORT (SYSTEM:%CADDR #$GF-ARGS-VAR))) (DECLARE (IGNORABLE #$%IMPLEMENTATION HOST
 PORT)) (QL-CLISP:SOCKET-CONNECT PORT HOST :ELEMENT-TYPE '(UNSIGNED-BYTE 8))))) :FAST-FUNCTION
 (FUNCTION (LAMBDA (#$%IMPLEMENTATION HOST PORT) (DECLARE (IGNORABLE #$%IMPLEMENTATION
 HOST PORT)) (QL-CLISP:SOCKET-CONNECT PORT HOST :ELEMENT-TYPE '(UNSIGNED-BYTE 8))))))
 (#$G7842 (FDEFINITION '%OPEN-CONNECTION)) (#$G7841 (CONS #$G7843 (SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS
 #$G7842)))) (FUNCALL (FUNCTION (SETF SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS)) #$G7841
 #$G7842)) (LET* ((#$G7847 (SYSTEM::ENSURE-METHOD '%OPEN-CONNECTION :LAMBDA-LIST '(#$%IMPLEMENTATION
 HOST PORT) :QUALIFIERS NIL :SPECIALIZERS (SYSTEM:LIST3 'CCL T T) :FUNCTION (FUNCTION
 (LAMBDA (#$GF-ARGS-VAR #$NEXT-METHOD-LIST-7848) (DECLARE (IGNORE #$NEXT-METHOD-LIST-7848))
 (LET ((#$%IMPLEMENTATION (SYSTEM:%CAR #$GF-ARGS-VAR)) (HOST (SYSTEM:%CADR #$GF-ARGS-VAR))
 (PORT (SYSTEM:%CADDR #$GF-ARGS-VAR))) (DECLARE (IGNORABLE #$%IMPLEMENTATION HOST
 PORT)) (QL-CCL:MAKE-SOCKET :REMOTE-HOST HOST :REMOTE-PORT PORT)))) :FAST-FUNCTION
 (FUNCTION (LAMBDA (#$%IMPLEMENTATION HOST PORT) (DECLARE (IGNORABLE #$%IMPLEMENTATION
 HOST PORT)) (QL-CCL:MAKE-SOCKET :REMOTE-HOST HOST :REMOTE-PORT PORT))))) (#$G7846
 (FDEFINITION '%OPEN-CONNECTION)) (#$G7845 (CONS #$G7847 (SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS
 #$G7846)))) (FUNCALL (FUNCTION (SETF SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS)) #$G7845
 #$G7846)) (LET* ((#$G7851 (SYSTEM::ENSURE-METHOD '%OPEN-CONNECTION :LAMBDA-LIST '(#$%IMPLEMENTATION
 HOST PORT) :QUALIFIERS NIL :SPECIALIZERS (SYSTEM:LIST3 'ABCL T T) :FUNCTION (FUNCTION
 (LAMBDA (#$GF-ARGS-VAR #$NEXT-METHOD-LIST-7852) (DECLARE (IGNORE #$NEXT-METHOD-LIST-7852))
 (LET ((#$%IMPLEMENTATION (SYSTEM:%CAR #$GF-ARGS-VAR)) (HOST (SYSTEM:%CADR #$GF-ARGS-VAR))
 (PORT (SYSTEM:%CADDR #$GF-ARGS-VAR))) (DECLARE (IGNORABLE #$%IMPLEMENTATION HOST
 PORT)) (LET ((SOCKET (QL-ABCL:MAKE-SOCKET HOST PORT))) (QL-ABCL:GET-SOCKET-STREAM
 SOCKET :ELEMENT-TYPE '(UNSIGNED-BYTE 8)))))) :FAST-FUNCTION (FUNCTION (LAMBDA (#$%IMPLEMENTATION
 HOST PORT) (DECLARE (IGNORABLE #$%IMPLEMENTATION HOST PORT)) (LET ((SOCKET (QL-ABCL:MAKE-SOCKET
 HOST PORT))) (QL-ABCL:GET-SOCKET-STREAM SOCKET :ELEMENT-TYPE '(UNSIGNED-BYTE 8)))))))
 (#$G7850 (FDEFINITION '%OPEN-CONNECTION)) (#$G7849 (CONS #$G7851 (SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS
 #$G7850)))) (FUNCALL (FUNCTION (SETF SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS)) #$G7849
 #$G7850)) (LET* ((#$G7855 (SYSTEM::ENSURE-METHOD '%OPEN-CONNECTION :LAMBDA-LIST '(#$%IMPLEMENTATION
 HOST PORT) :QUALIFIERS NIL :SPECIALIZERS (SYSTEM:LIST3 'ALLEGRO T T) :FUNCTION (FUNCTION
 (LAMBDA (#$GF-ARGS-VAR #$NEXT-METHOD-LIST-7856) (DECLARE (IGNORE #$NEXT-METHOD-LIST-7856))
 (LET ((#$%IMPLEMENTATION (SYSTEM:%CAR #$GF-ARGS-VAR)) (HOST (SYSTEM:%CADR #$GF-ARGS-VAR))
 (PORT (SYSTEM:%CADDR #$GF-ARGS-VAR))) (DECLARE (IGNORABLE #$%IMPLEMENTATION HOST
 PORT)) (QL-ALLEGRO:MAKE-SOCKET :REMOTE-HOST HOST :REMOTE-PORT PORT)))) :FAST-FUNCTION
 (FUNCTION (LAMBDA (#$%IMPLEMENTATION HOST PORT) (DECLARE (IGNORABLE #$%IMPLEMENTATION
 HOST PORT)) (QL-ALLEGRO:MAKE-SOCKET :REMOTE-HOST HOST :REMOTE-PORT PORT))))) (#$G7854
 (FDEFINITION '%OPEN-CONNECTION)) (#$G7853 (CONS #$G7855 (SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS
 #$G7854)))) (FUNCALL (FUNCTION (SETF SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS)) #$G7853
 #$G7854)) (LET* ((#$G7859 (SYSTEM::ENSURE-METHOD '%OPEN-CONNECTION :LAMBDA-LIST '(#$%IMPLEMENTATION
 HOST PORT) :QUALIFIERS NIL :SPECIALIZERS (SYSTEM:LIST3 T T T) :FUNCTION (FUNCTION
 (LAMBDA (#$GF-ARGS-VAR #$NEXT-METHOD-LIST-7860) (DECLARE (IGNORE #$NEXT-METHOD-LIST-7860))
 (LET ((#$%IMPLEMENTATION (SYSTEM:%CAR #$GF-ARGS-VAR)) (HOST (SYSTEM:%CADR #$GF-ARGS-VAR))
 (PORT (SYSTEM:%CADDR #$GF-ARGS-VAR))) (DECLARE (IGNORABLE #$%IMPLEMENTATION HOST
 PORT)) (DECLARE (IGNORE HOST PORT)) (ERROR "Sorry, quicklisp in implementation ~S is not supported yet."
 (LISP-IMPLEMENTATION-TYPE))))) :FAST-FUNCTION (FUNCTION (LAMBDA (#$%IMPLEMENTATION
 HOST PORT) (DECLARE (IGNORABLE #$%IMPLEMENTATION HOST PORT)) (DECLARE (IGNORE HOST
 PORT)) (ERROR "Sorry, quicklisp in implementation ~S is not supported yet." (LISP-IMPLEMENTATION-TYPE))))))
 (#$G7858 (FDEFINITION '%OPEN-CONNECTION)) (#$G7857 (CONS #$G7859 (SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS
 #$G7858)))) (FUNCALL (FUNCTION (SETF SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS)) #$G7857
 #$G7858)) #$G7816)

(COMPILER::LOAD-DEFUN 'OPEN-CONNECTION '(#6%U‰åƒì #3(:CALL 5 "RT_current_thread")
 #7%‰Eüƒìh #3(:CONSTANT 4 *IMPLEMENTATION*) #3%ÿuü #3(:CALL 5 "RT_thread_symbol_value")
 #21%ƒÄ‰$‹E‰D$‹E‰D$h #3(:CONSTANT 4 %OPEN-CONNECTION) #3(:CALL 5 "RT_fast_call_symbol_3")
 #5%ƒÄÉÃ) 'NIL 2 2 '((NIL . *IMPLEMENTATION*) (-1 . #$THREAD-7862) (3 . PORT) (2
 . HOST)) 231)

(LET ((#$G7865 (ENSURE-GENERIC-FUNCTION '%READ-OCTETS :LAMBDA-LIST '(LISP BUFFER CONNECTION)
 ':DOCUMENTATION '"Read from CONNECTION into BUFFER. Returns the
  number of octets read."))) (LET* ((#$G7868 (SYSTEM::ENSURE-METHOD '%READ-OCTETS
 :LAMBDA-LIST '(#$%IMPLEMENTATION BUFFER CONNECTION) :QUALIFIERS NIL :SPECIALIZERS
 (SYSTEM:LIST3 'CLISP T T) :FUNCTION (FUNCTION (LAMBDA (#$GF-ARGS-VAR #$NEXT-METHOD-LIST-7869)
 (DECLARE (IGNORE #$NEXT-METHOD-LIST-7869)) (LET ((#$%IMPLEMENTATION (SYSTEM:%CAR
 #$GF-ARGS-VAR)) (BUFFER (SYSTEM:%CADR #$GF-ARGS-VAR)) (CONNECTION (SYSTEM:%CADDR
 #$GF-ARGS-VAR))) (DECLARE (IGNORABLE #$%IMPLEMENTATION BUFFER CONNECTION)) (QL-CLISP:READ-BYTE-SEQUENCE
 BUFFER CONNECTION :NO-HANG NIL :INTERACTIVE T)))) :FAST-FUNCTION (FUNCTION (LAMBDA
 (#$%IMPLEMENTATION BUFFER CONNECTION) (DECLARE (IGNORABLE #$%IMPLEMENTATION BUFFER
 CONNECTION)) (QL-CLISP:READ-BYTE-SEQUENCE BUFFER CONNECTION :NO-HANG NIL :INTERACTIVE
 T))))) (#$G7867 (FDEFINITION '%READ-OCTETS)) (#$G7866 (CONS #$G7868 (SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS
 #$G7867)))) (FUNCALL (FUNCTION (SETF SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS)) #$G7866
 #$G7867)) (LET* ((#$G7872 (SYSTEM::ENSURE-METHOD '%READ-OCTETS :LAMBDA-LIST '(#$%IMPLEMENTATION
 BUFFER CONNECTION) :QUALIFIERS NIL :SPECIALIZERS (SYSTEM:LIST3 'ALLEGRO T T) :FUNCTION
 (FUNCTION (LAMBDA (#$GF-ARGS-VAR #$NEXT-METHOD-LIST-7873) (DECLARE (IGNORE #$NEXT-METHOD-LIST-7873))
 (LET ((#$%IMPLEMENTATION (SYSTEM:%CAR #$GF-ARGS-VAR)) (BUFFER (SYSTEM:%CADR #$GF-ARGS-VAR))
 (CONNECTION (SYSTEM:%CADDR #$GF-ARGS-VAR))) (DECLARE (IGNORABLE #$%IMPLEMENTATION
 BUFFER CONNECTION)) (QL-ALLEGRO:READ-VECTOR BUFFER CONNECTION)))) :FAST-FUNCTION
 (FUNCTION (LAMBDA (#$%IMPLEMENTATION BUFFER CONNECTION) (DECLARE (IGNORABLE #$%IMPLEMENTATION
 BUFFER CONNECTION)) (QL-ALLEGRO:READ-VECTOR BUFFER CONNECTION))))) (#$G7871 (FDEFINITION
 '%READ-OCTETS)) (#$G7870 (CONS #$G7872 (SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS
 #$G7871)))) (FUNCALL (FUNCTION (SETF SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS)) #$G7870
 #$G7871)) (LET* ((#$G7876 (SYSTEM::ENSURE-METHOD '%READ-OCTETS :LAMBDA-LIST '(#$%IMPLEMENTATION
 BUFFER CONNECTION) :QUALIFIERS NIL :SPECIALIZERS (SYSTEM:LIST3 T T T) :FUNCTION (FUNCTION
 (LAMBDA (#$GF-ARGS-VAR #$NEXT-METHOD-LIST-7877) (DECLARE (IGNORE #$NEXT-METHOD-LIST-7877))
 (LET ((#$%IMPLEMENTATION (SYSTEM:%CAR #$GF-ARGS-VAR)) (BUFFER (SYSTEM:%CADR #$GF-ARGS-VAR))
 (CONNECTION (SYSTEM:%CADDR #$GF-ARGS-VAR))) (DECLARE (IGNORABLE #$%IMPLEMENTATION
 BUFFER CONNECTION)) (READ-SEQUENCE BUFFER CONNECTION)))) :FAST-FUNCTION (FUNCTION
 (LAMBDA (#$%IMPLEMENTATION BUFFER CONNECTION) (DECLARE (IGNORABLE #$%IMPLEMENTATION
 BUFFER CONNECTION)) (READ-SEQUENCE BUFFER CONNECTION))))) (#$G7875 (FDEFINITION '%READ-OCTETS))
 (#$G7874 (CONS #$G7876 (SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS #$G7875)))) (FUNCALL
 (FUNCTION (SETF SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS)) #$G7874 #$G7875)) #$G7865)

(COMPILER::LOAD-DEFUN 'READ-OCTETS '(#6%U‰åƒì #3(:CALL 5 "RT_current_thread") #7%‰Eüƒìh
 #3(:CONSTANT 4 *IMPLEMENTATION*) #3%ÿuü #3(:CALL 5 "RT_thread_symbol_value") #21%ƒÄ‰$‹E‰D$‹E‰D$h
 #3(:CONSTANT 4 %READ-OCTETS) #3(:CALL 5 "RT_fast_call_symbol_3") #5%ƒÄÉÃ) 'NIL 2
 2 '((NIL . *IMPLEMENTATION*) (-1 . #$THREAD-7879) (3 . CONNECTION) (2 . BUFFER))
 3550)

(LET ((#$G7882 (ENSURE-GENERIC-FUNCTION '%WRITE-OCTETS :LAMBDA-LIST '(LISP BUFFER
 CONNECTION) ':DOCUMENTATION '"Write the contents of BUFFER to CONNECTION."))) (LET*
 ((#$G7885 (SYSTEM::ENSURE-METHOD '%WRITE-OCTETS :LAMBDA-LIST '(#$%IMPLEMENTATION
 BUFFER CONNECTION) :QUALIFIERS NIL :SPECIALIZERS (SYSTEM:LIST3 T T T) :FUNCTION (FUNCTION
 (LAMBDA (#$GF-ARGS-VAR #$NEXT-METHOD-LIST-7886) (DECLARE (IGNORE #$NEXT-METHOD-LIST-7886))
 (LET ((#$%IMPLEMENTATION (SYSTEM:%CAR #$GF-ARGS-VAR)) (BUFFER (SYSTEM:%CADR #$GF-ARGS-VAR))
 (CONNECTION (SYSTEM:%CADDR #$GF-ARGS-VAR))) (DECLARE (IGNORABLE #$%IMPLEMENTATION
 BUFFER CONNECTION)) (PROGN (WRITE-SEQUENCE BUFFER CONNECTION) (FINISH-OUTPUT CONNECTION)))))
 :FAST-FUNCTION (FUNCTION (LAMBDA (#$%IMPLEMENTATION BUFFER CONNECTION) (DECLARE (IGNORABLE
 #$%IMPLEMENTATION BUFFER CONNECTION)) (PROGN (WRITE-SEQUENCE BUFFER CONNECTION) (FINISH-OUTPUT
 CONNECTION)))))) (#$G7884 (FDEFINITION '%WRITE-OCTETS)) (#$G7883 (CONS #$G7885 (SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS
 #$G7884)))) (FUNCALL (FUNCTION (SETF SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS)) #$G7883
 #$G7884)) #$G7882)

(COMPILER::LOAD-DEFUN 'WRITE-OCTETS '(#6%U‰åƒì #3(:CALL 5 "RT_current_thread") #7%‰Eüƒìh
 #3(:CONSTANT 4 *IMPLEMENTATION*) #3%ÿuü #3(:CALL 5 "RT_thread_symbol_value") #21%ƒÄ‰$‹E‰D$‹E‰D$h
 #3(:CONSTANT 4 %WRITE-OCTETS) #3(:CALL 5 "RT_fast_call_symbol_3") #5%ƒÄÉÃ) 'NIL
 2 2 '((NIL . *IMPLEMENTATION*) (-1 . #$THREAD-7888) (3 . CONNECTION) (2 . BUFFER))
 3999)

(LET ((#$G7891 (ENSURE-GENERIC-FUNCTION '%CLOSE-CONNECTION :LAMBDA-LIST '(LISP CONNECTION))))
 (LET* ((#$G7894 (SYSTEM::ENSURE-METHOD '%CLOSE-CONNECTION :LAMBDA-LIST '(#$%IMPLEMENTATION
 CONNECTION) :QUALIFIERS NIL :SPECIALIZERS (SYSTEM:LIST2 T T) :FUNCTION (FUNCTION
 (LAMBDA (#$GF-ARGS-VAR #$NEXT-METHOD-LIST-7895) (DECLARE (IGNORE #$NEXT-METHOD-LIST-7895))
 (LET ((#$%IMPLEMENTATION (SYSTEM:%CAR #$GF-ARGS-VAR)) (CONNECTION (SYSTEM:%CADR #$GF-ARGS-VAR)))
 (DECLARE (IGNORABLE #$%IMPLEMENTATION CONNECTION)) (BLOCK #$G7896 (LET ((#$G7897
 NIL)) (DECLARE (IGNORABLE #$G7897)) (TAGBODY (LET ((SYSTEM::*HANDLER-CLUSTERS* (CONS
 (SYSTEM:LIST1 (CONS 'ERROR (LAMBDA (SYSTEM::TEMP) (SETQ #$G7897 SYSTEM::TEMP) (GO
 #$G7898)))) SYSTEM::*HANDLER-CLUSTERS*))) (RETURN-FROM #$G7896 (CLOSE CONNECTION)))
 #$G7898 (RETURN-FROM #$G7896 (LET ((CONDITION #$G7897)) (VALUES NIL CONDITION)))))))))
 :FAST-FUNCTION (FUNCTION (LAMBDA (#$%IMPLEMENTATION CONNECTION) (DECLARE (IGNORABLE
 #$%IMPLEMENTATION CONNECTION)) (BLOCK #$G7899 (LET ((#$G7900 NIL)) (DECLARE (IGNORABLE
 #$G7900)) (TAGBODY (LET ((SYSTEM::*HANDLER-CLUSTERS* (CONS (SYSTEM:LIST1 (CONS 'ERROR
 (LAMBDA (SYSTEM::TEMP) (SETQ #$G7900 SYSTEM::TEMP) (GO #$G7901)))) SYSTEM::*HANDLER-CLUSTERS*)))
 (RETURN-FROM #$G7899 (CLOSE CONNECTION))) #$G7901 (RETURN-FROM #$G7899 (LET ((CONDITION
 #$G7900)) (VALUES NIL CONDITION)))))))))) (#$G7893 (FDEFINITION '%CLOSE-CONNECTION))
 (#$G7892 (CONS #$G7894 (SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS #$G7893)))) (FUNCALL
 (FUNCTION (SETF SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS)) #$G7892 #$G7893)) #$G7891)

(COMPILER::LOAD-DEFUN 'CLOSE-CONNECTION '(#6%U‰åƒì #3(:CALL 5 "RT_current_thread")
 #7%‰Eüƒìh #3(:CONSTANT 4 *IMPLEMENTATION*) #3%ÿuü #3(:CALL 5 "RT_thread_symbol_value")
 #14%ƒÄ‰$‹E‰D$h #3(:CONSTANT 4 %CLOSE-CONNECTION) #3(:CALL 5 "RT_fast_call_symbol_2")
 #5%ƒÄÉÃ) 'NIL 1 1 '((NIL . *IMPLEMENTATION*) (-1 . #$THREAD-7903) (2 . CONNECTION))
 4205)

(LET ((#$G7906 (ENSURE-GENERIC-FUNCTION '%CALL-WITH-CONNECTION :LAMBDA-LIST '(LISP
 HOST PORT FUN) ':DOCUMENTATION '"Establish a network connection to HOST on PORT and
  call FUN with that connection as the only argument. Unconditionally
  closes the connection afterwareds via CLOSE-CONNECTION in an
  unwind-protect. See also WITH-CONNECTION."))) (LET* ((#$G7909 (SYSTEM::ENSURE-METHOD
 '%CALL-WITH-CONNECTION :LAMBDA-LIST '(#$%IMPLEMENTATION HOST PORT FUN) :QUALIFIERS
 NIL :SPECIALIZERS (SYSTEM:LIST4 T T T T) :FUNCTION (FUNCTION (LAMBDA (#$GF-ARGS-VAR
 #$NEXT-METHOD-LIST-7910) (DECLARE (IGNORE #$NEXT-METHOD-LIST-7910)) (APPLY (FUNCTION
 (LAMBDA (#$%IMPLEMENTATION HOST PORT FUN) (DECLARE (IGNORABLE #$%IMPLEMENTATION HOST
 PORT FUN)) (LET (CONNECTION) (UNWIND-PROTECT (PROGN (SETQ CONNECTION (OPEN-CONNECTION
 HOST PORT)) (FUNCALL FUN CONNECTION)) (WHEN CONNECTION (CLOSE-CONNECTION CONNECTION))))))
 #$GF-ARGS-VAR))))) (#$G7908 (FDEFINITION '%CALL-WITH-CONNECTION)) (#$G7907 (CONS
 #$G7909 (SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS #$G7908)))) (FUNCALL (FUNCTION
 (SETF SYSTEM::GENERIC-FUNCTION-INITIAL-METHODS)) #$G7907 #$G7908)) #$G7906)

(COMPILER::LOAD-DEFUN 'CALL-WITH-CONNECTION '(#6%U‰åƒì #3(:CALL 5 "RT_current_thread")
 #7%‰Eüƒìh #3(:CONSTANT 4 *IMPLEMENTATION*) #3%ÿuü #3(:CALL 5 "RT_thread_symbol_value")
 #28%ƒÄ‰$‹E‰D$‹E‰D$‹E‰D$h #3(:CONSTANT 4 %CALL-WITH-CONNECTION) #3(:CALL 5
 "RT_fast_call_symbol_4") #5%ƒÄÉÃ) 'NIL 3 3 '((NIL . *IMPLEMENTATION*) (-1 . #$THREAD-7912)
 (4 . FUN) (3 . PORT) (2 . HOST)) 4312)

(MULTIPLE-VALUE-BIND (COMPILER::FINAL-CODE COMPILER::FINAL-CONSTANTS) (COMPILER::GENERATE-CODE-VECTOR
 '(#6%U‰åƒì  #3(:CALL 5 "RT_current_thread") #14%‰Eà‹EˆÂ€â€ú #3(:JMP 6 (:NE #$G7922))
 #11%‹@ˆÂ€â€ú #3(:JMP 6 (:NE #$G7922)) #10%‹@ÿ‰Eü$< #3(:JMP-SHORT 2 (:NE #$G7923))
 #3%‹Eü #3(:JMP-SHORT 2 (T #$G7925)) #3(:LABEL 0 #$G7923) #4%ƒì$¸ #3(:CONSTANT 4 SYSTEM::DEFMACRO-BOGUS-SUBLIST-ERROR)
 #4%‰$¸ #3(:CONSTANT 4 :KIND) #5%‰D$¸ #3(:CONSTANT 4 DEFMACRO) #5%‰D$¸ #3(:CONSTANT
 4 :NAME) #5%‰D$¸ #3(:CONSTANT 4 WITH-CONNECTION) #5%‰D$¸ #3(:CONSTANT 4 :OBJECT)
 #12%‰D$‹Eü‰D$¸ #3(:CONSTANT 4 :LAMBDA-LIST) #5%‰D$¸ #3(:CONSTANT 4 (CONNECTION
 HOST PORT)) #8%‰D$ Tj	h #3(:CONSTANT 4 ERROR) #3(:CALL 5 "RT_fast_call_symbol") #6%ƒÄƒÄ$
 #3(:LABEL 0 #$G7925) #4%‰EøP #3(:CALL 5 LENGTH) #24%ƒÄ‰Eôƒì‰$¸   ‰D$Tj #3(:CALL
 5 =) #4%ƒÄ= #3(:CONSTANT 4 NIL) #3(:JMP-SHORT 2 (:NZ #$G7927)) #5%jjh #3(:CONSTANT
 4 (CONNECTION HOST PORT)) #4%ÿuøh #3(:CONSTANT 4 WITH-CONNECTION) #1%h #3(:CONSTANT
 4 DEFMACRO) #1%h #3(:CONSTANT 4 SYSTEM::ARG-COUNT-ERROR) #3(:CALL 5 "RT_fast_call_symbol_6")
 #3%ƒÄ #3(:LABEL 0 #$G7927) #18%‹EàÆ@,ÿ‹EøˆÂ€â€ú #3(:JMP 6 (:NE #$G7922)) #20%‹@ÿ‰Eð‹Eø‹@ˆÂ€â€ú
 #3(:JMP 6 (:NE #$G7922)) #20%‹@ÿ‰Eì‹Eø‹@ˆÂ€â€ú #3(:JMP 6 (:NE #$G7922)) #11%‹@ˆÂ€â€ú
 #3(:JMP-SHORT 2 (:NE #$G7922)) #17%‹@ÿ‰Eè‹EˆÂ€â€ú #3(:JMP-SHORT 2 (:NE #$G7922))
 #11%‹@ˆÂ€â€ú #3(:JMP-SHORT 2 (:NE #$G7922)) #10%‹@‰Eäƒì¸ #3(:CONSTANT 4 CALL-WITH-CONNECTION)
 #21%‰$‹Eì‰D$‹Eè‰D$ƒì¸ #3(:CONSTANT 4 LAMBDA) #6%‰$ÿuð #3(:CALL 5 SYSTEM:LIST1)
 #17%ƒÄ‰D$‹Eä‰D$Tj #3(:CALL 5 LIST*) #7%ƒÄ‰D$ #3(:CALL 5 SYSTEM:LIST4) #2%ÉÃ
 #3(:LABEL 0 #$G7922) #1%P #3(:CALL 5 SYSTEM:ERROR-NOT-LIST) #2%ÉÃ) 'NIL) (SYSTEM:SET-MACRO-FUNCTION
 'WITH-CONNECTION (SYSTEM:MAKE-COMPILED-FUNCTION 'WITH-CONNECTION COMPILER::FINAL-CODE
 2 2 COMPILER::FINAL-CONSTANTS)) (SYSTEM:RECORD-SOURCE-INFORMATION 'WITH-CONNECTION
 4864) (SYSTEM:SET-LOCAL-VARIABLE-INFORMATION (MACRO-FUNCTION 'WITH-CONNECTION) '((-1
 . #$TEMP-7918) (-2 . #$SUBLIST-7917) (-3 . #$G7920) (-4 . CONNECTION) (-5 . HOST)
 (-6 . PORT) (-7 . BODY) (-8 . #$THREAD-7921) (3 . #$ENVIRONMENT-7916) (2 . #$WHOLE-7915))))

