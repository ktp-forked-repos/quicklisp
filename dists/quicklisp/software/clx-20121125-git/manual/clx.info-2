This is clx.info, produced by makeinfo version 4.13 from clx.texinfo.

INFO-DIR-SECTION lisp
START-INFO-DIR-ENTRY
* CLX: (clx).           Common LISP X Interface
END-INFO-DIR-ENTRY

   The Common LISP X Interface (CLX)

   Copyright (C) 1988, 1989 Texas Instruments Incorporated

     Permission is granted to any individual or institution to use,
     copy, modify and distribute this document, provided that this
     complete copyright and permission notice is maintained, intact, in
     all copies and supporting documentation. Texas Instruments
     Incorporated makes no representations about the suitability of
     this document or the software described herein for any purpose. It
     is provided "as is" without express or implied warranty.


File: clx.info,  Node: Events and Input,  Next: Resources,  Prev: Atoms,  Up: Top

13 Events and Input
*******************

A client application uses CLX functions to send _requests_ to an X
server over a display connection returned by the OPEN-DISPLAY function.
In return, the X server sends back _replies_ and _events_. Replies are
synchronized with specific requests and return requested server
information. Events typically occur asynchronously. Device events are
generated by user input from both the keyboard and pointer devices.
Other events are side-effects of the requests sent by CLX functions.
The types of events returned by an X server are summarized below.

   Device Events

Keyboard
     :KEY-PRESS :KEY-RELEASE

Pointer
     :BUTTON-PRESS :BUTTON-RELEASE :ENTER-NOTIFY :LEAVE-NOTIFY
     :MOTION-NOTIFY

   Side-Effect Events

Client communication
     :CLIENT-MESSAGE :PROPERTY-NOTIFY :SELECTION-CLEAR :SELECTION-NOTIFY
     :SELECTION-REQUEST

Color map state
     :COLORMAP-NOTIFY

Exposure
     :EXPOSURE :GRAPHICS-EXPOSURE :NO-EXPOSURE

Input focus
     :FOCUS-IN :FOCUS-OUT

Keyboard and pointer state
     :KEYMAP-NOTIFY :MAPPING-NOTIFY

Structure control
     :CIRCULATE-REQUEST :CONFIGURE-REQUEST :MAP-REQUEST

Window state
     :RESIZE-REQUEST :CIRCULATE-NOTIFY :CONFIGURE-NOTIFY :CREATE-NOTIFY
     :DESTROY-NOTIFY :GRAVITY-NOTIFY :MAP-NOTIFY :REPARENT-NOTIFY
     :UNMAP-NOTIFY :VISIBILITY-NOTIFY

   Client programs can override the server's normal distribution of
events by_ grabbing_ the pointer or the keyboard. Grabbing causes events
from the pointer or keyboard device to be reported to a single specified
window, rather than to their ordinary destinations. It can also cause
the server to _freeze_ the grabbed device, sending queued events only
when explicitly requested by the grabbing client. Two kinds of grabs
are possible:
   * Active - Events are immediately grabbed.

   * Passive - Events are grabbed later, as soon as a specified device
     event occurs.

   Grabbing an input device is performed rarely and usually only by
special clients, such as window managers.

   This section describes the CLX functions used to:
   * Select events (*note Selecting Events::)

   * Process an event on the event queue (*note Processing Events::)

   * Manage the event queue (*note Managing the Event Queue::)

   * Send events to other applications (*note Sending Events::)

   * Read and change the pointer position (*note Pointer Position::)

   * Manage the keyboard input focus (*note Managing Input Focus::)

   * Grab pointer and keyboard events (*note Grabbing the Pointer::)

   * Release queued events (*note Releasing Queued Events::)

   This section also contains a detailed description of the content of
each type of event.

* Menu:

* Selecting Events::
* Processing Events::
* Managing the Event Queue::
* Sending Events::
* Pointer Position::
* Managing Input Focus::
* Grabbing the Pointer::
* Grabbing a Button::
* Grabbing the Keyboard::
* Grabbing a Key::
* Event Types::
* Releasing Queued Events::


File: clx.info,  Node: Selecting Events,  Next: Processing Events,  Prev: Events and Input,  Up: Events and Input

13.1 Selecting Events
=====================

A client _selects_ which types of events it receives from a specific
window. The window event-mask attribute, set by the client, determines
which event types are selected (see WINDOW-EVENT-MASK in *note Window
Attributes::). Most types of events are received by a client only if
they are selected for some window.

   In the X protocol, an event-mask is represented as a bit string. CLX
also allows an event mask to be defined by a list of EVENT-MASK-CLASS
keywords. The functions MAKE-EVENT-KEYS and MAKE-EVENT-MASK can be used
to convert between these two forms of an event-mask. In general,
including an EVENT-MASK-CLASS keyword in an event-mask causes one or
more related event types to be selected. The following table describes
the event types selected by each EVENT-MASK-CLASS keyword.

Event Mask Keyword                   Event Types Selected
:BUTTON-1-MOTION                     :MOTION-NOTIFY when :BUTTON-1 is
                                     down
:BUTTON-2-MOTION                     :MOTION-NOTIFY when :BUTTON-2 is
                                     down
:BUTTON-3-MOTION                     :MOTION-NOTIFY when :BUTTON-3 is
                                     down
:BUTTON-4-MOTION                     :MOTION-NOTIFY when :BUTTON-4 is
                                     down
:BUTTON-5-MOTION                     :MOTION-NOTIFY when :BUTTON-5 is
                                     down
:BUTTON-MOTION                       :MOTION-NOTIFY when any pointer
                                     button is down
:BUTTON-PRESS                        :BUTTON-PRESS
:BUTTON-RELEASE                      :BUTTON-RELEASE
:COLORMAP-CHANGE                     :COLORMAP-NOTIFY
:ENTER-WINDOW                        :ENTER-NOTIFY
:EXPOSURE                            :EXPOSURE
:FOCUS-CHANGE                        :FOCUS-IN :FOCUS-OUT
:KEY-PRESS                           :KEY-PRESS
:KEY-RELEASE                         :KEY-RELEASE
:KEYMAP-STATE                        :KEYMAP-NOTIFY
:LEAVE-WINDOW                        :LEAVE-NOTIFY
:OWNER-GRAB-BUTTON                   Pointer events while button is
                                     grabbed
:POINTER-MOTION                      :MOTION-NOTIFY
:POINTER-MOTION-HINT                 Single :MOTION-NOTIFY only
:PROPERTY-CHANGE                     :PROPERTY-NOTIFY
:RESIZE-REDIRECT                     :RESIZE-REQUEST
:STRUCTURE-NOTIFY                    :CIRCULATE-NOTIFY :CONFIGURE-NOTIFY
                                     :DESTROY-NOTIFY :GRAVITY-NOTIFY
                                     :MAP-NOTIFY :REPARENT-NOTIFY
                                     :UNMAP-NOTIFY
:SUBSTRUCTURE-REDIRECT               :CIRCULATE-REQUEST
                                     :CONFIGURE-REQUEST :MAP-REQUEST
:VISIBILITY-CHANGE                   :VISIBILITY-NOTIFY

   Some types of events do not have to be selected to be received and
therefore are not represented in an event-mask. For example, the
COPY-PLANE and COPY-AREA functions cause :GRAPHICS-EXPOSURE and
:NO-EXPOSURE events to be reported, unless exposures are turned :OFF in
the graphics context (see COPY-AREA and COPY-PLANE in *note Area and
Plane Operations::, and GCONTEXT-EXPOSURES in paragraph 5.4.6,
Exposures).  Also, :SELECTION-CLEAR, :SELECTION-REQUEST,
:SELECTION-NOTIFY and :CLIENT-MESSAGE events can be received at any
time, but they are generally sent only to clients using selections
(*note Client Communications Events::). :MAPPING-NOTIFY is always sent
to clients when the keyboard mapping is changed.

   Any client can select events for any window. A window maintains a
separate event-mask for each interested client. In general, multiple
clients can select for the same events on a window. After the X server
generates an event, it sends it to all clients which selected it.
However, the following restrictions apply to sharing window events
among multiple clients. For a given window:
   * Only one client at a time can include :SUBSTRUCTURE-REDIRECT in
     its event-mask

   * Only one client at a time can can include :BUTTON-PRESS in its
     event-mask

   * Only one client at a time can include :RESIZE-REDIRECT in its
     event-mask


File: clx.info,  Node: Processing Events,  Next: Managing the Event Queue,  Prev: Selecting Events,  Up: Events and Input

13.2 Processing Events
======================

Events received by a CLX client are stored in an _event queue_ until
they are read and processed. Events are processed by _handler
functions_.

 -- Function: handler-function &rest event-slots &key :display
          :event-key :send-event-p &allow-other-keys
    :DISPLAY
          A DISPLAY for the connection that returned the event.

    :EVENT-KEY
          An EVENT-KEY keyword specifying the event type.

    :SEND-EVENT-P
          If true, the event was sent from another application using the
          SEND-EVENT function.

     The arguments to a handler function are keyword-value pairs that
     describe the contents of an event. The actual _event-slots_ passed
     depend on the event type, except that :DISPLAY, :EVENT-KEY, and
     :SEND-EVENT-P are given for all event types. The keyword symbols
     used for each event type are event slot names defined by the
     DECLARE-EVENT macro and are described in *note Declaring Event
     Types::.

     If a handler returns non-NIL, the event is considered _processed_
     and can be removed from the event queue. Otherwise, if a handler
     function returns NIL, the event can remain in the event queue for
     later processing.
    HANDLED-P
          Type BOOLEAN.


 -- Function: process-event display &key :handler :timeout :peek-p
          :discard-p (:force-output-p t)
    DISPLAY
          A DISPLAY.

    :HANDLER
          A handler function or a sequence of handler functions.

    :TIMEOUT
          Specifies the timeout delay in seconds.

    :PEEK-P
          If NIL, events are removed from the event queue after
          processing.

    :DISCARD-P
          If true, unprocessed events are discarded.

    :FORCE-OUTPUT-P
          If true, buffered output requests are sent.

     Invokes :HANDLER on each queued event until :HANDLER returns
     non-NIL. Then, the non-NIL :HANDLER value is returned by
     PROCESS-EVENT. If :HANDLER returns NIL for each event in the event
     queue, PROCESS-EVENT waits for another event to arrive. If timeout
     is non-NIL and no event arrives within the specified timeout
     interval (given in seconds), PROCESS-EVENT returns NIL; if timeout
     is NIL, PROCESS-EVENT will not return until :HANDLER returns
     non-NIL. PROCESS-EVENT may wait only once on network data, and
     therefore timeout prematurely.

     If :FORCE-OUTPUT-P is true, PROCESS-EVENT first invokes
     DISPLAY-FORCE-OUTPUT to send any buffered requests. If :PEEK-P is
     true, a processed event is not removed from the queue. If
     :DISCARD-P is true, unprocessed events are removed from the queue;
     otherwise, unprocessed events are left in place.

     If :HANDLER is a sequence, it is expected to contain handler
     functions for each event type.  The sequence index of the handler
     function for a particular event type is given by ( POSITION
     EVENT-KEY *EVENT-KEY-VECTOR*).
    HANDLED-P
          Type BOOLEAN.


 -- Macro: event-case display &key :timeout :peek-p :discard-p
          (:force-output-p t) &body clauses
    DISPLAY
          A DISPLAY.

    :HANDLER
          A handler function or a sequence of handler functions.

    :TIMEOUT
          Specifies the timeout delay, in seconds.

    :PEEK-P
          If NIL, events are removed from the event queue after
          processing.

    :DISCARD-P
          If true, unprocessed events are discarded.

    :FORCE-OUTPUT-P
          If true, buffered output requests are sent.

    CLAUSES
          Code to process specified event types.

     Executes the matching clause for each queued event until a clause
     returns non-NIL. The non-NIL clause value is then returned. Each
     of the clauses is a list of the form (_event-match_
     [_event-slots_] &rest _forms_), where:
        * _event-match_ - Either an EVENT-KEY, a list of EVENT-KEYS,
          otherwise, or T. It is an error for the same key to appear in
          more than one clause.

        * _event-slots_ - If given, a list of (non-keyword) event slot
          symbols defined for the specified event type(s). *Note
          Declaring Event Types::.

        * _forms_ - A list of forms that process the specified event
          type(s). The value of the last form is the value returned by
          the clause.

     A clause matches an event if the EVENT-KEY is equal to or a member
     of the _event-match_, or if the _event-match_ is T or OTHERWISE.
     If no T or OTHERWISE clause appears, it is equivalent to having a
     final clause that returns NIL. If _event-slots_ is given, these
     symbols are bound to the value of the corresponding event slot in
     the clause forms. Each element of _event-slots_ can also be a list
     of the form (_event-slot-keyword variable_), in which case the
     _variable_ symbol is bound to the value of the event slot
     specified by the _event-slot-keyword_.

     If every clause returns NIL for each event in the event queue,
     EVENT-CASE waits for another event to arrive. If :TIMEOUT is
     non-NIL and no event arrives within the specified timeout interval
     (given in seconds), EVENT-CASE returns NIL; if :TIMEOUT is NIL,
     EVENT-CASE will not return until a clause returns non-NIL.
     EVENT-CASE may wait only once on network data and therefore
     timeout prematurely.

     If :FORCE-OUTPUT-P is true, EVENT-CASE first invokes
     DISPLAY-FORCE-OUTPUT to send any buffered requests. If :PEEK-P is
     true, a processed event is not removed from the queue. If
     :DISCARD-P is true, unprocessed events are removed from the queue;
     otherwise, unprocessed events are left in place.

    HANDLED-P
          Type BOOLEAN.


 -- Macro: event-cond display &key :timeout :peek-p :discard-p
          (:force-output-p t) &body clauses
    HANDLED-P
          Type BOOLEAN.

     Similar to EVENT-CASE except that each of the clauses is a list of
     the form (_event-match_ [_event-slots_] _test-form_ &rest
     _forms_). Executes the _test-form_ of the clause that matches each
     queued event until a _test-form_ returns non-NIL. The body _forms_
     of the clause are then executed. The values returned by the last
     clause body form are then returned by EVENT-COND.

     When a _test-form_ returns true and :PEEK-P is NIL, or when a
     _test-form_ returns NIL and :DISCARD-P is true, the matching event
     is removed from the event queue before the body _forms_ are
     executed.
    DISPLAY
          A DISPLAY.

    :HANDLER
          A handler function or a sequence of handler functions.

    :TIMEOUT
          Specifies the timeout delay in seconds.

    :PEEK-P
          If NIL, events are removed from the event queue after
          processing.

    :DISCARD-P
          If true, unprocessed events are discarded.

    :FORCE-OUTPUT-P
          If true, buffered output requests are sent.

    CLAUSES
          Code to process specified event types.



File: clx.info,  Node: Managing the Event Queue,  Next: Sending Events,  Prev: Processing Events,  Up: Events and Input

13.3 Managing the Event Queue
=============================

The following paragraphs describe CLX functions and macros used to:
   * Put a new event on the event queue

   * Discard the current event

   * Return the current length of the event queue

   * Gain exclusive access to the event queue for a client process

 -- Function: queue-event display event-key &rest event-slots &key
          :append-p &allow-other-keys
    DISPLAY
          A DISPLAY.

    EVENT-KEY
          Specifies the type of event placed in the queue.

    EVENT-SLOTS
          Keyword-value pairs that describe the contents of an event.

    :APPEND-P
          If true, the event is placed at the tail of the queue;
          otherwise, the event is placed at the head of the queue.

     Places an event of the type given by _event-key_ into the event
     queue. When :APPEND-P is true, the event is placed at the tail of
     the queue; otherwise, the event is placed at the head of the
     queue. The actual _event-slots_ passed depend on the event type.
     The keyword symbols used for each event type are event slot names
     defined by the DECLARE-EVENT macro and are described in *note
     Declaring Event Types::.


 -- Function: discard-current-event display
    DISPLAY
          A DISPLAY.

     Discards the current event for the _display_. Returns NIL when the
     event queue is empty; otherwise, returns T. This function provides
     extra flexibility for discarding events, but it should be used
     carefully; use EVENT-COND instead, if possible. Typically,
     DISCARD-CURRENT-EVENT is called inside a handler function or a
     clause of an EVENT-CASE form and is followed by another call to
     PROCESS-EVENT, EVENT-CASE, or EVENT-COND.
    DISCARDED-P
          Type BOOLEAN.


 -- Function: event-listen display &optional (timeout 0)
    DISPLAY
          A DISPLAY.

    TIMEOUT
          The number of seconds to wait for events.

     Returns the number of events queued locally. If the event queue is
     empty, EVENT-LISTEN waits for an event to arrive. If timeout is
     non-NIL and no event arrives within the specified timeout interval
     (given in seconds), EVENT-LISTEN returns NIL; if timeout is NIL,
     EVENT-LISTEN will not return until an event arrives.
    EVENT-COUNT
          Type `(or null integer)'.


 -- Macro: with-event-queue display &body body
    DISPLAY
          A DISPLAY.

    BODY
          Forms to execute.

     Executes the _body_ in a critical region in which the executing
     client process has exclusive access to the event queue.



File: clx.info,  Node: Sending Events,  Next: Pointer Position,  Prev: Managing the Event Queue,  Up: Events and Input

13.4 Sending Events
===================

A client can send an event to a window. Clients selecting this window
event will receive it just like any other event sent by the X server.

 -- Function: send-event window event-key event-mask &rest event-slots
          &key :propagate-p :display &allow-other-keys
    WINDOW
          The destination WINDOW for the event.

    EVENT-KEY
          An EVENT-KEY defining the type of event to send.

    EVENT-MASK
          Specifies the event types that receiving clients must select.

    EVENT-SLOTS
          Keyword-value pairs that describe the contents of an event.

    :PROPAGATE-P
          If true, the event can be propagated to ancestors of the
          destination window.

    :DISPLAY
          A DISPLAY.

     Sends an event specified by the _event-key_ and _event-slots_ to
     the given destination _window_. Any active grabs are ignored. The
     _event-slots_ passed depend on the event type. The keyword symbols
     used for each event type are event slot names defined by the
     DECLARE-EVENT macro and are described in *note Declaring Event
     Types::.

     If the _window_ is :POINTER-WINDOW, the destination _window_ is
     replaced with the window containing the pointer. If the _window_
     is :INPUT-FOCUS, the destination _window_ is replaced with the
     descendant of the focus window that contains the pointer or (if no
     such descendant exists) the focus window. The :DISPLAY keyword is
     only required if the _window_ is :POINTER-WINDOW or :INPUT-FOCUS.

     The _event-key_ must be one of the core events, or one of the
     events defined by an extension, so the server can send the event
     with the correct byte-order. The contents of the event are
     otherwise unaltered and unchecked by the server, except that the
     SEND-EVENT-P event slot is set to true.

     If the _event-mask_ is NIL, the event is sent to the client that
     created the destination _window_ with an _event-mask_ of 0; if
     that client no longer exists, no event is sent. Otherwise, the
     event is sent to every client selecting any of the event types
     specified by _event-mask_ on the destination _window_.

     If :PROPAGATE-P is true and no clients have selected any of the
     event types in _event-mask_ on the destination _window_, the
     destination is replaced with the closest ancestor of _window_ for
     which some client has selected a type in _event-mask_ and no
     intervening window has that type in its do-not-propagate mask. If
     no such window exists, or if the _window_ is an ancestor of the
     focus window and :INPUT-FOCUS was originally specified as the
     destination, the event is not sent to any clients. Otherwise, the
     event is reported to every client selecting on the final
     destination any of the types specified in _event-mask_.



File: clx.info,  Node: Pointer Position,  Next: Managing Input Focus,  Prev: Sending Events,  Up: Events and Input

13.5 Pointer Position
=====================

The CLX functions affecting pointer position are discussed in the
following paragraphs.

 -- Function: query-pointer window
    WINDOW
          A WINDOW specifying the coordinate system for the returned
          position.

     Returns the current pointer coordinates relative to the given
     _window_. If QUERY-POINTER returns NIL for _same-screen-p_, the
     pointer is not on the same screen as the _window_. In this case,
     QUERY-POINTER returns a value of NIL for _child_ and a value of
     zero for _x_ and _y_. If QUERY-POINTER returns true for
     _same-screen-p_, the returned _x_ and _y_ are relative to the
     origin of window. The _child_ is the child of the window
     containing the pointer, if any. The _state-mask_ returned gives
     the current state of the modifier keys and pointer buttons. The
     returned _root_ is the root window currently containing the
     pointer. The returned _root-x_ and _root-y_ specify the pointer
     coordinates relative to _root_.
    X
          Type INT16.

    Y
          Type INT16.

    SAME-SCREEN-P
          Type BOOLEAN.

    CHILD
          Type WINDOW or NULL.

    STATE-MASK
          Type CARD16.

    ROOT-X
          Type INT16.

    ROOT-Y
          Type INT16.

    ROOT
          Type WINDOW.


 -- Function: global-pointer-position display
    DISPLAY
          A DISPLAY.

     Returns the _root_ window currently containing the _display_
     pointer and the current position of the pointer relative to the
     _root_.
    ROOT-X
          Type INT16.

    ROOT-Y
          Type INT16.

    ROOT
          Type WINDOW.


 -- Function: pointer-position window
    WINDOW
          A WINDOW specifying the coordinate system for the returned
          position.

     Returns the current pointer coordinates relative to the given
     _window_. If POINTER-POSITION returns NIL for _same-screen-p_, the
     pointer is not on the same screen as the _window_.  In this case,
     POINTER-POSITION returns a value of NIL for _child_ and a value of
     zero for _x_ and _y_. If POINTER-POSITION returns true for
     _same-screen-p_, the returned _x_ and _y_ are relative to the
     origin of _window_.
    X
          Type INT16.

    Y
          Type INT16.

    SAME-SCREEN-P
          Type BOOLEAN.

    CHILD
          Type WINDOW or NULL.


 -- Function: motion-events window &key :start :stop (:result-type
          'list)
    WINDOW
          The WINDOW containing the returned motion events.

    :START
    :STOP
          TIMESTAMP values for the time interval for returned motion
          events.

    :RESULT-TYPE
          The form of the returned motion events.

     Many X server implementations maintain a more precise history of
     pointer motion between event notifications. The pointer position
     at each pointer hardware interrupt can be stored into a buffer for
     later retrieval.This is called the _motion history buffer_. A
     paint program, for example, may want to have a precise history of
     where the pointer traveled, even though for most other
     applications this amount of detail is grossly excessive.

     The MOTION-EVENTS function returns all events in the motion
     history buffer that fall between the specified :START and :STOP
     timestamps (inclusive) and have coordinates that lie within the
     specified _window_ (including borders) at its present placement.
     If the :START time is later than the :STOP time or if the :START
     time is in the future, no events are returned.
    MOTION-EVENTS
          Type `(repeat-seq (int16 x) (int16 y) (timestamp time))'.


 -- Function: warp-pointer destination destination-x destination-y
    DESTINATION
          The WINDOW into which the pointer is moved.

    DESTINATION-X
    DESTINATION-Y
          The new position of the pointer relative to the destination.

     Moves the pointer to the given coordinates relative to the
     _destination_ window.  WARP-POINTER should be rarely be used since
     the user should normally be in control of the pointer position.
     WARP-POINTER generates events just as if the user had
     instantaneously moved the pointer from one position to another.

     WARP-POINTER cannot move the pointer outside the confine-to window
     of an active pointer grab; an attempt to do so only moves the
     pointer as far as the closest edge of the confine-to window.


 -- Function: warp-pointer-relative display x-offset y-offset
    DISPLAY
          A DISPLAY.

    X-OFFSET
    Y-OFFSET
          The offsets used to adjust the pointer position.

     Moves the pointer by the given offsets. This function should rarely
     be used since the user should normally be in control of the pointer
     position. WARP-POINTER-RELATIVE generates events just as if the
     user had instantaneously moved the pointer from one position to
     another.

     WARP-POINTER-RELATIVE cannot move the pointer outside the
     confine-to window of an active pointer grab; an attempt to do so
     only moves the pointer as far as the closest edge of the confine-to
     window.


 -- Function: warp-pointer-if-inside destination destination-x
          destination-y source source-x source-y &optional
          (source-width 0) (source-height 0)
    DESTINATION
          The WINDOW into which the pointer is moved.

    DESTINATION-X
    DESTINATION-Y
          The new position of the pointer relative to the _destination_.

    SOURCE
          The WINDOW that must currently contain the pointer.

    SOURCE-X
    SOURCE-Y
    SOURCE-WIDTH
    SOURCE-HEIGHT
          The source rectangle that must currently contain the pointer.

     Moves the pointer to the given position relative to the
     _destination_ window. However, the move can only take place if the
     pointer is currently contained in a visible portion of the
     specified rectangle of the _source_ window. If _source-height_ is
     zero, it is replaced with the current height of _source_ window
     minus _source-y_. If _source-width_ is zero, it is replaced with
     the current width of _source_ window minus _source-x_.

     WARP-POINTER-IF-INSIDE generates events just as if the user had
     instantaneously moved the pointer from one position to another.
     WARP-POINTER-IF-INSIDE cannot move the pointer outside the
     confine-to window of an active pointer grab; an attempt to do so
     only moves the pointer as far as the closest edge of the
     confine-to window.


 -- Function: warp-pointer-relative-if-inside x-offset y-offset source
          source-x source-y &optional (source-width 0) (source-height 0)
    X-OFFSET
    Y-OFFSET
          The offsets used to adjust the pointer position.

    SOURCE
          The WINDOW that must currently contain the pointer.

    SOURCE-X
    SOURCE-Y
    SOURCE-WIDTH
    SOURCE-HEIGHT
          The source rectangle that must currently contain the pointer.

     Moves the pointer by the given offsets. However, the move can only
     take place if the pointer is currently contained in a visible
     portion of the specified rectangle of the _source_ window. If
     _source-height_ is zero, it is replaced with the current height of
     _source-window_ minus _source-y_. If _source-width_ is zero, it is
     replaced with the current width of _source-window_ minus
     _source-x_.

     WARP-POINTER-RELATIVE-IF-INSIDE generates events just as if the
     user had instantaneously moved the pointer from one position to
     another. WARP-POINTER-RELATIVE-IF-INSIDE cannot move the pointer
     outside the confine-to window of an active pointer grab; an
     attempt to do so only moves the pointer as far as the closest edge
     of the confine-to window.



File: clx.info,  Node: Managing Input Focus,  Next: Grabbing the Pointer,  Prev: Pointer Position,  Up: Events and Input

13.6 Managing Input Focus
=========================

CLX provides the SET-FOCUS-INPUT and FOCUS-INPUT functions to set and
get the keyboard input focus window.

 -- Function: set-input-focus display focus revert-to &optional time
    DISPLAY
          A DISPLAY.

    FOCUS
          The new input focus WINDOW.

    REVERT-TO
          The focus WINDOW when focus is no longer viewable.

    TIME
          A TIMESTAMP.

     Changes the keyboard input focus and the last-focus-change time.
     The function has no effect if the specified _time_ is earlier than
     the current last-focus-change time or is later than the current
     server time; otherwise, the last-focus-change time is set to the
     specified _time_. The SET-INPUT-FOCUS function causes the X server
     to generate :FOCUS-IN and :FOCUS-OUT events.

     If :NONE is specified as the _focus_, all keyboard events are
     discarded until a new focus window is set. In this case, the
     _revert-to_ argument is ignored.

     If a window is specified as the _focus_ argument, it becomes the
     keyboard's focus window.  If a generated keyboard event would
     normally be reported to this window or one of its inferiors, the
     event is reported normally; otherwise, the event is reported with
     respect to the focus window.

     If :POINTER-ROOT is specified as the _focus_ argument, the input
     focus window is set to the root window of the screen containing
     the pointer when each keyboard event occurs. In this case, the
     _revert-to_ argument is ignored.

     The specified _focus_ window must be viewable at the time of the
     request. If the _focus_ window later becomes not viewable, the new
     focus window depends on the _revert-to_ argument. If _revert-to_
     is specified as :PARENT, the _focus_ reverts to the parent (or the
     closest viewable ancestor) and the new _revert-to_ value is take
     to be :NONE. If _revert-to_ is :POINTER-ROOT or :NONE, the _focus_
     reverts to that value. When the _focus_ reverts, :FOCUS-IN and
     :FOCUS-OUT events are generated, but the last-focus-change time is
     not affected.


 -- Function: input-focus display
    DISPLAY
          A DISPLAY.

     Returns the _focus_ window, :POINTER-ROOT, or :NONE, depending on
     the current state of the focus window. _revert-to_ returns the
     current focus revert-to state.
    FOCUS
          Type (OR WINDOW (MEMBER :NONE :POINTER-ROOT)).

    REVERT-TO
          Type (OR WINDOW (MEMBER :NONE :POINTER-ROOT :PARENT)).



File: clx.info,  Node: Grabbing the Pointer,  Next: Grabbing a Button,  Prev: Managing Input Focus,  Up: Events and Input

13.7 Grabbing the Pointer
=========================

CLX provides the GRAB-POINTER and UNGRAB-POINTER functions for grabbing
and releasing pointer control.

 -- Function: grab-pointer window event-mask &key :owner-p
          :sync-pointer-p :sync-keyboard-p :confine-to :cursor :time
    WINDOW
          The WINDOW grabbing the pointer.

    EVENT-MASK
          A POINTER-EVENT-MASK.

    :OWNER-P
          If true, all client windows receive pointer events normally.

    :SYNC-POINTER-P
          Indicates whether the pointer is in synchronous or
          asynchronous mode.

    :SYNC-KEYBOARD-P
          Indicates whether the keyboard is in synchronous or
          asynchronous mode.

    :CONFINE-TO
          A WINDOW to which the pointer is confined.

    :CURSOR
          A CURSOR.

    :TIME
          A TIMESTAMP. A NIL value means the current server time is
          used.

     Actively grabs control of the pointer. Further pointer events are
     only reported to the grabbing client. The request overrides any
     active pointer grab by this client.

     If :OWNER-P is NIL, all generated pointer events are reported with
     respect to _window_, and are only reported if selected by
     _event-mask_. If :OWNER-P is true, and if a generated pointer
     event would normally be reported to this client, it is reported
     normally; otherwise the event is reported with respect to the
     _window_, and is only reported if selected by _event-mask_. For
     either value of :OWNER-P, unreported events are simply discarded.

     If :SYNC-POINTER-P is NIL, pointer event processing continues
     normally (asynchronously); if the pointer is currently frozen by
     this client, then processing of pointer events is resumed. If
     :SYNC-POINTER-P is true (indicating a synchronous action), the
     pointer (as seen via the protocol) appears to freeze, and no
     further pointer events are generated by the server until the
     grabbing client issues a releasing ALLOW-EVENTS request.  Actual
     pointer changes are not lost while the pointer is frozen; they are
     simply queued for later processing.

     If :SYNC-KEYBOARD-P is NIL, keyboard event processing is
     unaffected by activation of the grab. If :SYNC-KEYBOARD-P is true,
     the keyboard (as seen via the protocol) appears to freeze, and no
     further keyboard events are generated by the server until the
     grabbing client issues a releasing ALLOW-EVENTS request. Actual
     keyboard changes are not lost while the keyboard is frozen; they
     are simply queued for later processing.

     If :CURSOR is specified, it is displayed regardless of what window
     the pointer is in.  Otherwise, the normal cursor for the _window_
     is displayed.

     If a :CONFINE-TO window is specified, the pointer is restricted to
     stay within that window.  The :CONFINE-TO window does not need to
     have any relationship to the _window_. If the pointer is not
     initially in the :CONFINE-TO window, it is warped automatically to
     the closest edge (with :ENTER/:LEAVE-EVENTS generated normally)
     just before the grab activates.  If the :CONFINE-TO window is
     subsequently reconfigured, the pointer is warped automatically as
     necessary to keep it contained in the window.

     GRAB-POINTER generates :ENTER-NOTIFY and :LEAVE-NOTIFY events.
     GRAB-POINTER can fail with a status of:
        * :ALREADY-GRABBED if the pointer is actively grabbed by some
          other client

        * :FROZEN if the pointer is frozen by an active grab of another
          client

        * :NOT-VIEWABLE if the _window_ or the :CONFINE-TO window is
          not viewable, or if the :CONFINE-TO window lies completely
          outside the boundaries of the root window.

        * :INVALID-TIME if the specified time is earlier than the
          last-pointer-grab time or later than the current server time.
          Otherwise, the last-pointer-grab time is set to the specified
          time, with current-time replaced by the current server time,
          and a value of :SUCCESS is returned by GRAB-POINTER.

    GRAB-STATUS
          One of :ALREADY-GRABBED, :FROZEN, :INVALID-TIME,
          :NOT-VIEWABLE, or :SUCCESS.


 -- Function: ungrab-pointer display &key :time
    DISPLAY
          A DISPLAY.

    :TIME
          A TIMESTAMP.

     Releases the pointer if this client has it actively grabbed (from
     either GRAB-POINTER, GRAB-BUTTON, or from a normal button press),
     and releases any queued events. The request has no effect if the
     specified :TIME is earlier than the last-pointer-grab time or is
     later than the current server time. An UNGRABPOINTER is performed
     automatically if the event window or :CONFINE-TO window for an
     active pointer grab becomes not viewable.

     This request generates :ENTER-NOTIFY and :LEAVE-NOTIFY events.


 -- Function: change-active-pointer-grab display event-mask &optional
          cursor time
    DISPLAY
          A DISPLAY.

    EVENT-MASK
          A POINTER-EVENT-MASK.

    CURSOR
          A CURSOR or NIL.

    TIME
          A TIMESTAMP.

     Changes the specified dynamic parameters if the pointer is actively
     grabbed by the client and the specified _time_ is no earlier than
     the last-pointer-grab time and no later than the current server
     time. The interpretation of _event-mask_ and _cursor_ are as in
     GRAB-POINTER.  CHANGE-ACTIVE-POINTER-GRAB has no effect on the
     passive parameters of a GRAB-BUTTON.



File: clx.info,  Node: Grabbing a Button,  Next: Grabbing the Keyboard,  Prev: Grabbing the Pointer,  Up: Events and Input

13.8 Grabbing a Button
======================

CLX provides the GRAB-BUTTON and UNGRAB-BUTTON functions for passively
grabbing and releasing pointer control.

 -- Function: grab-button window button event-mask &key (:modifiers 0)
          :owner-p :sync-pointer-p :sync-keyboard-p :confine-to :cursor
    WINDOW
          A WINDOW.

    BUTTON
          The button (type CARD8) pressed or :ANY.

    EVENT-MASK
          A POINTER-EVENT-MASK.

    :MODIFIERS
          A MODIFIER-MASK.

    :OWNER-P
          If true, all client windows receive pointer events normally.

    :SYNC-POINTER-P
          Indicates whether the pointer is handled in a synchronous or
          asynchronous fashion.

    :SYNC-KEYBOARD-P
          Indicates whether the keyboard is in synchronous or
          asynchronous mode.

    :CONFINE-TO
          A WINDOW to which the pointer is confined.

    :CURSOR
          A CURSOR.

     This request establishes a passive grab. If the specified _button_
     is pressed when the specified modifier keys are down (and no other
     buttons or modifier keys are down), and:
        * _window_ contains the pointer

        * The :CONFINE-TO window (if any) is viewable

        * These constraints are not satisfied for any ancestor of
          _window_

     then:
        * The pointer is actively grabbed as described with GRAB-POINTER

        * The last-pointer-grab time is set to the time that the button
          was pressed (as transmitted in the :BUTTON-PRESS event)

        * The :BUTTON-PRESS event is reported

     The interpretation of the remaining arguments is the same as with
     GRAB-POINTER. The active grab is terminated automatically when all
     buttons are released (independent of the state of modifier keys).

     A zero _modifier_ mask is equivalent to issuing the request for
     all possible modifier-key combinations (including the combination
     of no modifiers). It is not required that all specified modifiers
     have currently assigned keycodes. A _button_ of :ANY is equivalent
     to issuing the request for all possible buttons. Otherwise, it is
     not required that the specified _button_ currently be assigned to
     a physical button.


 -- Function: ungrab-button window button &key (:modifiers 0)
    WINDOW
          A WINDOW.

    BUTTON
          The button (type CARD8) that is released or :ANY.

    :MODIFIERS
          A MODIFIER-MASK.

     Releases the passive button/key combination on the specified
     _window_ if it was grabbed by this client. A zero _modifier_ mask
     is equivalent to issuing the request for all possible modifier
     combinations including the combination of no modifiers. A _button_
     of :ANY is equivalent to issuing the request for all possible
     buttons. This has no effect on an active grab.



File: clx.info,  Node: Grabbing the Keyboard,  Next: Grabbing a Key,  Prev: Grabbing a Button,  Up: Events and Input

13.9 Grabbing the Keyboard
==========================

CLX provides the GRAB-KEYBOARD and UNGRAB-KEYBOARD functions for
actively grabbing and releasing control of the keyboard.

 -- Function: grab-keyboard window &key :owner-p :sync-pointer-p
          :sync-keyboard-p :time
    WINDOW
          A WINDOW.

    :OWNER-P
          If true, all client windows receive keyboard input normally.

    :SYNC-POINTER-P
          Indicates whether the pointer is in synchronous or
          asynchronous mode.

    :SYNC-KEYBOARD-P
          Indicates whether the keyboard is in synchronous or
          asynchronous mode.

    :TIME
          A TIMESTAMP.

     Actively grabs control of the keyboard. Further key events are
     reported only to the grabbing client. The request overrides any
     active keyboard grab by this client.  GRAB-KEYBOARD generates
     :FOCUS-IN and :FOCUS-OUT events.

     If :OWNER-P is NIL, all generated key events are reported with
     respect to _window_. If :OWNER-P is true, then a generated key
     event that would normally be reported to this client is reported
     normally; otherwise the event is reported with respect to the
     _window_.  Both :KEY-PRESS and :KEY-RELEASE events are always
     reported, independent of any event selection made by the client.

     If :SYNC-KEYBOARD-P is NIL, keyboard event processing continues
     normally (asynchronously); if the keyboard is currently frozen by
     this client, then processing of keyboard events is resumed. If
     :SYNC-KEYBOARD-P is true, the keyboard (as seen via the protocol)
     appears to freeze, and no further keyboard events are generated by
     the server until the grabbing client issues a releasing
     ALLOW-EVENTS request. Actual keyboard changes are not lost while
     the keyboard is frozen; they are simply queued for later
     processing.

     If :SYNC-POINTER-P is NIL, pointer event processing is unaffected
     by activation of the grab. If :SYNC-POINTER-P is true, the pointer
     (as seen via the protocol) appears to freeze, and no further
     pointer events are generated by the server until the grabbing
     client issues a releasing ALLOW-EVENTS request. Actual pointer
     changes are not lost while the pointer is frozen; they are simply
     queued for later processing.

     The grab can fail with a status of:
        * :ALREADY-GRABBED if the keyboard is actively grabbed by some
          other client

        * :FROZEN if the keyboard is frozen by an active grab from
          another client

        * :NOT-VIEWABLE if _window_ is not viewable

        * :INVALID-TIME if the specified time is earlier than the
          last-keyboard-grab time or later than the current server
          time. Otherwise, GRAB-KEYBOARD returns a status of :SUCCESS
          and last-keyboard-grab time is set to the specified time,
          with current-time replaced by current server time.

    GRAB-STATUS
          One of :ALREADY-GRABBED, :FROZEN, :INVALID-TIME,
          :NOT-VIEWABLE, or :SUCCESS.


 -- Function: ungrab-keyboard display &key :time
    DISPLAY
          A DISPLAY.

    :TIME
          A TIMESTAMP.

     Releases the keyboard if this client has it actively grabbed (from
     either GRAB-KEYBOARD or GRAB-KEY), and releases any queued events.
     The request has no effect if the specified time is earlier than
     the last-keyboard-grab time or is later than the current server
     time.  An UNGRAB-KEYBOARD is performed automatically if the event
     window for an active keyboard grab becomes not viewable.



File: clx.info,  Node: Grabbing a Key,  Next: Event Types,  Prev: Grabbing the Keyboard,  Up: Events and Input

13.10 Grabbing a Key
====================

The following paragraphs describe the functions used for passively
grabbing and releasing the keyboard.

 -- Function: grab-key window key &key (:modifiers 0) :owner-p
          :sync-pointer-p :sync-keyboard-p :time
    WINDOW
          A WINDOW.

    KEY
          The key (type CARD8) to be grabbed or :ANY.

    :MODIFIERS
          A MODIFIER-MASK.

    :OWNER-P
          If true, all client windows receive keyboard input normally.

    :SYNC-POINTER-P
          Indicates whether the pointer is in synchronous or
          asynchronous mode.

    :SYNC-KEYBOARD-P
          Indicates whether the keyboard is in synchronous or
          asynchronous mode.

    :TIME
          A TIMESTAMP.

     This request establishes a passive grab on the keyboard. If the
     specified _key_ (which can also be a modifier key) is pressed
     (whether or not any specified modifier keys are down), and either
     of the following is true:
        * _window_ is an ancestor of (or is) the focus window

        * _window_ is a descendant of the focus window and contains the
          pointer

        * These constraints are not satisfied for any ancestor of
          _window_, then the following occurs:
             * The keyboard is actively grabbed as described in
               GRAB-KEYBOARD

             * The last-keyboard-grab time is set to the time that the
               _key_ was pressed (as transmitted in the :KEY-PRESS
               event)

             * The :KEY-PRESS event is reported
     The interpretation of the remaining arguments is as for
     GRAB-KEYBOARD. The active grab is terminated automatically when
     the specified _key_ has been released, independent of the state of
     the modifier keys.

     A zero modifier mask is equivalent to issuing the request for all
     possible modifier combinations (including the combination of no
     modifiers). It is not required that all specified modifiers have
     currently assigned keycodes. A _key_ of :ANY is equivalent to
     issuing the request for all possible keycodes. Otherwise, the
     _key_ must be in the range specified by DISPLAY-MIN-KEYCODE and
     DISPLAY-MAX-KEYCODE in the connection setup.


 -- Function: ungrab-key window key &key (:modifiers 0)
    WINDOW
          A WINDOW.

    KEY
          The key (type CARD8) to be released or :ANY.

    :MODIFIERS
          A MODIFIER-MASK.

     Releases the _key_ combination on the specified _window_ if it was
     grabbed by this client. A zero modifier mask of :ANY is equivalent
     to issuing the request for all possible modifier combinations
     (including the combination of no modifiers). A _key_ of :ANY is
     equivalent to issuing the request for all possible keycodes.
     UNGRAB-KEY has no effect on an active grab.



File: clx.info,  Node: Event Types,  Next: Releasing Queued Events,  Prev: Grabbing a Key,  Up: Events and Input

13.11 Event Types
=================

The following paragraphs contain detailed descriptions of the contents
of each event type. In CLX, events are not actually represented by
structures, but rather by lists of keyword values passed to handler
functions or by values bound to symbols within the clauses of
EVENT-CASE and EVENT-COND forms. Nevertheless, it is convenient to
describe event contents in terms of slots and to identify the
components of events with slot name symbols. In fact, CLX uses the
DECLARE-EVENT macro to define event slot symbols and to map these
symbols to specific event data items returned by the X server (*note
Declaring Event Types::).

   The following paragraphs describe each event type, listing its
EVENT-KEY keyword symbol and its slot name symbols. An event keyword
symbol identifies a specific event type.  An event keyword symbol can
be given as an argument to SEND-EVENT or to an event handler function;
it can also appear in the _event-match_ form of an EVENT-CASE clause.
An event slot name symbol identifies a specific event data item. Event
slot names appear as keywords with associated values among the
arguments passed to SEND-EVENT or to an event handler function; as
non-keyword symbols, they can also be in the _event-slots_ form of an
EVENT-CASE clause.

   In certain cases, more than one name symbol is defined for the same
event slot. For example, in :KEY-PRESS events, the symbols _window_ and
_event-window_ both refer to the same event data item.

* Menu:

* Keyboard and Pointer Events::
* Input Focus Events::
* Keyboard and Pointer State Events::
* Exposure Events::
* Window State Events::
* Structure Control Events::
* Client Communications Events::
* Declaring Event Types::


File: clx.info,  Node: Keyboard and Pointer Events,  Next: Input Focus Events,  Prev: Event Types,  Up: Event Types

13.11.1 Keyboard and Pointer Events
-----------------------------------

The keyboard and pointer events are: :KEY-PRESS :KEY-RELEASE,
:BUTTON-PRESS, :BUTTON-RELEASE, :MOTION-NOTIFY, :ENTER-NOTIFY, and
:LEAVE-NOTIFY.

 -- Event Type: :key-press
 -- Event Type: :key-release
 -- Event Type: :button-press
 -- Event Type: :button-release
     Selected by :KEY-PRESS, :KEY-RELEASE, :BUTTON-PRESS, or
     :BUTTON-RELEASE.

     :KEY-PRESS, and :KEY-RELEASE events are generated when a key or
     pointer button changes state. Note that :KEY-PRESS and
     :KEY-RELEASE are generated for all keys, even those mapped to
     modifiers. All of these event types have the same slots. The
     window containing the pointer at the time of the event is referred
     to as the _source_ window. The _event_ _window_ is the window to
     which the event is actually reported. The event window is found by
     starting with the source window and looking up the hierarchy for
     the first window on which any client has selected interest in the
     event (provided no intervening window prohibits event generation
     by including the event type in its do-not-propagate-mask). The
     actual window used for reporting can be modified by active grabs
     and, in the case of keyboard events, can be modified by the focus
     window.

     A :BUTTON-PRESS event has the effect of a temporary GRAB-BUTTON.
     When a pointer button is pressed and no active pointer grab is in
     progress, the ancestors of the source window are searched from the
     _root_ down, looking for a passive grab to activate. If no
     matching passive grab on the button exists, then an active grab is
     started automatically for the client receiving the :BUTTON-PRESS
     event, and the last-pointer-grab time is set to the current server
     time. The effect is essentially equivalent to calling GRAB-BUTTON
     with the following arguments:

    _WINDOW_
          The event window.

    _BUTTON_
          The button that was pressed.

    _EVENT-MASK_
          The client's selected pointer events on the event window.

    :MODIFIERS
          0

    :OWNER-P
          T if the client has :OWNER-GRAB-BUTTON selected on the event
          window; otherwise NIL.

    :SYNC-POINTER-P
          NIL

    :SYNC-KEYBOARD-P
          NIL

    :CONFINE-TO
          NIL

    :CURSOR
          NIL

     The :BUTTON-PRESS grab is terminated automatically when all
     buttons are released. The functions UNGRAB-POINTER and
     CHANGE-ACTIVE-POINTER-GRAB can both be used to modify the
     :BUTTON-PRESS grab.

    WINDOW

    EVENT-WINDOW
          Type WINDOW.

          The window receiving the event.

    CODE
          Type CARD8.

          The _code_ argument varies with the event type. For
          :KEY-PRESS and :KEY-RELEASE, _code_ is the keycode (*note
          Keyboard Encodings::). For :BUTTON-PRESS and :BUTTON-RELEASE,
          _code_ is the pointer button number.

    X
          Type INT16.

          If _event-window_ is on the same screen as root, then _x_ and
          _y_ are the pointer coordinates relative to the
          _event-window_; otherwise _x_ and _y_ are zero.

    Y
          Type INT16.

          If _event-window_ is on the same screen as root, then _x_ and
          _y_ are the pointer coordinates relative to the
          _event-window_; otherwise _x_ and _y_ are zero.

    STATE
          Type CARD16.

          A mask that gives the state of the buttons and modifier keys
          just before the event.

    TIME
          Type CARD32.

          A timestamp for the moment when the event occurred.

    ROOT
          Type WINDOW.

          The root window of the source window.

    ROOT-X
          Type INT16.

          The x coordinate of the pointer position relative to root at
          the time of the event.

    ROOT-Y
          Type INT16.

          The y coordinate of the pointer position relative to root at
          the time of the event_._

    CHILD
          Type (OR NULL WINDOW).

          If the source window is an inferior of the _event-window_,
          _child_ is set to the child of _event-window_ that is an
          ancestor of (or is) the source window; otherwise, it is set
          to NIL_._

    SAME-SCREEN-P
          Type BOOLEAN.

          True if _event-window_ and root are on the same screen.


 -- Event Type: :motion-notify
     Selected by: :BUTTON-1-MOTION, :BUTTON-2-MOTION, :BUTTON-3-MOTION,
     :BUTTON-4-MOTION, :BUTTON-5-MOTION, :BUTTON-MOTION, or
     :POINTER-MOTION.

     The :MOTION-NOTIFY event is generated when the pointer moves. A
     :MOTION-NOTIFY event has the same slots as :BUTTON-PRESS
     :BUTTON-RELEASE, :KEY-PRESS, and :KEY-RELEASE events, with the
     exception that the _code_ slot is replaced by the _hint-p_ slot.
     As with these other events, the event window for :MOTION-NOTIFY is
     found by starting with the source window and looking up the
     hierarchy for the first window on which any client has selected
     interest in the event (provided no intervening window prohibits
     event generation by including :MOTION-NOTIFY in its
     do-not-propagate-mask).The actual window used for reporting can be
     modified by active grabs.

     :MOTION-NOTIFY events are generated only when the motion begins
     and ends in the window. The granularity of motion events is not
     guaranteed, but a client selecting for motion events is guaranteed
     to get at least one event when the pointer moves and comes to
     rest. Selecting :POINTER-MOTION generates :MOTION-NOTIFY events
     regardless of the state of the pointer buttons. By selecting some
     subset of :BUTTON[1-5]-MOTION instead, :MOTION-NOTIFY events are
     only received when one or more of the specified buttons are
     pressed. By selecting :BUTTON-MOTION, :MOTION-NOTIFY events are
     only received when at least one button is pressed. If
     :POINTER-MOTION-HINT is also selected, the server is free to send
     only one :MOTION-NOTIFY, until either the key or button state
     changes, the pointer leaves the event window, or the client calls
     QUERY-POINTER or MOTION-EVENTS.

    HINT-P
          Type BOOLEAN.

          True if the event is a hint generated by selecting
          :POINTER-MOTION-HINT.


 -- Event Type: :enter-notify
 -- Event Type: :leave-notify
     Selected by: :ENTER-WINDOW or :LEAVE-WINDOW.

     If pointer motion or a window hierarchy change causes the pointer
     to be in a different window than before, :ENTER-NOTIFY and
     :LEAVE-NOTIFY events are generated instead of a :MOTION-NOTIFY
     event. All :ENTER-NOTIFY and :LEAVE-NOTIFY events caused by a
     hierarchy change are generated after any hierarchy event
     (:UNMAP-NOTIFY, :MAP-NOTIFY, :CONFIGURE-NOTIFY, :GRAVITY-NOTIFY,
     or :CIRCULATE-NOTIFY) caused by that change, but the ordering of
     :ENTER-NOTIFY and :LEAVE-NOTIFY events with respect to :FOCUS-OUT,
     :VISIBILITY-NOTIFY, and :EXPOSURE events is not constrained by the
     X protocol. An :ENTER-NOTIFY or :LEAVE-NOTIFY event can also be
     generated when a client application calls
     CHANGE-ACTIVE-POINTER-GRAB, GRAB-POINTER, or UNGRAB-POINTER.

    WINDOW
    EVENT-WINDOW
          Type WINDOW.

          The window receiving the event.

    X
          Type INT16.

          The final pointer position. If _event-window_ is on the same
          screen as root, then _x_ and _y_ are the pointer coordinates
          relative to the _event-window_; otherwise _x_ and _y_ are
          zero.

    Y
          Type INT16.

          The final pointer position. If _event-window_ is on the same
          screen as root, then _x_ and _y_ are the pointer coordinates
          relative to the _event-window_; otherwise _x_ and _y_ are
          zero.

    MODE
          Type (MEMBER :NORMAL :GRAB :UNGRAB).

          Events caused when the pointer is actively grabbed have mode
          :GRAB. Events caused when an active pointer grab deactivates
          have mode :UNGRAB. In all other cases, mode is :NORMAL.

    KIND
          Type (MEMBER :ANCESTOR :VIRTUAL :INFERIOR :NONLINEAR
          :NONLINEAR-VIRTUAL).

          When the pointer moves from window A to window B, and A is an
          inferior of B:
             * :LEAVE-NOTIFY with _kind_ :ANCESTOR is generated on A

             * :LEAVE-NOTIFY with _kind_ :VIRTUAL is generated on each
               window between A and B exclusive (in that order)

             * :ENTER-NOTIFY with _kind_ :INFERIOR is generated on B

          When the pointer moves from window A to window B, and B is an
          inferior of A:
             * :LEAVE-NOTIFY with _kind_ :INFERIOR is generated on A

             * :ENTER-NOTIFY with _kind_ :VIRTUAL is generated on each
               window between A and B exclusive (in that order)

             * :ENTER-NOTIFY with _kind_ :ANCESTOR is generated on B

          When the pointer moves from window A to window B, with window
          C being their least common ancestor:
             * :LEAVE-NOTIFY with _kind_ :NONLINEAR is generated on A

             * :LEAVE-NOTIFY with _kind_ :NONLINEAR-VIRTUAL is
               generated on each window between A and C exclusive (in
               that order)

             * :ENTER-NOTIFY with _kind_ :NONLINEAR-VIRTUAL is
               generated on each window between C and B exclusive (in
               that order)

             * :ENTER-NOTIFY with _kind_ :NONLINEAR is generated on B

          When the pointer moves from window A to window B, on
          different screens:
             * :LEAVE-NOTIFY with _kind_ :NONLINEAR is generated on A

             * If A is not a root window, :LEAVE-NOTIFY with _kind_
               :NONLINEAR-VIRTUAL is generated on each window above A
               up to and including its root (in order)

             * If B is not a root window, :ENTER-NOTIFY with _kind_
               :NONLINEAR-VIRTUAL is generated on each window from B's
               root down to but not including B (in order)

             * :ENTER-NOTIFY with _kind_ :NONLINEAR is generated on B

          When a pointer grab activates (but after any initial warp
          into a confine-to window, and before generating any actual
          :BUTTON-PRESS event that activates the grab), with _G_ the
          GRAB-WINDOW for the grab and _P_ the window the pointer is
          in, then :ENTER-NOTIFY and :LEAVE-NOTIFY events with mode
          :GRAB are generated (as for :NORMAL above) as if the pointer
          were to suddenly warp from its current position in _P_ to
          some position in _G_. However, the pointer does not warp, and
          the pointer position is used as both the _initial_ and _final_
          positions for the events.

          When a pointer grab deactivates (but after generating any
          actual :BUTTON-RELEASE event that deactivates the grab), with
          _G_ the GRAB-WINDOW for the grab and _P_ the window the
          pointer is in, then :ENTER-NOTIFY and :LEAVE-NOTIFY events
          with mode :UNGRAB are generated (as for :NORMAL above) as if
          the pointer were to suddenly warp from from some position in
          _G_ to its current position in _P_.  However, the pointer
          does not warp, and the current pointer position is used as
          both the _initial_ and _final_ positions for the events.

    FOCUS-P
          Type BOOLEAN.

          If _event-window_ is the focus window or an inferior of the
          focus window, then _focus-p_ is T; otherwise, _focus-p_ is
          NIL.

    STATE
          Type CARD16.

          A mask that gives the state of the buttons and modifier keys
          just before the event.

    TIME
          Type CARD32.

          A timestamp for the moment when the event occurred.

    ROOT
          Type WINDOW.

          The root window containing the final pointer position.

    ROOT-X
          Type INT16.

          The x coordinate of the pointer position relative to root at
          the time of the event.

    ROOT-Y
          Type INT16.

          The y coordinate of the pointer position relative to root at
          the time of the event.

    CHILD
          Type (OR NULL WINDOW).

          In a :LEAVE-NOTIFY event, if a child of the _event-window_
          contains the initial position of the pointer, the _child_
          slot is set to that child; otherwise, the _child_ slot is
          NIL. For an :ENTER-NOTIFY event, if a child of the
          _event-window_ contains the final pointer position, the
          _child_ slot is set to that child; otherwise, the _child_
          slot is NIL.

    SAME-SCREEN-P
          Type BOOLEAN.

          True if _event-window_ and root are on the same screen.



File: clx.info,  Node: Input Focus Events,  Next: Keyboard and Pointer State Events,  Prev: Keyboard and Pointer Events,  Up: Event Types

13.11.2 Input Focus Events
--------------------------

The input focus events are :FOCUS-IN and :FOCUS-OUT.

 -- Event Type: :focus-in
 -- Event Type: :focus-out
     Selected by: :FOCUS-CHANGE.

     :FOCUS-IN and :FOCUS-OUT events are generated when the input focus
     changes. All :FOCUS-OUT events caused by a window :UNMAP are
     generated after any :UNMAP-NOTIFY event, but the ordering of
     :FOCUS-OUT with respect to generated :ENTER-NOTIFY, :LEAVE-NOTIFY,
     :VISIBILITY-NOTIFY, and :EXPOSE events is not constrained.

    WINDOW
    EVENT-WINDOW
          Type WINDOW.

          For :FOCUS-IN, the new input focus window. For :FOCUS-OUT,
          the previous input focus window.

    MODE
          Type `(member :normal :while-grabbed :grab :ungrab)'.

          Events generated by SET-INPUT-FOCUS when the keyboard is not
          grabbed have mode :NORMAL. Events generated by
          SET-INPUT-FOCUS when the keyboard is grabbed have mode
          :WHILE-GRABBED. Events generated when a keyboard grab
          activates have mode :GRAB, and events generated when a
          keyboard grab deactivates have mode :UNGRAB.

    KIND
          Type (MEMBER :ANCESTOR :VIRTUAL :INFERIOR :NONLINEAR
          :NONLINEAR-VIRTUAL :POINTER :POINTER-ROOT :NONE).

          When the focus moves from window A to window B, and A is an
          inferior of B, with the pointer in window P:
             * :FOCUS-OUT with _kind_ :ANCESTOR is generated on A

             * :FOCUS-OUT with _kind_ :VIRTUAL is generated on each
               window between A and B exclusive (in that order)

             * :FOCUS-IN with _kind_ :INFERIOR is generated on B

             * If P is an inferior of B, but P is not A or an inferior
               of A or an ancestor of A, :FOCUS-IN with _kind_ :POINTER
               is generated on each window below B down to and
               including P (in order)

          When the focus moves from window A to window B, and B is an
          inferior of A, with the pointer in window P:
             * If P is an inferior of A, but P is not A or an inferior
               of B or an ancestor of B, :FOCUS-OUT with _kind_
               :POINTER is generated on each window from P up to but
               not including A (in order)

             * :FOCUS-OUT with _kind_ :INFERIOR is generated on A

             * :FOCUS-IN with _kind_ :VIRTUAL is generated on each
               window between A and B exclusive (in that order)

             * :FOCUS-IN with _kind_ :ANCESTOR is generated on B

          When the focus moves from window A to window B, with window C
          being their least common ancestor, and with the pointer in
          window P:
             * If P is an inferior of A, :FOCUS-OUT with _kind_
               :POINTER is generated on each window from P up to but
               not including A (in order)

             * :FOCUS-OUT with _kind_ :NONLINEAR is generated on A

             * :FOCUS-OUT with _kind_ :NONLINEAR-VIRTUAL is generated
               on each window between A and C exclusive (in that order)

             * :FOCUS-IN with _kind_ :NONLINEAR-VIRTUAL is generated on
               each window between C and B exclusive (in that order)

             * :focus-in with _kind_ :NONLINEAR is generated on B

             * If P is an inferior of B, :FOCUS-IN with _kind_ :POINTER
               is generated on each window below B down to and
               including P (in order)

          When the focus moves from window A to window B, on different
          screens, with the pointer in window P:
             * If P is an inferior of A, :FOCUS-OUT with _kind_
               :POINTER is generated on each window from P up to but
               not including A (in order)

             * :FOCUS-OUT with _kind_ :NONLINEAR is generated on A

             * If A is not a root window, :FOCUS-OUT with _kind_
               :NONLINEAR-VIRTUAL is generated on each window above A
               up to and including its root (in order)

             * If B is not a root window, :FOCUS-IN with _kind_
               :NONLINEAR-VIRTUAL is generated on each window from B's
               root down to but not including B (in order)

             * :FOCUS-IN with _kind_ :NONLINEAR is generated on B

             * If P is an inferior of B, :FOCUS-IN with _kind_ :POINTER
               is generated on each window below B down to and
               including P (in order)

          When the focus moves from window A to :POINTER-ROOT (or
          :NONE), with the pointer in window P:
             * If P is an inferior of A, :FOCUS-OUT with _kind_
               :POINTER is generated on each window from P up to but
               not including A (in order)

             * :FOCUS-OUT with _kind_ :NONLINEAR is generated on A

             * If A is not a root window, :FOCUS-OUT with _kind_
               :NONLINEAR-VIRTUAL is generated on each window above A
               up to and including its root (in order)

             * :FOCUS-IN with _kind_ :POINTER-ROOT (or :NONE) is
               generated on all root windows

             * If the new focus is :POINTER-ROOT, :FOCUS-IN with _kind_
               :POINTER is generated on each window from P's root down
               to and including P (in order)

          When the focus moves from :POINTER-ROOT (or :NONE) to window
          A, with the pointer in window P:
             * If the old focus is :POINTER-ROOT, :FOCUS-OUT with
               _kind_ :POINTER is generated on each window from P up to
               and including P's root (in order)

             * :FOCUS-OUT with _kind_ :POINTER-ROOT (or :NONE) is
               generated on all root windows

             * If A is not a root window, :FOCUS-IN with _kind_
               :NONLINEAR-VIRTUAL is generated on each window from A's
               root down to but not including A (in order)

             * :FOCUS-IN with _kind_ :NONLINEAR is generated on A

             * If P is an inferior of A, :FOCUS-IN with _kind_ :POINTER
               is generated on each window below A down to and
               including P (in order)

          When the focus moves from :POINTER-ROOT to :NONE (or vice
          versa), with the pointer in window P:
             * If the old focus is :POINTER-ROOT, :FOCUS-OUT with
               _kind_ :POINTER is generated on each window from P up to
               and including P's root (in order)

             * :FOCUS-OUT with _kind_ :POINTER-ROOT (or :NONE) is
               generated on all root windows

             * :FOCUS-IN with _kind_ :NONE (or :POINTER-ROOT) is
               generated on all root windows

             * If the new focus is :POINTER-ROOT, :FOCUS-IN with _kind_
               :POINTER is generated on each window from P's root down
               to and including P (in order)

     When a keyboard grab activates (but before generating any actual
     :KEY-PRESS event that activates the grab), with _G_ the
     GRAB-WINDOW for the grab and _F_ the current focus, then :FOCUS-IN
     and :FOCUS-OUT events with mode :GRAB are generated (as for
     :NORMAL above) as if the focus were to change from _F_ to _G_.

     When a keyboard grab deactivates (but after generating any actual
     :KEY-RELEASE event that deactivates the grab), with _G_ the
     GRAB-WINDOW for the grab and _F_ the current focus, then :FOCUS-IN
     and :FOCUS-OUT events with mode :UNGRAB are generated (as for
     :NORMAL above) as if the focus were to change from _G_ to _F_.


File: clx.info,  Node: Keyboard and Pointer State Events,  Next: Exposure Events,  Prev: Input Focus Events,  Up: Event Types

13.11.3 Keyboard and Pointer State Events
-----------------------------------------

The keyboard and pointer state events are :KEYMAP-NOTIFY and
:MAPPING-NOTIFY.

 -- Event Type: :keymap-notify
     Selected by: :KEYMAP-STATE.

     The :KEYMAP-NOTIFY event returns the current state of the
     keyboard. :KEYMAP-NOTIFY is generated immediately after every
     :ENTER-NOTIFY and :FOCUS-IN.

    WINDOW
    EVENT-WINDOW
          Type WINDOW.

          The window receiving an :ENTER-NOTIFY or :FOCUS-IN event.

    KEYMAP
          Type (BIT-VECTOR 256).

          A bit-vector containing the logical state of the keyboard.
          Each bit set to 1 indicates that the corresponding key is
          currently pressed. The vector is represented as 32 bytes. For
          _n_ from 0 to 7, byte _n_ (from 0) contains the bits for keys
          8_n_ to 8_n_+7, with the least significant bit in the byte
          representing key 8_n_.


 -- Event Type: :mapping-notify
     The X server reports :MAPPING-NOTIFY events to all clients. There
     is no mechanism to express disinterest in this event. The X server
     generates this event type whenever a client application calls one
     of the following:
        * SET-MODIFIER-MAPPING to indicate which keycodes to use as
          modifiers (the status reply must be :MAPPING-SUCCESS)

        * CHANGE-KEYBOARD-MAPPING to change the keyboard mapping

        * SET-POINTER-MAPPING to set the pointer mapping (the status
          reply must be :MAPPING-SUCCESS)

    REQUEST
          Type (`member :modifier :keyboard :pointer').

          Indicates the kind of change that occurred-:MODIFIER for a
          successful SET-MODIFIER-MAPPING, :KEYBOARD for a successful
          CHANGE-KEYBOARD-MAPPING, and :POINTER for a successful
          SET-POINTER-MAPPING.

    START
          Type CARD8.

          If request is :KEYBOARD, then _start_ and _count_ indicate
          the range of altered keycodes.

    COUNT
          Type CARD8.

          If request is :KEYBOARD, then _start_ and _count_ indicate
          the range of altered keycodes.


File: clx.info,  Node: Exposure Events,  Next: Window State Events,  Prev: Keyboard and Pointer State Events,  Up: Event Types

13.11.4 Exposure Events
-----------------------

The X server cannot guarantee that a window's content is preserved when
the window is obscured or reconfigured. X requires client applications
to be capable of restoring the contents of a previously-invisible window
region whenever it is exposed.  Therefore, the X server sends events
describing the exposed window and its exposed region. For a simple
window, a client can choose to redraw the entire content whenever any
region is exposed. For a complex window, a client can redraw only the
exposed region.

 -- Event Type: :exposure
     Selected by: :EXPOSURE.

     An :EXPOSURE event is sent when redisplay is needed for a window
     region whose content has been lost. Redisplay is needed when one
     of the following occurs:
        * A region is exposed for a window and the X server has no
          backing store for the region

        * A region of a viewable window is obscured and the X server
          begins to honor the window's backing-store attribute of
          :ALWAYS or :WHEN-MAPPED

        * The X server begins to honor an unviewable window's
          backing-store attribute of :ALWAYS or :WHEN-MAPPED.

     The regions needing redisplay are decomposed into an arbitrary set
     of rectangles, and an :EXPOSURE event is generated for each
     rectangle. For a given action causing :EXPOSURE events, the set of
     events for a given window are guaranteed to be reported
     contiguously.

     :EXPOSURE events are never generated for :INPUT-ONLY windows.

     All :EXPOSURE events caused by a hierarchy change are generated
     after any hierarchy event (:UNMAP-NOTIFY, :MAP-NOTIFY,
     :CONFIGURE-NOTIFY,:GRAVITY-NOTIFY, or :CIRCULATE-NOTIFY) caused by
     that change. All :EXPOSURE events on a given window are generated
     after any :VISIBILITY-NOTIFY event on that window, but it is not
     required that all :EXPOSURE events on all windows be generated
     after all visibility events on all windows. The ordering of
     :EXPOSURE events with respect to :FOCUS-OUT, :ENTER-NOTIFY, and
     :LEAVE-NOTIFY events is not constrained.

    WINDOW
    EVENT-WINDOW
          Type WINDOW.

          The window needing redisplay.

    X
          Type CARD16.

          The position of the left edge of the region to redisplay,
          relative to the _event-window_.

    Y
          Type CARD16.

          The position of the top edge of the region to redisplay,
          relative to the _event-window_.

    WIDTH
          Type CARD16.

          The width of the region to redisplay.

    HEIGHT
          Type CARD16.

          The height of the region to redisplay.

    COUNT
          Type CARD16.

          If count is zero, then no more :EXPOSURE events for this
          window follow. If count is nonzero, then at least that many
          more :EXPOSURE events for this window follow (and possibly
          more).


 -- Event Type: :graphics-exposure
     A :GRAPHICS-EXPOSURE event is generated by a call to COPY-AREA or
     COPY-PLANE when the exposures attribute of the graphics context is
     :ON. A :GRAPHICS-EXPOSURE event reports a destination region whose
     content cannot be computed because the content of the
     corresponding source region has been lost. For example, the
     missing source region may be obscured or may lie outside the
     current source drawable size. For a given action causing
     :GRAPHICS-EXPOSURE events, the set of events for a given
     destination are guaranteed to be reported contiguously.

    DRAWABLE
    EVENT-WINDOW
          Type DRAWABLE.

          The destination drawable for the COPY-AREA or COPY-PLANE
          function.

    X
          Type CARD16.

          The position of the left edge of the destination region,
          relative to the _drawable_.

    Y
          Type CARD16.

          The position of the top edge of the destination region,
          relative to the _drawable_.

    WIDTH
          Type CARD16.

          The width of the destination region.

    HEIGHT
          Type CARD16.

          The height of the destination region.

    COUNT
          Type CARD16.

          If count is zero then no more :GRAPHICS-EXPOSURE events for
          the _drawable_ follow. If count is nonzero then at least that
          many more :GRAPHICS-EXPOSURE events for the _drawable_ follow
          (and possibly more).

    MAJOR
          Type CARD8.

          The major opcode for the graphics request generating the event
          (62 for COPY-AREA, 63 for COPY-PLANE).

    MINOR
          Type CARD16.

          The minor opcode for the graphics request generating the event
          (0 for both COPY-AREA and COPY-PLANE).


 -- Event Type: :no-exposure
     A :NO-EXPOSURE event is generated by a call to COPY-AREA or
     COPY-PLANE when the exposures attribute of the graphics context is
     :ON. If no :GRAPHICS-EXPOSURE events are generated, then a single
     :NO-EXPOSURE event is sent.

    DRAWABLE
    EVENT-WINDOW
          Type DRAWABLE.

          The destination drawable for the COPY-AREA or COPY-PLANE
          function.

    MAJOR
          Type CARD8.

          The major opcode for the graphics request generating the event
          (62 for COPY-AREA, 63 for COPY-PLANE).

    MINOR
          Type CARD16.

          The minor opcode for the graphics request generating the event
          (0 for both COPY-AREA and COPY-PLANE).



File: clx.info,  Node: Window State Events,  Next: Structure Control Events,  Prev: Exposure Events,  Up: Event Types

13.11.5 Window State Events
---------------------------

The following paragraphs describe the events that can be received when a
window becomes:
   * Created

   * Destroyed

   * Invisible

   * Mapped

   * Moved

   * Reparented

   * Resized

   * Restacked

   * Unmapped

   * Visible

 -- Event Type: :circulate-notify
     Selected by: :STRUCTURE-NOTIFY on a window or :SUBSTRUCTURE-NOTIFY
     on its parent.

     A :CIRCULATE-NOTIFY event is generated whenever a window is
     actually restacked as a result of a client application calling
     CIRCULATE-WINDOW-UP or CIRCULATE-WINDOW-DOWN.

    EVENT-WINDOW
          Type WINDOW.

          The window receiving the event.

    WINDOW
          Type WINDOW.

          The window that was restacked.

    PLACE
          Type (MEMBER :TOP :BOTTOM).

          If place is :TOP, the _window_ is now on top of all siblings.
          Otherwise, it is below all siblings.


 -- Event Type: :configure-notify
     Selected by: :STRUCTURE-NOTIFY on a window or :SUBSTRUCTURE-NOTIFY
     on its parent.

     The :CONFIGURE-NOTIFY event is generated when the position or size
     of a window actually changes as a result of a client application
     setting its _x_, _y_, _width_, _height_, or _border-width_
     attributes.

    EVENT-WINDOW
          Type WINDOW.

          The window receiving the event.

    WINDOW
          Type WINDOW.

          The window that was moved or resized.

    X
          Type INT16.

          _x_ and _y_ specify the new upper-left corner position of the
          _window_ relative to its parent.

    Y
          Type INT16.

          _x_ and _y_ specify the new upper-left corner position of the
          _window_ relative to its parent.

    WIDTH
          Type CARD16.

          _width_ and _height_ specify the new size of the _window_
          interior.

    HEIGHT
          Type CARD16.

          _width_ and _height_ specify the new size of the _window_
          interior.

    BORDER-WIDTH
          Type CARD16.

          The new _window_ border width.

    ABOVE-SIBLING
          Type (OR NULL WINDOW).

          The sibling immediately below the _window_. If above-sibling
          is NIL, then the _window_ is below all of its siblings.

    OVERRIDE-REDIRECT-P
          Type BOOLEAN.

          _override-redirect-p_ is true if the override-redirect
          attribute of the _window_ is :ON; otherwise, it is NIL. See
          WINDOW-OVERRIDE-REDIRECT in *note Window Attributes::.

     The X server can report :CREATE-NOTIFY events to clients wanting
     information about creation of windows. The X server generates this
     event whenever a client application creates a window by calling
     CREATE-WINDOW.

     To receive this event type in a client application, you `setf' the
     :SUBSTRUCTURE-NOTIFY as the event-mask in the parent window's
     event-mask slot.


 -- Event Type: :create-notify
     Selected by: :SUBSTRUCTURE-NOTIFY.

     The :CREATE-NOTIFY event is generated when a _window_ is created
     and is sent to the _parent_ window.

    PARENT
    EVENT-WINDOW
          Type WINDOW.

          The parent window receiving the event.

    WINDOW
          Type WINDOW.

          The new window created.

    X
          Type INT16.

          _x_ and _y_ specify the initial upper-left corner position of
          the _window_ relative to the parent.

    Y
          Type INT16.

          _x_ and _y_ specify the initial upper-left corner position of
          the _window_ relative to the parent.

    WIDTH
          Type CARD16.

          _width_ and _height_ specify the initial size of the _window_
          interior.

    HEIGHT
          Type CARD16.

          _width_ and _height_ specify the initial size of the _window_
          interior.

    BORDER-WIDTH
          Type CARD16.

          The initial _window_ border width.

    OVERRIDE-REDIRECT-P
          Type BOOLEAN.

          _override-redirect-p_ is true if the override-redirect
          attribute of the _window_ is :ON; otherwise, it is NIL. See
          WINDOW-OVERRIDE-REDIRECT in *note Window Attributes::.



 -- Event Type: :destroy-notify
     Selected by: :STRUCTURE-NOTIFY on a window or :SUBSTRUCTURE-NOTIFY
     on its parent.

     The :DESTROY-NOTIFY event is generated when a _window_ is
     destroyed. The ordering of the :DESTROY-NOTIFY events is such that
     for any given window, :DESTROY-NOTIFY is generated on all
     inferiors of a window before :DESTROY-NOTIFY is generated on the
     _window_. The ordering among siblings and across subhierarchies is
     not otherwise constrained.

    EVENT-WINDOW
          Type WINDOW.

          The window receiving the event.

    WINDOW
          Type WINDOW.

          The window that was destroyed.


 -- Event Type: :gravity-notify
     Selected by: :STRUCTURE-NOTIFY on a window or :SUBSTRUCTURE-NOTIFY
     on its parent.

     The X server can report :GRAVITY-NOTIFY events to clients wanting
     information about when a _window_ is moved because of a change in
     the size of its parent. The X server generates this event whenever
     a client application actually moves a child window as a result of
     resizing its parent by calling WITH-STATE with the appropriate
     arguments set.

    EVENT-WINDOW
          Type WINDOW.

          The window receiving the event.

    WINDOW
          Type WINDOW.

          The window that was moved.

    X
          Type INT16.

          x and y specify the new upper-left corner position of the
          _window_ relative to its parent.

    Y
          Type INT16.

          x and y specify the new upper-left corner position of the
          _window_ relative to its parent.


 -- Event Type: :map-notify
     Selected by: :STRUCTURE-NOTIFY on a window or :SUBSTRUCTURE-NOTIFY
     on its parent.

     The X server can report :MAP-NOTIFY events to clients wanting
     information about which windows are mapped. The X server generates
     this event type whenever a client application changes the
     _window_'s state from unmapped to mapped by calling MAP-WINDOW or
     MAP-SUBWINDOW.

     To receive this event type, you SETF :STRUCTURE-NOTIFY as the
     event-mask on the _window_'s EVENT-MASK slot. You can also receive
     this event type by `setf'ing the :SUBSTRUCTURE-NOTIFY event-mask
     on the parent window.

    EVENT-WINDOW
          Type WINDOW.

          The window receiving the event.

    WINDOW
          Type WINDOW.

          The window that was mapped.

    OVERRIDE-REDIRECT-P
          Type BOOLEAN.

          _override-redirect-p_ is true if the override-redirect
          attribute of the _window_ is :ON; otherwise, it is NIL. See
          WINDOW-OVERRIDE-REDIRECT in *note Window Attributes::.


 -- Event Type: :reparent-notify
     Selected by: :STRUCTURE-NOTIFY on a window or :SUBSTRUCTURE-NOTIFY
     on its old or new parent.

     The :REPARENT-NOTIFY event is generated when a _window_ is
     reparented.

    EVENT-WINDOW
          Type WINDOW.

          The window receiving the event.

    WINDOW
          Type WINDOW.

          The window that was reparented.

    PARENT
          Type WINDOW.

          The new parent of the _window_.

    X
          Type INT16.

          x and y specify the upper-left corner position of the
          _window_ relative to its new _parent_.

    Y
          Type INT16.

          x and y specify the upper-left corner position of the
          _window_ relative to its new _parent_.

    OVERRIDE-REDIRECT-P
          Type BOOLEAN.

          _override-redirect-p_ is true if the override-redirect
          attribute of the _window_ is :ON; otherwise, it is NIL. See
          WINDOW-OVERRIDE-REDIRECT in *note Window Attributes::.


 -- Event Type: :unmap-notify
     Selected by: :STRUCTURE-NOTIFY on a window or :SUBSTRUCTURE-NOTIFY
     on its parent.

     The :UNMAP-NOTIFY event is generated when a mapped _window_ is
     unmapped.

    EVENT-WINDOW
          Type WINDOW.

          The window receiving the event.

    WINDOW
          Type WINDOW.

          The window that was unmapped.

    CONFIGURE-P
          Type BOOLEAN.

          _configure-p_ is true if the _window_ has a win-gravity
          attribute of :UNMAP, and the event was generated because
          _window_'s parent was resized.


 -- Event Type: :visibility-notify
     Selected by: :VISIBILITY-CHANGE.

     The :VISIBILITY-NOTIFY event is sent when the visibility of a
     _window_ changes.  :VISIBILITY-NOTIFY events are never generated
     on :INPUT-ONLY windows. For the purposes of this event, the
     visibility of the _window_ is not affected by its subwindows.

     All :VISIBILITY-NOTIFY events caused by a hierarchy change are
     generated after any hierarchy event caused by that change (for
     example, :UNMAP-NOTIFY, :MAP-NOTIFY, :CONFIGURE-NOTIFY,
     :GRAVITY-NOTIFY, or :CIRCULATE-NOTIFY). Any :VISIBILITY-NOTIFY
     event on a given window is generated before any :EXPOSURE events
     on that window, but it is not required that all :VISIBILITY-NOTIFY
     events on all windows be generated before all :EXPOSURE events on
     all windows. The ordering of :VISIBILITY-NOTIFY events with
     respect to :FOCUS-OUT, :ENTER-NOTIFY, and :LEAVE-NOTIFY events is
     not constrained.

    WINDOW
    EVENT-WINDOW
          Type WINDOW.

          The window that changed in visibility.

    STATE
          Type (MEMBER :UNOBSCURED :PARTIALLY-OBSCURED :FULLY-OBSCURED).

          When the _window_ was either unviewable or it was viewable
          and at least partially obscured, and the _window_ changed to
          viewable and completely unobscured, then _state_ is
          :UNOBSCURED.

          When the _window_ was either unviewable or it was viewable
          and completely obscured, and the _window_ changed to viewable
          and partially obscured, then _state_ is :PARTIALLY-OBSCURED.

          When the _window_ was either unviewable or it was at least
          partially visible, and the _window_ changed to viewable and
          completely obscured, then _state_ is :FULLY-OBSCURED.



File: clx.info,  Node: Structure Control Events,  Next: Client Communications Events,  Prev: Window State Events,  Up: Event Types

13.11.6 Structure Control Events
--------------------------------

The following paragraphs describe events used to _redirect_ client
requests that reconfigure, restack, or map a window. Structure control
events are typically used only by window managers and not by ordinary
client applications. Structure control events report redirected
requests, allowing a window manager to modify the requests before they
are actually performed. However, if the override-redirect attribute of
a window is :ON, then no requests are redirected and no structure
control events are generated.

 -- Event Type: :circulate-request
     The :CIRCULATE-REQUEST event is generated when a client
     application calls CIRCULATE-WINDOW-UP or CIRCULATE-WINDOW-DOWN
     with a window that has the override-redirect attribute :OFF. The
     _window_ argument specifies the window to be restacked, and
     _place_ specifies what the new position in the stacking order
     should be (either :TOP or :BOTTOM).

     Selected by: :SUBSTRUCTURE-REDIRECT on _parent_.

    PARENT
    EVENT-WINDOW
          Type WINDOW.

          The window receiving the event. The receiving client must
          have selected :SUBSTRUCTURE-REDIRECT on this window.

    WINDOW
          Type WINDOW.

          The window to be restacked.

    PLACE
          Type `(member :top :bottom)'.

          The new stacking priority requested for _window_.


 -- Event Type: :colormap-notify
     Selected by: :COLORMAP-CHANGE.

     The :COLORMAP-NOTIFY event is generated with _new-p_ T when the
     _colormap_ associated with a _window_ is changed, installed, or
     uninstalled.

    WINDOW
    EVENT-WINDOW
          Type WINDOW.

          The window receiving the event.

    COLORMAP
          Type `(or null colormap)'.

          The colormap attribute of the window.

    NEW-P
          Type BOOLEAN.

          If _new-p_ is true, then the _window_'s colormap attribute
          has changed to the given _colormap_. Otherwise, the
          _window_'s colormap attribute has not, but the _colormap_ has
          been installed or uninstalled.

    INSTALLED-P
          Type BOOLEAN.

          If _installed-p_ is true, then the _colormap_ is currently
          installed.


 -- Event Type: :configure-request
     Selected by::SUBSTRUCTURE-REDIRECT on parent.

     The :CONFIGURE-REQUEST event is generated when a client program
     sets the _x_, _y_, _width_, _heigh_t, _border-width_ or stacking
     priority attributes of a window that has the override-redirect
     attribute :OFF.

    PARENT
    EVENT-WINDOW
          Type WINDOW.

          The window receiving the event. The receiving client must
          have selected :SUBSTRUCTURE-REDIRECT on this window.

    WINDOW
          Type WINDOW.

          The window to be reconfigured.

    X
          Type INT16.

          _x_ and _y_ specify the requested upper-left corner position
          of the _window_ relative to the parent. If either _x_ or _y_
          is not specified in the value-mask, then it is set to the
          current window position.

    Y
          Type INT16.

          _x_ and _y_ specify the requested upper-left corner position
          of the _window_ relative to the _parent_. If either _x_ or
          _y_ is not specified in the _value-mask_, then it is set to
          the current window position.

    WIDTH
    HEIGHT
          Type CARD16.

          _width_ and _height_ specify the requested size of the
          _window_ interior. If either _width_ or _height_ is not
          specified in the _value-mask_, then it is set to the current
          window size.

    BORDER-WIDTH
          Type CARD16

          The requested _window_ border width. If _border-width_ is not
          specified in the _value-mask_, then it is set to the current
          window _border-width_.

    STACK-MODE
          Type `(member :above :below :top-if :bottom-if :opposite)'.

          _stack-mode_ and _above-sibling_ specify the requested
          stacking priority of the _window_. If _stack-mode_ is not
          specified in the _value-mask_, then it is set to :ABOVE.

    ABOVE-SIBLING
          Type (OR NULL WINDOW).

          _stack-mode_ and _above-sibling_ specify the requested
          stacking priority of the _window_. If _above-sibling_ is not
          specified in the _value-mask_, then it is set to NIL.

    VALUE-MASK
          Type MASK16.

          Specifies the changed _window_ attributes contained in the
          redirected client request. Each 1 bit specifies that the
          corresponding attribute was changed.


 -- Event Type: :map-request
     Selected by: :SUBSTRUCTURE-REDIRECT on parent.

     The :MAP-REQUEST event is generated when a client application maps
     a _window_ that has the override-redirect attribute :OFF.

    PARENT
    EVENT-WINDOW
          Type WINDOW.

          The window receiving the event. The receiving client must
          have selected :SUBSTRUCTURE-REDIRECT on this window.

    WINDOW
          Type WINDOW.

          The window to be mapped.


 -- Event Type: :resize-request
     Selected by: :RESIZE-REDIRECT.

     The :RESIZE-REQUEST event is generated when a client program sets
     the _width_ or _height_ attributes of a _window_ that has the
     override-redirect attribute :OFF.

    WINDOW
    EVENT-WINDOW
          Type WINDOW.

          The window to be resized.

    WIDTH
    HEIGHT
          Type CARD16.

          _width_ and _height_ specify the requested size of the
          wi_ndow_ interior. If either _width_ or _height_ was
          unchanged in the client request, then it is set to the current
          window size.



File: clx.info,  Node: Client Communications Events,  Next: Declaring Event Types,  Prev: Structure Control Events,  Up: Event Types

13.11.7 Client Communications Events
------------------------------------

The client communications events discussed in the following paragraphs
are: :CLIENT-MESSAGE, :PROPERTY-NOTIFY, :SELECTION-CLEAR,
:SELECTION-REQUEST, and :SELECTION-NOTIFY.

 -- Event Type: :client-message
     The :CLIENT-MESSAGE event is generated exclusively by client calls
     to SEND-EVENT. The X server places no interpretation on the _type_
     or content of _data_ sent in a :CLIENT-MESSAGE. A client can
     neither select :CLIENT-MESSAGE events nor avoid receiving them.

    WINDOW
    EVENT-WINDOW
          Type WINDOW.

          The window receiving the event.

    TYPE
          Type KEYWORD.

          An xatom keyword that specifies the type of client message.
          Interpretation of the type is determined solely by agreement
          between the sending and receiving clients.

    FORMAT
          Type (MEMBER 8 16 32).

          An integer that specifies whether _data_ should be viewed as
          a sequence of 8-bit, 16-bit, or 32-bit quantities.

    DATA
          Type `(sequence integer)'.

          The data content of the client message. _data_ always
          consists of 160 bytes - depending on format, either 20 8-bit
          values, 10 16-bit values or 5 32-bit values.  The amount of
          this data actually used by a particular client message
          depends on the type.


 -- Event Type: :property-notify
     Selected by: :PROPERTY-CHANGE.

     The :PROPERTY-NOTIFY event is generated when a window property is
     changed or deleted.

    WINDOW
    EVENT-WINDOW
          Type WINDOW.

          The window receiving the event.

    ATOM
          Type KEYWORD.

          The property that was changed or deleted.

    STATE
          Type `(member :new-value :deleted)'.

          _state_ is :NEW-VALUE if the property was changed using
          CHANGE-PROPERTY or ROTATE-PROPERTIES, even if zero-length
          data was added or if all or part of the property was replaced
          with identical data. _state_ is :DELETED if the property was
          deleted using DELETE-PROPERTY or GET-PROPERTY.

    TIME
          Type TIMESTAMP.

          The server time when the property was changed or deleted.


 -- Event Type: :selection-clear
     The :SELECTION-CLEAR event is reported to the previous owner of a
     _selection_ when the owner of the _selection_ is changed. The
     selection owner is changed by a client using `setf'.  A client can
     neither select :SELECTION-CLEAR events nor avoid receiving them.
    WINDOW
    EVENT-WINDOW
          Type WINDOW.

          The window losing ownership of the _selection_.

    SELECTION
          Type KEYWORD.

          The name of the selection.

    TIME
          Type TIMESTAMP.

          The last-change time recorded for the _selection_.


 -- Event Type: :selection-notify
     The :SELECTION-NOTIFY event is sent to a client calling
     CONVERT-SELECTION.  :SELECTION-NOTIFY reports the result of the
     client request to return the current value of a _selection_ into a
     particular form. :SELECTION-NOTIFY is sent using SEND-EVENT by the
     owner of the selection or (if no owner exists) by the X server. A
     client can neither select :SELECTION-NOTIFY events nor avoid
     receiving them.

     NOTE: Standard conventions for inter-client communication require
     the following additional steps in processing a :SELECTION-NOTIFY
     event:

       1. The client receiving this event should call GET-PROPERTY to
          return the converted selection value.

       2. After receiving the selection value, the property should then
          be deleted (either by using the :DELETE-P argument to
          GET-PROPERTY or by calling DELETE-PROPERTY).

    WINDOW
    EVENT-WINDOW
          Type WINDOW.

          The requestor window given in the call to CONVERT-SELECTION.

    SELECTION
          Type KEYWORD.

          The selection to be converted.

    TARGET
          Type KEYWORD.

          An XATOM specifying the type of the converted selection
          value. This is the same target type given in the call to
          CONVERT-SELECTION.

    PROPERTY
          Type `(or null keyword)'.

          The window property containing the converted selection. If
          the property is NIL, then either the _selection_ has no owner
          or the owner could not perform the conversion to the _target_
          type.

    TIME
          Type TIMESTAMP.

          The timestamp from the client call to CONVERT-SELECTION.


 -- Event Type: :selection-request
     The :SELECTION-REQUEST event is reported to the owner of a
     selection when a client calls CONVERT-SELECTION. This event
     requests the selection owner to convert the current value of a
     _selection_ into a specified form and to return it to the
     requestor. A client can neither select :SELECTION-REQUEST events
     nor avoid receiving them.

     The selection owner should respond to a :SELECTION-REQUEST event
     by performing the following steps:

       1. Convert the current _selection_ value to the _target_ type.

       2. Store the converted selection value in the _property_. If
          _property_ is NIL, then the owner should choose the
          _property_.

       3. Call SEND-EVENT to send a :SELECTION-NOTIFY event to the
          _requestor_ containing the _property_ with the converted
          value. If the _selection_ could not be converted to the
          _target_ type, then a NIL _property_ should be sent. The
          :SELECTION, :TARGET, and :TIME arguments to SEND-EVENT should
          be the same as those received in the :SELECTION-REQUEST
          event. The event-mask argument to SEND-EVENT should be NIL;
          that is, the :SELECTION-NOTIFY event should be sent to client
          that created the _requestor_.

     NOTE: Standard conventions for inter-client communication require
     the following additional steps in processing a :SELECTION-REQUEST
     event:

       1. The property used to store the selection value must belong to
          the requestor.

       2. If the property is NIL, the target type ATOM should be used
          as the property name.

       3. If the window did not actually own the selection at the given
          time, the request should be refused, just as if it could not
          be converted to the target type.

    WINDOW
    EVENT-WINDOW
          Type WINDOW.

          The selection owner receiving the event.

    REQUESTOR
          Type WINDOW.

          The window requesting the converted _selection_.

    SELECTION
          Type KEYWORD.

          The selection to be converted.

    TARGET
          Type KEYWORD.

          An XATOM specifying the type of the converted _selection_
          value.

    PROPERTY
          Type `(or null keyword)'.

          A requestor window property.

    TIME
          Type TIMESTAMP.

          The timestamp sent in the client CONVERT-SELECTION request.



File: clx.info,  Node: Declaring Event Types,  Prev: Client Communications Events,  Up: Event Types

13.11.8 Declaring Event Types
-----------------------------

CLX uses the DECLARE-EVENT macro to define the event slot symbols that
access the contents of X events. Most client applications do not need
to use DECLARE-EVENT because the declarations for all core X events are
already defined by CLX.  Programmers using extensions to the X protocol
can use DECLARE-EVENT to allow CLX to handle new event types returned
by an extended X server.

 -- Macro: declare-event event-codes &rest slot-declarations
     Defines a mapping between event slot symbols and the data items in
     event messages received from an X server.

     The _event-codes_ argument gives the event type keyword for the
     event described. If several event types share the same slots, then
     _event-codes_ can be a list of event type keywords.
     _slot-declarations_ is a list containing an element for each event
     data item. The order of _slot-declarations_ corresponds to the
     order of event data items defined by the X protocol.

     Each element of _slot-declarations_ is a list of the form (_type
     slot-name_*), where _type_ is a Common Lisp type specifier and
     _slot-name_ is a slot name symbol. The effect of such a list is to
     declare that the next data items in the event have the given data
     _type_ and are associated with the given _slot-name_ symbols.
     _slot-name_ can also be a list of slot name symbols; in this case,
     each symbol in the list is an alias that refers to the same event
     data item.

    EVENT-CODES
          An event type keyword or a list of event type keywords.

    SLOT-DECLARATIONS
          A list of clauses defining event slot symbols.



File: clx.info,  Node: Releasing Queued Events,  Prev: Event Types,  Up: Events and Input

13.12 Releasing Queued Events
=============================

A client grabbing the keyboard or pointer can freeze the reporting of
events on that device. When an input device is thus frozen, the server
queues events until explicitly requested to release them by the grabbing
client. CLX programs can use the ALLOW-EVENTS function to release
queued events from a frozen input device.

 -- Function: allow-events display mode &optional time
    DISPLAY
          A DISPLAY.

    MODE
          One of: :ASYNC-POINTER, :SYNC-POINTER, :REPLY-POINTER,
          :ASYNC-KEYBOARD, :SYNC-KEYBOARD, :REPLAY-KEYBOARD,
          :ASYNC-BOTH, :SYNC-BOTH.

    TIME
          A TIMESTAMP.

     Releases some queued events if the client has caused a device to
     freeze. The request has no effect if the _time_ is earlier than
     the last-grab time of the most recent active grab for the client,
     or if the _time_ is later than the current server time. If _time_
     is NIL, the current server time is used. The effect of this
     function depends on the specified _mode_.
        * :ASYNC-POINTER - If the pointer is frozen by the client,
          pointer event processing continues normally. If the pointer is
          frozen twice by the client on behalf of two separate grabs,
          :ASYNC-POINTER releases events for both grab_s_.
          :ASYNC-POINTER has no effect if the pointer is not frozen by
          the client, but the pointer need not be grabbed by the client.

        * :SYNC-POINTER - If the pointer is frozen and actively grabbed
          by the client, pointer event processing continues normally
          until the next :BUTTON-PRESS or :BUTTON-RELEASE event is
          reported to the client, at which time the pointer again
          appears to freeze. However, if the reported event causes the
          pointer grab to be released, the pointer does not freeze.
          :SYNC-POINTER has no effect if the pointer is not frozen by
          the client, or if the pointer is not grabbed by the client.

        * :REPLAY-POINTER - If the pointer is actively grabbed by the
          client and is frozen as the result of an event having been
          sent to the client (either from the activation of a
          GRAB-BUTTON, or from a previous ALLOW-EVENTS with mode
          :SYNC-POINTER, but not from a GRAB-POINTER), the pointer grab
          is released and that event is completely reprocessed, but
          this time ignoring any passive grabs at or above (towards the
          root) the GRAB-WINDOW of the grab just released. The request
          has no effect if the pointer is not grabbed by the client, or
          if the pointer is not frozen as the result of an event.

        * :ASYNC-KEYBOARD - If the keyboard is frozen by the client,
          keyboard event processing continues normally. If the keyboard
          is frozen twice by the client on behalf of two separate grabs,
          :ASYNC-KEYBOARD releases events for both grabs.
          :ASYNC-KEYBOARD has no effect if the keyboard is not frozen
          by the client, but the keyboard need not be grabbed by the
          client.

        * :SYNC-KEYBOARD - If the keyboard is frozen and actively
          grabbed by the client, keyboard event processing continues
          normally until the next :KEY-PRESS or :KEY-RELEASE event is
          reported to the client, at which time the keyboard again
          appears to freeze. However if the reported event causes the
          keyboard grab to be released, the keyboard does not freeze.
          :SYNC-KEYBOARD has no effect if the keyboard is not frozen by
          the client, or if the keyboard is not grabbed by the client.

        * :REPLAY-KEYBOARD - If the keyboard is actively grabbed by the
          client and is frozen as the result of an event having been
          sent to the client (either from the activation of a grab-key,
          or from a previous ALLOW-EVENTS with mode :SYNC-KEYBOARD, but
          not from a GRAB-KEYBOARD), the keyboard grab is released and
          that event is completely reprocessed, but this time ignoring
          any passive grabs at or above (towards the root) the
          GRAB-WINDOW of the grab just released. The request has no
          effect if the keyboard is not grabbed by the client, or if
          the keyboard is not frozen as the result of an event.

        * :SYNC-BOTH - If both pointer and keyboard are frozen by the
          client, event processing (for both devices) continues normally
          until the next :BUTTON-PRESS, :BUTTON-RELEASE, :KEY-PRESS, or
          :KEY-RELEASE event is reported to the client for a grabbed
          device (button event for the pointer, key event for the
          keyboard). At this time, the devices again appear to freeze.
          If the reported event causes the grab to be released, the
          devices do not freeze. However, if the other device is still
          grabbed, then a subsequent event for it will still cause both
          devices to freeze. :SYNC-BOTH has no effect unless both
          pointer and keyboard are frozen by the client. If the pointer
          of keyboard is frozen twice by the client on behalf of two
          separate grabs, :SYNC-BOTH _thaws_ for both, but a subsequent
          freeze for :SYNC-BOTH will only freeze each device once.

        * :ASYNC-BOTH - If the pointer and the keyboard are frozen by
          the client, event processing for both devices continues
          normally. If a device is frozen twice by the client on behalf
          of two separate grabs, :ASYNC-BOTH _thaws_ for both.
          :ASYNC-BOTH has no effect unless both pointer and keyboard
          are frozen by the client.

     :ASYNC-POINTER, :SYNC-POINTER, and :REPLAY-POINTER have no effect
     on processing of keyboard events. :ASYNC-KEYBOARD, :SYNC-KEYBOARD,
     and :REPLAY-KEYBOARD have no effect on processing of pointer
     events.

     It is possible for both a pointer grab and a keyboard grab to be
     active simultaneously by the same or different clients. When a
     device is frozen on behalf of either grab, no event processing is
     performed for the device. It is possible for a single device to be
     frozen due to both grabs. In this case, the freeze must be released
     on behalf of both grabs before events can again be processed.



File: clx.info,  Node: Resources,  Next: Control Functions,  Prev: Events and Input,  Up: Top

14 Resources
************

Users need a way to specify preferences for various user interface
values (for example, colors, fonts, title strings, and so forth).
Applications need a consistent method for determining the default
interface values that are specific to them. It is also useful if
application interface values can be modified by users without changes to
the program code. For example, this capability can make it easy to
change the color scheme of a user interface. In CLX, such interface
values are referred to as _resources_. CLX defines functions for
storing and retrieving interface resources from a resource database. A
user can store various user interface values as resources in a resource
database; a CLX application can then read these resource values and
modify its user interface accordingly.

   NOTE: The general term _resource_ refers to any application user
interface value stored in a resource database. The term _server
resource_ is used more specifically to refer to the types of objects
allocated by an X server and referenced by clients (for example,
windows, fonts, graphics contexts, and so forth).

* Menu:

* Resource Binings::
* Basic Resource Database Functions::
* Accessing Resource Values::
* Resource Database Files::


File: clx.info,  Node: Resource Binings,  Next: Basic Resource Database Functions,  Prev: Resources,  Up: Resources

14.1 Resource Binings
=====================

Conceptually, a resource database is a set of resource name-value pairs
(or _resource bindings_). The name in a resource binding is a list that
is the concatenation of a _path list_ and an _attribute name_.

   A path list is a list of symbols (or strings) that corresponds to a
path through a tree-structured hierarchy. For example, the path:

     '(top middle bottom)

   corresponds to a three-level hierarchy in which `middle' is the
child of `top', and `bottom' is the child of `middle'.

   Typically, the path of a resource name corresponds to a path in a
hierarchy of windows, and each symbol/string names a window in the
hierarchy. However, the first element of the path can also represent the
overall name of the entire program, and subsequent path elements can
refer to an application-specific hierarchy of resource names not
strictly related to windows. In addition, a resource name can contain a
partially-specified path list.  The asterisk symbol (*) is a wildcard
that can correspond to any sequence of levels in the hierarchy
(including the null sequence). For example, the path:

     '(top * bottom)

   corresponds to a hierarchy of two or more levels in which `top' is
at the top level and `bot-' `tom' is at the bottom level. An element of
a path list can be the name of an individual window or the name of a
class of windows.

   The final element of a resource name list is an attribute name. This
symbol (or string) identifies a specific attribute of the object(s)
named by the preceding path list. The attribute name can also be the
symbol * or the string "*", in which case the resource name refers to
all attributes of the path object(s). However, this form of resource
name is rarely useful.

   Some examples of resource bindings are shown below. In these
examples, assume that `mail' is the resource name of a mail reading
application. `mail' uses a window of the class `button' whose name is
`reply'.

`(mail          `'green'
screen-1 reply  
background)'    
`(mail *        `'red'
background)'    
`(* button      `'blue'
background)'    

   These resource bindings specify the following:
   * The `background' attribute resource of `mail' application_'_s
     `reply' button has the value of `green' on `screen-1'.

   * The `background' attribute for the rest of the `mail' application
     is always `red' on all screens.

   * In general, the `background' attribute for all `button' windows is
     `blue'.


File: clx.info,  Node: Basic Resource Database Functions,  Next: Accessing Resource Values,  Prev: Resource Binings,  Up: Resources

14.2 Basic Resource Database Functions
======================================

A RESOURCE-DATABASE structure is a CLX object that represents a set of
resource bindings. The following paragraphs describe the CLX functions
used to:
   * Create a resource database

   * Add a resource binding

   * Remove a resource binding

   * Merge two resource databases

   * Map a function over the contents of a resource database

 -- Function: make-resource-database
    RESOURCE-DATABASE
          Type RESOURCE-DATABASE.

     Returns an empty resource database.

 -- Function: add-resource database name-list value
    DATABASE
          The RESOURCE-DATABASE for the new resource binding.

    NAME-LIST
          A list containing strings or symbols specifying the name for
          the resource binding.

    VALUE
          The value associated with the _name-list_ in the resource
          binding. This can be an object of any type.

     Adds the resource binding specified by _name-list_ and _value_ to
     the given _database_. Only one value can be associated with the
     _name-list_ in the _database_. This function replaces any value
     previously associated with the _name-list_.


 -- Function: delete-resource database name-list
    DATABASE
          The RESOURCE-DATABASE containing the resource binding.

    NAME-LIST
          A list containing strings or symbols specifying the name for
          the deleted resource binding.

     Removes the resource binding specified by _name-list_ from the
     given _database_.


 -- Function: map-resource database function &rest args
    DATABASE
          A RESOURCE-DATABASE.

    FUNCTION
          A FUNCTION object or function symbol.

    ARGS
          A list of arguments to the _function_.

     Calls the function for each resource binding in the _database_.
     For each resource binding consisting of a _name-list_ and a
     _value_, the form (APPLY _function name-list value args_) is
     executed.


 -- Function: merge-resources from-database to-database
    FROM-DATABASE
          The RESOURCE-DATABASE from which resource bindings are read.

    TO-DATABASE
          The RESOURCE-DATABASE to which resource bindings are added.

     Merges the contents of the _from-database_ with the _to-database_.
     MAP-RESOURCE invokes ADD-RESOURCE in order to add each resource
     binding in the _from-database_ to the _to-database_. The updated
     _to-database_ is returned.

    TO-DATABASE
          Type RESOURCE-DATABASE.



File: clx.info,  Node: Accessing Resource Values,  Next: Resource Database Files,  Prev: Basic Resource Database Functions,  Up: Resources

14.3 Accessing Resource Values
==============================

The power and flexibility of resource management is the result of the
way resource values in a resource database are accessed. A resource
binding binding stored in the database generally contains only a partial
resource name consisting of a mixture of name and class identifiers and
wildcard elements (that is, *). To look up a resource value, an
application program starts with two resource name lists of the same
length containing no wildcard elements - a _complete resource name_ and
a _complete_ _resource class_. The lookup algorithm returns the value
for the resource binding whose resource name is the closest match to
the complete name and class given. The definition of _closest match_
takes into account the top-down, parent-child hierarchy of resource
names and also the distinction between individual names and class names.

* Menu:

* Complete Names and Classes::
* Matching Resource Names::
* Resource Access Functions::


File: clx.info,  Node: Complete Names and Classes,  Next: Matching Resource Names,  Prev: Accessing Resource Values,  Up: Accessing Resource Values

14.3.1 Complete Names and Classes
---------------------------------

A resource binding contains a resource name list that can contain names,
class names, or a mixture of both. A class name is a symbol or string
that represents a group of related objects. The set of names used as
class names are not specified by CLX. Instead, class names are defined
by agreement between those who use class names when creating resource
bindings (that is, users) and those who use class names when accessing
resource values (that is, application programmers).

   In order to access a value in a resource database, an application
uses a key consisting of two items: a _complete resource name_ and a
_complete resource class_. A complete resource name is a resource name
list containing no wildcard elements. A complete resource class is a
list of exactly the same form. The distinction between a complete
resource name and a complete resource class lies in how they are used to
access resource bindings. The elements of a complete resource name are
interpreted as names of individual objects; the elements of a complete
resource class are interpreted as names of object classes. The complete
resource name and class lists used in a resource database access must
have the same length.

   Like any resource name list, a complete resource name consists of a
path list and an attribute name. The first path list element is
typically a symbol (or string) identifying the application as a whole.
The second element can be a screen root identifier. Subsequent elements
can be identifiers for each ancestor window of an application window.
Thus, a path list typically identifies a specific window by tracing a
path to it through the application window hierarchy. The final element
of a complete resource name (its attribute name) is typically the name
of a specific attribute of the window given by the path list (for
example, `'background'). An attribute name can refer to a feature
associated with the window by the application but not by the X server
(for example, a font identifier).  Similarly, a complete resource class
typically represents a path to a window in the application window
hierarchy and a specific window attribute. However, a complete resource
class contains the class name for each window and for the window
attribute.

   For instance, in the previous example, the `mail' application can
attempt to look up the value of the `background' resource for the
`reply button' window by using the following complete resource name:

     (mail screen-1 reply background)

   and the following complete resource class:

     (application root button fill)

   This complete resource name contains a path list identifying the
reply button window - `(mail screen-1 reply)' - and an attribute name
for the window background. The corresponding resource class contains
the class names for the same path list and window attribute.


File: clx.info,  Node: Matching Resource Names,  Next: Resource Access Functions,  Prev: Complete Names and Classes,  Up: Accessing Resource Values

14.3.2 Matching Resource Names
------------------------------

The resource lookup algorithm searches a specified resource data base
and returns the value for the resource binding whose resource name is
the closest match to a given complete resource name and class. The
intent of the lookup algorithm is to formalize an intuitive notion of
the closest match.

   Precedence is given to a match which begins _higher_ in the
parent-child contact hierarchy. This allows a resource binding with a
partial name to define a resource value shared by all members of a
window subtree. For example, suppose the resource database contained the
following resource bindings:

`(mail *        `'red'
background)'    
`(* reply       `'blue'
background)'    

   Suppose an application program searched by using the following
complete resource name:

     (mail screen-1 reply background)

   then the closest matching value returned would be `'red'.

   Precedence is given to the more specific match. A name match is more
specific than a class match. Either a name or class match is more
specific than a wildcard match. For example, suppose the resource
database contained the following resource bindings:

`(mail *        `'red'
background)'    
`(mail *        `'blue'
fill)'          

   Suppose an application program searched by using the following
complete resource name and complete resource class:

     (mail screen-1 reply background)
     (application root button fill)

   then the closest matching value returned would be `'red'. However,
suppose the resource database contained the following resource bindings:

`(mail *        `'red'
background)'    
`(mail *        `'blue'
button          
background)'    

   then the closest matching value returned would be `'blue'.


File: clx.info,  Node: Resource Access Functions,  Prev: Matching Resource Names,  Up: Accessing Resource Values

14.3.3 Resource Access Functions
--------------------------------

The following paragraphs describe the CLX functions used to return a
value from a resource database.

 -- Function: get-resource database attribute-name attribute-class
          path-name path-class
    DATABASE
          A RESOURCE-DATABASE.

    ATTRIBUTE-NAME
          A string or symbol giving an attribute name from a complete
          resource name.

    ATTRIBUTE-CLASS
          A string or symbol giving an attribute class name from a
          complete resource class.

    PATH-NAME
          The path list from a complete resource name. _path-name_ and
          _path-class_ must have the same length.

    PATH-CLASS
          The path list from a complete resource class. _path-name_ and
          _path-class_ must have the same length.

     Returns the value of the resource binding in the _database_ whose
     resource name most closely matches the complete resource
     name/class given by the _path-name_, _path-class_,
     _attribute-name_, and _attribute-class_. The lookup algorithm
     implements the precedence rules described previously to determine
     the closest match. When comparing name elements, case is
     significant only if both elements are strings; otherwise, element
     matching is case-insensitive.

    VALUE
          Type T.


 -- Function: get-search-table database path-name path-class
    DATABASE
          A RESOURCE-DATABASE.

    PATH-NAME
          The path list from a complete resource name. _path-name_ and
          _path-class_must have the same length.

    PATH-CLASS
          The path list from a complete resource class. _path-name_ and
          _path-class_ must have the same length.

     Returns a table containing the subset of the _database_ that
     matches the _path-name_ and _path-class_. Resources using the same
     _path-name_ and _path-class_ can be accessed much more efficiently
     by using this table as an argument to GET-SEARCH-RESOURCE.

    SEARCH-TABLE
          Type LIST.


 -- Function: get-search-resource table attribute-name attribute-class
    TABLE
          A search table returned by GET-SEARCH-TABLE.

    ATTRIBUTE-NAME
          A string or symbol giving an attribute name from a complete
          resource name.

    ATTRIBUTE-CLASS
          A string or symbol giving an attribute class name from a
          complete resource class.

     Returns the value of the resource binding in the search _table_
     that most closely matches the _attribute-name_ and
     _attribute-class_. The _table_ is computed by GET-SEARCH-TABLE and
     represents a set of resource bindings. The closest match is
     determined by the same algorithm used in GET-RESOURCE.

     The following two forms are functionally equivalent:

          (get-resource
           database attribute-name attribute-class path-name path-class)

          (get-search-resource
           (get-search-table database path-name path-class)
           attribute-name attribute-class)

     However, the hard part of the search is done by GET-SEARCH-TABLE.
     Looking up values for several resource attributes that share the
     same path list can be done much more efficiently with calls to
     GET-SEARCH-RESOURCE.
    VALUE
          Type T.



File: clx.info,  Node: Resource Database Files,  Prev: Accessing Resource Values,  Up: Resources

14.4 Resource Database Files
============================

X users and application programs can save resource bindings in a file,
using a standard file format shared by all X clients. The following
paragraphs describe the CLX functions used to convert between the
standard external format of resource files and the internal
resource-database format used by application programs.

 -- Function: read-resources database pathname &key :key :test :test-not
    DATABASE
          The RESOURCE-DATABASE to merge.

    PATHNAME
          A pathname for the resource file to read.

    :KEY
          A function used to convert a value from the resource file
          into a resource binding value.

    :TEST
    :TEST-NOT
          Functions used to select which resource bindings from the
          resource file are merged with the _database_.

     Reads resource bindings from a resource file in standard X11 format
     and merges them with the given resource _database_. The :KEY
     function is called to convert a file resource value into the value
     stored in the _database_. By default, :KEY is #'IDENTITY. The
     :TEST and :TEST-NOT functions are predicates that select resource
     bindings to merge, based on the result of the :KEY function. For
     each file resource binding consisting of a _resource-name_ and a
     _resource-value_, the :TEST (or :TEST-NOT) function is called with
     the arguments _resource-name_ and (FUNCALL _key resource-value_).

    DATABASE
          Type RESOURCE-DATABASE.


 -- Function: write-resources database pathname &key :write :test
          :test-not
    DATABASE
          The RESOURCE-DATABASE to write.

    PATHNAME
          A pathname of the file to write.

    :WRITE
          A function for writing resource values.

    :TEST
    :TEST-NOT
          Functions used to select which resource bindings from the
          resource file are merged with the _database_.

     Writes resource bindings found in the _database_ to the file given
     by the _pathname_. The output file is written in the standard X11
     format. The :WRITE function is used for writing resource values;
     the default is #'PRINC. The :WRITE function is passed two
     arguments: a _resource-value_ and a _stream_. The :TEST and
     :TEST-NOT functions are predicates which select resource bindings
     to write. For each resource binding consisting of a
     _resource-name_ and a _resource-value_, the :TEST (or :TEST-NOT)
     function is called with the arguments _resource-name_ and
     _resource-value_.



File: clx.info,  Node: Control Functions,  Next: Extensions,  Prev: Resources,  Up: Top

15 Control Functions
********************

* Menu:

* Grabbing the Server::
* Pointer Control::
* Keyboard Control::
* Keyboard Encodings::
* Client Termination::
* Managing Host Access::
* Screen Saver::


File: clx.info,  Node: Grabbing the Server,  Next: Pointer Control,  Prev: Control Functions,  Up: Control Functions

15.1 Grabbing the Server
========================

Certain cases may require that a client demand exclusive access to the
server, causing the processing for all other clients to be suspended.
Such exclusive access is referred to as _grabbing the server_. CLX
provides functions to grab and release exclusive access to the server.
These function should be used rarely and always with extreme caution,
since they have the potential to disrupt the entire window system for
all clients.

 -- Function: grab-server display
    DISPLAY
          A DISPLAY.

     Disables processing of requests and close-downs on all connections
     other than the one on which this request arrived.


 -- Function: ungrab-server display
    DISPLAY
          A DISPLAY.

     Restarts processing of requests and close-downs on other
     connections.


 -- Macro: with-server-grabbed display &body body
     Grabs the _display_ server only within the dynamic extent of the
     _body_. UNGRAB-SERVER is automatically called upon exit from the
     _body_. This macro provides the most reliable way for CLX clients
     to grab the server.

    DISPLAY
          A DISPLAY.

    BODY
          The forms to execute while the server is grabbed.



File: clx.info,  Node: Pointer Control,  Next: Keyboard Control,  Prev: Grabbing the Server,  Up: Control Functions

15.2 Pointer Control
====================

The following paragraphs describe the CLX functions used to:
   * Return or change the pointer acceleration and acceleration
     threshold

   * Return or change the mapping of pointer button numbers

 -- Function: change-pointer-control display &key :acceleration
          :threshold
    DISPLAY
          A DISPLAY.

    :ACCELERATION
          A number for the acceleration ratio.

    :THRESHOLD
          The number of pixels required for acceleration to take effect.

     Changes the acceleration and/or the acceleration threshold of the
     pointer for the _display_.  The :ACCELERATION number is used as a
     multiplier, typically specified as a rational number of the form
     _C/P_, where _C_ is the number of pixel positions of cursor motion
     displayed for _P_ units of pointer device motion. The acceleration
     only occurs if the pointer moves more that :THRESHOLD pixels at
     once, and only applies to the motion beyond the :THRESHOLD. Either
     :ACCELERATION or :THRESHOLD can be set to :DEFAULT, that restores
     the default settings of the server.


 -- Function: pointer-control display
    DISPLAY
          A DISPLAY.

     Returns the acceleration and threshold for the _display_ pointer.
    ACCELERATION
    THRESHOLD
          Type NUMBER.


 -- Function: pointer-mapping display &key (:result-type 'list)
    DISPLAY
          A DISPLAY.

    :RESULT-TYPE
          The type of sequence to return.

     Returns or (with `setf') changes the mapping of button numbers for
     the _display_ pointer.  The :RESULT-TYPE is not used when changing
     the mapping. If element _i_ of the mapping sequence is _j_, then
     the events from pointer button _j_ are reported by the server as
     events for button _i_+1. (Note that pointer buttons are numbered
     beginning with one, while the mapping sequence itself is indexed
     normally from zero.) If element _i_ of the mapping sequence is
     zero, then button _i_+1 is disabled and can no longer generate
     input events. No two elements of the mapping can have the same
     non-zero value.

     The length of the mapping sequence indicates the actual number of
     buttons on the device. When changing the mapping, the new mapping
     must have this same length.
    MAPPING
          Type SEQUENCE or CARD8_._



File: clx.info,  Node: Keyboard Control,  Next: Keyboard Encodings,  Prev: Pointer Control,  Up: Control Functions

15.3 Keyboard Control
=====================

The following paragraphs describe the CLX functions used to:
   * Return or change keyboard controls

   * Ring the keyboard bell

   * Return or change the mapping of modifiers

   * Return the current up/down state of all keys

 -- Function: bell display &optional (percent-from-normal 0)
    DISPLAY
          A DISPLAY.

    PERCENT-FROM-NORMAL
          An integer (-100 through 100).

     Rings the bell on the keyboard at a volume relative to the base
     volume for the keyboard, if possible. Percent can range from -100
     to 100 inclusive, or else a Value error occurs.  The following is
     the bell volume when percent is non-negative:

          (- (+ _base percent_) (QUOTIENT (* _base percent_) 100))

     and when percent is negative:

          (+ _base_ (QUOTIENT (* _base percent_) 100))


 -- Function: change-keyboard-control display &key :key-click-percent
          :bell-percent :bell-pitch :bell-duration :led :led-mode :key
          :auto-repeat-mode
    DISPLAY
          A DISPLAY.

    :KEY-CLICK-PERCENT
          An integer (0 100).

    :BELL-PERCENT
          An integer (0 100).

    :BELL-PITCH
          A CARD16.

    :BELL-DURATION
          A CARD16.

    :LED
          A CARD8.

    :LED-MODE
          Either :ON or :OFF.

    :KEY
          A CARD8 keycode.

    :AUTO-REPEAT-MODE
          Either :ON, :OFF, or :DEFAULT.

     Changes the various aspects of the keyboard. The keyword arguments
     specify which controls to change.

     The :KEY-CLICK-PERCENT keyword sets the volume for key clicks, if
     possible. A value of 0 implies off, while a value of 100 implies
     loud. Setting :KEY-CLICK-PERCENT to :DEFAULT restores the default
     value.

     The :BELL-PERCENT sets the base volume for the bell between 0
     (off) and 100 (loud) if possible. Setting :BELL-PERCENT to
     :DEFAULT restores the default value.

     The :BELL-PITCH sets the pitch (specified in Hz) of the bell, if
     possible. Setting the :BELL-PITCH to :DEFAULT restores the default
     value. The :BELL-DURATION sets the duration ( specified in
     milliseconds) of the bell, if possible. Setting :BELL-PITCH to
     :DEFAULT restores the default. Note that a bell generator
     connected with the console but not directly on the keyboard is
     treated as if it were part of the keyboard.

     If both :LED-MODE and :LED are specified, then the state of that
     LED is changed, if possible. If only :LED-MODE is specified, the
     state of all LEDs are changed, if possible. At most 32 LEDs are
     supported, numbered from one. No standard interpretation of the
     LEDs are defined.

     If both :AUTO-REPEAT-MODE and :KEY are specified, the auto-repeat
     mode of that key is changed, if possible. If only
     :AUTO-REPEAT-MODE is specified, the global auto-repeat mode for
     the entire keyboard is changed, if possible, without affecting the
     per-key settings. An error occurs if :KEY is specified without
     :AUTO-REPEAT-MODE.


 -- Function: keyboard-control display
    DISPLAY
          A DISPLAY.

     Returns the current control values for the keyboard. For the LEDs,
     the least significant bit of _led-mask_ corresponds to LED one,
     and each one bit in _led-mask_ indicates an LED that is lit.
     _auto-repeats_ is a bit vector; each one bit indicates that
     auto-repeat is enabled for the corresponding key. The vector is
     represented as 32 bytes. Byte _n_ (from 0) contains the bits for
     keys 8_n_ to 8_n_+7, with the least significant bit in the byte
     representing key 8_n_.
    KEY-CLICK-PERCENT
    BELL-PERCENT
          Type CARD8.

    BELL-PITCH
    BELL-DURATION
          Type CARD16.

    LED-MASK
          Type CARD32.

    GLOBAL-AUTO-REPEAT
          Either :ON or :OFF.

    AUTO-REPEATS
          Type BIT-VECTOR.


 -- Function: modifier-mapping display
    DISPLAY
          A DISPLAY.

     Returns the set of keycodes used for each modifier on the
     _display_ keyboard. Each return value is a list of the CARD8
     keycodes used for each modifier key. The order of keycodes within
     each list is server-dependent.
    SHIFT-KEYCODES
    LOCK-KEYCODES
    CONTROL-KEYCODES
    MOD1-KEYCODES
    MOD2-KEYCODES
    MOD3-KEYCODES
    MOD4-KEYCODES
    MOD5-KEYCODES
          Type LIST of CARD8.


 -- Function: query-keymap display
    DISPLAY
          A DISPLAY.

     Returns a bit vector that describes the state of the keyboard. Each
     one bit indicates that the corresponding key is currently pressed.
     The vector is represented as 32 bytes. Byte _n_ (from 0) contains
     the bits for keys 8_n_ to 8_n_+7, with the least significant bit
     in the byte representing key 8_n_.
    KEYMAP
          Type BIT-VECTOR 256.


 -- Function: set-modifier-mapping display &key :shift :lock :control
          :mod1 :mod2 :mod3 :mod4 :mod5
    DISPLAY
          A DISPLAY.

    :SHIFT
    :LOCK
    :CONTROL
    :MOD1
    :MOD2
    :MOD3
    :MOD4
    :MOD5
          A sequence of CARD8 keycodes for the given modifier.

     Changes the set of keycodes mapped to the specified modifier keys
     on the _display_ keyboard. Each keyword argument contains a
     sequence of new CARD8 keycodes for a specific modifier. The return
     value indicates whether the change was completed successfully.

     A status of :FAILED is returned if hardware limitations prevent
     the requested change. For example, multiple keycodes per modifier
     may not be supported, up transitions on a given keycode may not be
     supported, or autorepeat may be mandatory for a given keycode. If
     :FAILED is returned, the mappings for all modifiers remain
     unchanged.

     A status of :DEVICE-BUSY is returned if a new keycode given for a
     modifier was not previously mapped to that modifier and is
     currently in the down state. In this case, the mappings for all
     modifiers remain unchanged.
    STATUS
          One of :SUCCESS, :FAILED, or :DEVICE-BUSY.



File: clx.info,  Node: Keyboard Encodings,  Next: Client Termination,  Prev: Keyboard Control,  Up: Control Functions

15.4 Keyboard Encodings
=======================

Handling the great diversity of keyboard devices and international
language character encodings is a difficult problem for interactive
programs that need to receive text input but must also be portable. The
X Window System solves this problem by using different sets of encodings
for device keys (_keycodes_) and for character symbols (_keysyms_).
Each X server maintains a _keyboard mapping_ that associates keycodes
and keysyms, and which can be returned or changed by client programs.

   To handle text input, a CLX client program must follow these steps:
  1. Receive a :KEY-PRESS (or :KEY-RELEASE) event containing a keycode.

  2. Convert the keycode into its corresponding keysym, based on the
     current keyboard mapping. See KEYCODE-&GT;KEYSYM.

  3. Convert the keysym into the corresponding Common Lisp character.
     See KEYSYM-&GT;CHARACTER.

* Menu:

* Keycodes and Keysyms::
* Keyboard Mapping::
* Using Keycodes and Keysyms::


File: clx.info,  Node: Keycodes and Keysyms,  Next: Keyboard Mapping,  Prev: Keyboard Encodings,  Up: Keyboard Encodings

15.4.1 Keycodes and Keysyms
---------------------------

A _keycode_ represents a physical (or logical) key. In CLX, keycodes
are values of type (INTEGER 8 255). A keycode value carries no
intrinsic information, although server implementors may attempt to
encode geometry (for example, matrix) information in some fashion so it
can be interpreted in a server- dependent fashion. The mapping between
keys and keycodes cannot be changed.

   A _keysym_ is an encoding of a symbol on the cap of a key. In CLX,
keysyms are values of type CARD32. The set of defined keysyms include
the ISO Latin character sets (1-4), Katakana, Arabic, Cyrillic, Greek,
Technical, Special, Publishing, APL, Hebrew, and miscellaneous keys
found on keyboards (RETURN, HELP, TAB, and so on). The encoding of
keysyms is defined by the X Protocol.

   A list of keysyms is associated with each keycode. The length of the
list can vary with each keycode. The list is intended to convey the set
of symbols on the corresponding key. By convention, if the list contains
a single keysym and if that keysym is alphabetic and case distinction is
relevant, then it should be treated as equivalent to a two-element list
of the lowercase and uppercase keysyms. For example, if the list
contains the single keysym for uppercase A, the client should treat it
as if it were a pair with lowercase as the first keysym and uppercase A
as the second keysym.

   For any keycode, the first keysym in the list should be chosen as the
interpretation of a key press when no modifier keys are down. The second
keysym in the list normally should be chosen when the :SHIFT modifier
is on, or when the :LOCK modifier is on and :LOCK is interpreted as
:SHIFT-LOCK. When the :LOCK modifier is on and is interpreted as
:CAPS-LOCK, it is suggested that the :SHIFT modifier first be applied
to choose a keysym, but if that keysym is lowercase alphabetic, the
corresponding uppercase keysym should be used instead.

   Other interpretations of :CAPS-LOCK are possible; for example, it
may be viewed as equivalent to :SHIFT-LOCK, but only applying when the
first keysym is lowercase alphabetic and the second keysym is the
corresponding uppercase alphabetic. No interpretation of keysyms beyond
the first two in a list is suggested here. No spatial geometry of the
symbols on the key is defined by their order in the keysym list,
although a geometry might be defined on a vendor-specific basis. The X
server does not use the mapping between keycodes and keysyms. Rather,
the X server stores the mapping merely for reading and writing by
clients.


File: clx.info,  Node: Keyboard Mapping,  Next: Using Keycodes and Keysyms,  Prev: Keycodes and Keysyms,  Up: Keyboard Encodings

15.4.2 Keyboard Mapping
-----------------------

The X server maintains a keyboard mapping that associates each keycode
with one or more keysyms. The following paragraphs describe the CLX
functions used to return or change the mapping of keycodes.

 -- Function: change-keyboard-mapping display keysyms &key (:start 0)
          :end
    DISPLAY
          A DISPLAY.

    KEYSYMS
          A two-dimensional array of keysym (CARD32) values.

    :START
    :END
          Indexes for the subsequence of _keysyms_ used.

    :FIRST-KEYCODE
          A CARD8 defining the first keycode mapping changed.

     (:FIRST-KEYCODE :START)

     Changes the mapping of keycodes to _keysyms_. A :MAPPING-NOTIFY
     event is generated for all clients.

     The new _keysyms_ are specified as a two-dimensional array in
     which:

     (AREF _keysyms_ (+ :START _i_) _j_)

     is _keysym j_ associated with keycode (+ :FIRST-KEYCODE _i_). The
     maximum number of _keysyms_ associated with any one keycode is
     given by:

     (ARRAY-DIMENSION _keysyms_ 1)

     _keysyms_ should contain NIL elements to represent those keysyms
     that are undefined for a given keycode. :START and :END define the
     subsequence of the _keysyms_ array that defines the new mapping,
     and the number of keycode mappings changed. By default, :END is
     given by:

     (ARRAY-DIMENSION _keysyms_ 0)

     The keycodes whose mappings are changed are given by
     :FIRST-KEYCODE through the following:

     (+ :FIRST-KEYCODE (- :END :START) -1)

     keycodes outside this range of are not affected. :FIRST-KEYCODE
     must not be less than (DISPLAY-MIN-KEYCODE _display_), and the
     last keycode modified must not be greater than (DISPLAY-MAX-KEYCODE
     _display_).


 -- Function: keyboard-mapping display &key :first-keycode :start :end
          :data
    DISPLAY
          A DISPLAY.

    :FIRST-KEYCODE
          A CARD8 defining the first keycode mapping returned.

    :START
    :END
          Indexes for the subsequence of the returned array which is
          modified.

    :DATA
          If given, a two-dimensional array to receive the returned
          keysyms.
     Returns the keysyms mapped to the given range of keycodes for the
     _display_ keyboard.  The mappings are returned in the form of a
     two-dimensional array of CARD32 keysym values. The :DATA argument,
     if given, must be a two-dimensional array in which the returned
     mappings will be stored. In this case:

     (ARRAY-DIMENSION :DATA 1)

     defines the maximum number of keysyms returned for any keycode.
     Otherwise, a new array is created and returned.

     Upon return:

     (AREF _mappings_ (+ _:start i_) _j_)

     will contain keysym _j_ associated with keycode (+ :FIRST-KEYCODE
     I) (or NIL, if keysym _j_ is undefined for that keycode).

     :FIRST-KEYCODE specifies the first keycode whose mapping is
     returned; by default, :FIRST-KEYCODE is (DISPLAY-MIN-KEYCODE
     _display_). :START and :END define the subsequence of the returned
     array in which the returned mappings are stored. By default,
     :START is given by :FIRST-KEYCODE and :END is given by:

     (1+ (DISPLAY-MAX-KEYCODE _display_))

     :FIRST-KEYCODE must not be less than (DISPLAY-MIN-KEYCODE
     _display_), and the last keycode returned must not be greater than
     (DISPLAY-MAX-KEYCODE _display_).
    MAPPINGS
          Type (ARRAY CARD32 (* *)).



File: clx.info,  Node: Using Keycodes and Keysyms,  Prev: Keyboard Mapping,  Up: Keyboard Encodings

15.4.3 Using Keycodes and Keysyms
---------------------------------

The following paragraphs describe the CLX functions used to:
   * Convert a keycode into a keysym

   * Convert a keysym into a character

 -- Function: keycode->keysym display keycode keysym-index
    DISPLAY
          A DISPLAY.

    KEYCODE
          A CARD8.

    KEYSYM-INDEX
          A CARD8.

     Returns the _keysym_ at the given _keysym-index_ from the keysym
     list for the _keycode_ in the current keyboard mapping for the
     _display_ server.  _This function was called keycode-keysym in
     X11R4 and older versions of CLX._
    KEYSYM
          Type KEYSYM.


 -- Function: keysym->character display keysym &optional (state 0)
    DISPLAY
          A DISPLAY.

    KEYSYM
          A KEYSYM.

    STATE
          A MASK16.

     Returns the _character_ associated with the _keysym_ and the
     _state_. The _state_ is a MASK16 bit mask representing the state
     of the _display_ modifier keys and pointer buttons. See
     STATE-MASK-KEY in *note Data Types::. If the _keysym_ does not
     represent a Common Lisp character, then NIL is returned.  _This
     function was called keysym-character in X11R4 and older versions
     of CLX._

     The _state_ determines the bits attribute of the returned
     _character_, as follows:
    :CONTROL
          CHAR-CONTROL-BIT

    :MOD-1
          CHAR-META-BIT

    :MOD-2
          CHAR-SUPER-BIT

    :MOD-3
          CHAR-HYPER-BIT

    CHARACTER
          Type CHARACTER or NULL.



File: clx.info,  Node: Client Termination,  Next: Managing Host Access,  Prev: Keyboard Encodings,  Up: Control Functions

15.5 Client Termination
=======================

The CLX functions affecting client termination are discussed in the
following paragraphs.

   When a display connection to an X server is closed, whether by an
explicit call to CLOSE-DISPLAY or by some external condition, the
server automatically performs a sequence of operations to clean up
server state information associated with the closed connection.  The
effect of these operations depends the _close-down mode_ and the
_save-set_ that the client has specified for the closed display
connection. The close-down mode of a display determines whether server
resources allocated by the connection are freed or not. The save-set
identifies windows that will remain after the connection is closed.

   The display save-set is used primarily by window managers that
reparent the top-level windows of other clients. For example, such a
window manager can automatically create a frame window that encloses a
top-level client window, along with a set of controls used for window
management. Ordinarily, termination of the window manager client would
then destroy all client windows! However, the window manager can prevent
this by adding to its save-set those windows created by other clients
that should be preserved.

   When a display connection closes, an X server performs the following
operations:
  1. For each selection owned by a window created on the connection, the
     selection owner is set to NIL.

  2. An active or passive grab established for a window created on the
     connection is released.

  3. If the connection has grabbed the server, the server is ungrabbed.

  4. Server resources and colormap cells allocated by the connection are
     freed and destroyed, depending on the close-down mode, as follows:
        * :RETAIN-PERMANENT - All resources are marked _permanent_, and
          no resources are destroyed. These resources can later be
          destroyed by a call to KILL-CLIENT.

        * :RETAIN-TEMPORARY - All resources are marked _temporary_, and
          no resources are destroyed. These resources can later be
          destroyed by a call to KILL-CLIENT or KILL-TEMPORARY-CLIENTS.

        * :DESTROY - All resources are destroyed.

   When server resources allocated by a display connection are
destroyed - whether by closing the connection with close-down mode
:DESTROY or by later calling KILL-CLIENT or KILL-TEMPORARY-CLIENTS -
then an X server performs the following operations on each member of
the save-set before actually destroying resources.
  1. If the save-set window is a descendant of a window created on the
     connection, the save-set window is reparented. The new parent is
     the closest ancestor such that the save-set window is no longer a
     descendant of any window created on the connection. The position of
     the reparented window with respect to its parent remains unchanged.

  2. If the save-set window is unmapped, then it is mapped.

   If the last connection open to an X server is closed with close-down
mode :DESTROY, the server resets its state to restore all initial
defaults. The server state after reset is the same as its initial state
when first started. When an X server resets, it performs the following
operations:
   * All permanent and temporary server resources from previously-closed
     connections are destroyed.

   * All but the predefined atoms are deleted.

   * All root window properties are deleted.

   * All device control attributes and mappings are restored to their
     original default values.

   * The default background and cursor for all root windows are
     restored.

   * The default font path is restored.

   * The input focus is set to :POINTER-ROOT.

   * The access control list is reset.

   The following paragraphs describe the CLX functions used to:
   * Add or remove a window from a display save-set.

   * Return or change the display close-down mode.

   * Force a connection to be closed or all its server resources to be
     destroyed.

   * Force a connection to be closed and all temporary resources to be
     destroyed.

 -- Function: add-to-save-set window
    WINDOW
          A WINDOW.

     Adds the specified _window_ to the save-set of the _window_
     display. The _window_ must have been created by some other
     display. Windows are removed automatically from the save-set when
     they are destroyed.


 -- Function: close-down-mode display
    DISPLAY
          A DISPLAY.
     Returns and (with `setf') sets the close-down mode of the client's
     resources at connection close.
    MODE
          One of :DESTROY, :RETAIN-PERMANENT, or :RETAIN-TEMPORARY.


 -- Function: kill-client display resource-id
    DISPLAY
          A DISPLAY.

    RESOURCE-ID
          A valid CARD29 resource ID.

     Closes the display connection which created the given
     _resource-id_. The _resource-id_ must be valid, but need not
     belong to the given _display_.

     If the closed connection was previously open, the connection is
     closed according to its close-down mode. Otherwise, if the
     connection had been previously terminated with close-down mode
     :RETAIN-PERMANENT or :RETAIN-TEMPORARY, then all its retained
     server resources - both permanent and temporary - are destroyed.


 -- Function: kill-temporary-clients display
    DISPLAY
          A DISPLAY.

     Closes the _display_ connection and destroys all retained
     temporary server resources for this and all previously-terminated
     connections.

     If the _display_ connection was previously open, the connection is
     closed according to its close-down mode. Otherwise, if the
     _display_ connection had been previously terminated with
     close-down mode :RETAIN-PERMANENT or :RETAIN-TEMPORARY, then all
     its retained server resources - both permanent and temporary - are
     destroyed.


 -- Function: remove-from-save-set window
    WINDOW
          A WINDOW.

     Removes the specified _window_ from the save-set of the _window_
     display. The _window_ must have been created by some other
     display. Windows are removed automatically from the save-set when
     they are destroyed.



File: clx.info,  Node: Managing Host Access,  Next: Screen Saver,  Prev: Client Termination,  Up: Control Functions

15.6 Managing Host Access
=========================

An X server maintains a list of hosts from which client programs can be
run. Only clients executing on hosts that belong to this _access
control list_ are allowed to open a connection to the server.
Typically, the access control list can be changed by clients running on
the same host as the server. Some server implementations can also
implement other authorization mechanisms in addition to, or in place
of, this mechanism.  The action of this mechanism can be conditional
based on the authorization protocol name and data received by the
server at connection setup.

   The following paragraphs describe the CLX functions used to:
   * Add or remove hosts on the access control list.

   * Return the hosts on the access control list.

   * Return or change the state of the access control list mechanism

 -- Function: access-control display
    DISPLAY
          A DISPLAY.
     Returns and (with `setf') changes the state of the access control
     list mechanism for the _display_ server. Returns true if access
     control is enabled; otherwise, NIL is returned. If enabled, the
     access control list is used to validate each client during
     connection setup.

     Only a client running on the same host as the server is allowed to
     enable or disable the access control list mechanism.
    ENABLED-P
          Type BOOLEAN.


 -- Function: access-hosts display &key (:result-type 'list)
    DISPLAY
          A DISPLAY.

    :RESULT-TYPE
          The type of hosts sequence to return.
     Returns a sequence containing the _hosts_ that belong to the
     access control list of the _display_ server. Elements of the
     returned _hosts_ sequence are either strings or some other type of
     object recognized as a host name by ADD-ACCESS-HOST and
     REMOVE-ACCESS-HOST.  The second returned value specifies whether
     the access control list mechanism is currently enabled or disabled
     (see ACCESS-CONTROL).
    HOSTS
          SEQUENCE of STRING.

    ENABLED-P
          Type BOOLEAN.


 -- Function: add-access-host display host
    DISPLAY
          A DISPLAY.

    HOST
          A host name. Either a string or some other
          implementation-dependent type.

     Adds the specified _host_ to the access control list. Only a
     client running on the same host as the server can change the access
     control list.


 -- Function: remove-access-host display host
    DISPLAY
          A DISPLAY.

    HOST
          A host name. Either a string or some other
          implementation-dependent type.

     Removes the specified _host_ from the access control list. Only a
     client running on the same host as the server can change the
     access control list.



File: clx.info,  Node: Screen Saver,  Prev: Managing Host Access,  Up: Control Functions

15.7 Screen Saver
=================

To prevent monitor damage, an X server implements a screen saver
function which blanks screens during periods of unuse. The screen saver
can be in one of three states:
   * Disabled - No screen blanking is done and screen content remains
     unchanged.

   * Deactivated - The server is being used. When the server input
     devices are unused for a specific amount of time, the screen saver
     becomes activated.

   * Activated - The server input devices are unused. The screen saver
     blanks all server screens or displays a server-dependent image. As
     soon as an input event from either the pointer or the keyboard
     occurs, the screen saver is deactivated and its timer is reset.

   The following paragraphs describe the CLX functions used to:
   * Return or change screen saver control values.

   * Activate or reset the screen saver

 -- Function: activate-screen-saver display
    DISPLAY
          A DISPLAY.

     Activates the screen saver for the _display_ server.


 -- Function: reset-screen-saver display
    DISPLAY
          A DISPLAY.

     Deactivates the screen saver for the _display_ server (if
     necessary) and resets its timer, just as if a pointer or keyboard
     event had occurred.


 -- Function: screen-saver display
    DISPLAY
          A DISPLAY.
     Returns the current control values for the _display_ server screen
     saver. See SET-SCREEN-SAVER.
    TIMEOUT
    PERIOD
          Type INT16.

    BLANKING
    EXPOSURES
          One of :YES or :NO.


 -- Function: set-screen-saver display timeout period blanking exposures
    DISPLAY
          A DISPLAY.

    TIMEOUT
          Specifies the delay until timeout takes over.

    PERIOD
          Specifies the periodic change interval, if used.

    BLANKING
          Specifies whether the blanking option is available.

    EXPOSURES
          Specifies whether exposures are allowed during blanking.

     Changes the current control values for the _display_ server screen
     saver. The screen saver is reset. The screen saver is also
     disabled if:
        * _timeout_ is zero, or

        * Both _blanking_ and _exposures_ are disabled and the server
          cannot regenerate the screen contents without sending
          :EXPOSURE events.

     The _timeout_ specifies the (non-negative) number of seconds of
     input device inactivity that must elapse before the screen saver is
     activated. The _timeout_ can be set to :DEFAULT to restore the
     server default timeout interval.

     If _blanking_ is :YES and the screen hardware supports blanking,
     blanking is enabled; that is, the screen saver will simply blank
     all screens when it is activated. _blanking_ can be set to
     :DEFAULT to restore the server default state for blanking.

     If _exposures_ is :YES, exposures are enabled. If exposures are
     enabled, or if the server is capable of regenerating screen
     contents without sending :EXPOSURE events, the screen saver will
     display some server-dependent image when activated. Frequently,
     this image will consist of a repeating animation sequence, in
     which case _period_ specifies the ( non-negative) number of
     seconds for each repetition. A _period_ of zero is a hint that no
     repetition should occur.



File: clx.info,  Node: Extensions,  Next: Errors,  Prev: Control Functions,  Up: Top

16 Extensions
*************

* Menu:

* Extensions (Extensions)::
* SHAPE - The X11 Nonrectangular Window Shape Extension::
* RENDER - A new rendering system for X11::
* DPMS - The X11 Display Power Management Signaling Extension::
* BIG-REQUESTS - Big Requests Extension::


File: clx.info,  Node: Extensions (Extensions),  Next: SHAPE - The X11 Nonrectangular Window Shape Extension,  Prev: Extensions,  Up: Extensions

16.1 Extensions
===============

The X Window System is based on a core protocol which can be extended to
provide new functionality. An extension is generally represented by an
additional set of requests or event types that are implemented by an X
server supporting the extension.  By definition, a client program using
an extension may not be portable to other servers.  However, extensions
allow different server implementations and different sites to add their
own special features to X, without disrupting clients that rely only on
the core protocol.

   Extensions are identified by assigning them unique name strings and
major protocol numbers. A client program can request an X server to use
a protocol extension by furnishing the extension protocol number as an
argument to OPEN-DISPLAY. The X Consortium maintains a registry of
standard extension names and protocol numbers.

   The following paragraphs describe the CLX functions used to:
   * List all supported extensions.

   * Find out if a given extension is supported.

 -- Function: list-extensions display &key (:result-type 'list)
    DISPLAY
          A DISPLAY.

    :RESULT-TYPE
          The type of name sequence to return.
     Returns a sequence containing the _names_ of all extensions
     supported by the _display_ server.
    NAMES
          Type SEQUENCE of STRING.


 -- Function: query-extension display name
    DISPLAY
          A DISPLAY.

    NAME
          An extension name string.

     Returns the _major-opcode_ for the given extension _name_ support
     by the _display_ server. If the extension is not supported, only
     NIL values are returned. The extension _name_ must contain only
     ISO Latin-1 characters; case is significant.

     If the extension involves additional event types, the
     _first-event_ returned is the base event type code for new events;
     otherwise, the _first-event_ is NIL. If the extension involves
     additional error codes, the _first-error_ returned is the base
     code for new errors; otherwise, the _first-error_ is NIL. The
     formats of error and event messages sent by the server are
     completely defined by the extension.
    MAJOR-OPCODE
    FIRST-EVENT
    FIRST-ERROR
          Type CARD8 or NULL.



File: clx.info,  Node: SHAPE - The X11 Nonrectangular Window Shape Extension,  Next: RENDER - A new rendering system for X11,  Prev: Extensions (Extensions),  Up: Extensions

16.2 SHAPE - The X11 Nonrectangular Window Shape Extension
==========================================================

This documentation is yet to be written.


File: clx.info,  Node: RENDER - A new rendering system for X11,  Next: DPMS - The X11 Display Power Management Signaling Extension,  Prev: SHAPE - The X11 Nonrectangular Window Shape Extension,  Up: Extensions

16.3 RENDER - A new rendering system for X11
============================================

XRENDER is an experimental step in building a newer and modern graphics
rendering system that can keep up with the demands of visual appearance
on current user interfaces.

   The X Rendering Extension (Render) introduces digital image
composition as the foundation of a new rendering model within the X
Window System.  Rendering geometric figures is accomplished by
client-side tesselation into either triangles or trapezoids.  Text is
drawn by loading glyphs into the server and rendering sets of them.

* Menu:

* Picture formats::
* The picture object::
* Glyphs and Glyphsets::
* Using glyphs::
* Errors (Extensions)::


File: clx.info,  Node: Picture formats,  Next: The picture object,  Prev: RENDER - A new rendering system for X11,  Up: RENDER - A new rendering system for X11

16.3.1 Picture formats
----------------------

The following is what the X protocol rendering spec has to say about
picture formats.  `http://www.xfree86.org/~keithp/render/protocol.html'

   The PICTURE-FORMAT object holds information needed to translate
pixel values into red, green, blue and alpha channels.  The server has
a list of picture formats corresponding to the various visuals on the
screen.  There are two classes of formats, Indexed and Direct.  Indexed
picture-formats hold a list of pixel values and RGBA values while
Direct picture-formats hold bit masks for each of R, G, B and A.

   The server must support a direct PICTURE-FORMAT with 8 bits each of
red, green, blue and alpha as well as a direct PICTURE-FORMAT with 8
bits of red, green and blue and 0 bits of alpha.  The server must also
support direct PICTURE-FORMATs with 1, 4 and 8 bits of alpha and 0 bits
of r, g and b.

   Pixel component values lie in the closed range [0,1].  These values
are encoded in a varying number of bits.  Values are encoded in a
straight forward manner.  For a component encoded in m bits, a binary
encoding b is equal to a component value of b/(2^m-1).

   A direct PICTURE-FORMAT with zero bits of alpha component is
declared to have alpha == 1 everywhere.  A direct PICTURE-FORMAT with
zero bits of red, green and blue is declared to have red, green, blue
== 0 everywhere.  If any of red, green or blue components are of zero
size, all are of zero size.  Direct PICTURE-FORMATs never have
colormaps and are therefore screen independent.

   Indexed PICTURE-FORMATs never have alpha channels and the direct
component is all zeros.  Indexed PICTURE-FORMATs always have a colormap
in which the specified colors are allocated read- only and are
therefore screen dependent.

   These are valid accessors for picture-format objects.

PICTURE-FORMAT-DISPLAY
     A display

PICTURE-FORMAT-ID
     The X protocol RESOURCE-ID

PICTURE-FORMAT-TYPE
     `(member :indexed :direct)'

PICTURE-FORMAT-DEPTH
     Bitdepth as CARD8

PICTURE-FORMAT-RED-BYTE
     A bitmask

PICTURE-FORMAT-GREEN-BYTE
PICTURE-FORMAT-BLUE-BYTE
PICTURE-FORMAT-ALPHA-BYTE
PICTURE-FORMAT-COLORMAP
     A COLORMAP or nil


File: clx.info,  Node: The picture object,  Next: Glyphs and Glyphsets,  Prev: Picture formats,  Up: RENDER - A new rendering system for X11

16.3.2 The picture object
-------------------------

The PICTURE object contains a DRAWABLE, a PICTURE-FORMAT and some
rendering state.  More than one PICTURE can refer to the same DRAWABLE.

   A PICTURE is almost like a GCONTEXT, except that it is tied in use to
a single DRAWABLE. Another similarity it has with GCONTEXT is that it is
a cached object. Updates are not processed until the PICTURE is used.
This also makes it possible to query state, as there is no such request
in XRENDER to do so.

   The PICTURE object is also a lot like a DRAWABLE, in that it is used
as a target for graphics operations. Or at least that it occurs where
you would expect a drawable in XRENDER requests.

 -- Function: render-create-picture drawable &key format picture ...
    DRAWABLE
          A DRAWABLE

    FORMAT
          A PICTURE-FORMAT

    PICTURE
          An existing PICTURE object to use, one is created if not
          specified.

    REPEAT
          `(member :off :on)'

    ALPHA-MAP
          A PICTURE or :NONE

    ALPHA-X-ORIGIN
          INT16

    ALPHA-Y-ORIGIN
          INT16

    CLIP-X-ORIGIN
          INT16

    CLIP-Y-ORIGIN
          INT16

    CLIP-MASK
          A PIXMAP or :NONE

    GRAPHICS-EXPOSURES
          `(member :off :on)'

    SUBWINDOW-MODE
          `(member :clip-by-children :include-inferiors)'

    POLY-EDGE
          `(member :sharp :smooth)'

    POLY-MODE
          `(member :precise :imprecise)'

    DITHER
          XATOM or :NONE

    COMPONENT-ALPHA
          `(member :off :on)'
     This request creates a Picture object.  If the _drawable_ is a
     Window then the Red, Green and Blue masks must match those in the
     visual for the window else a Match error is generated.

    PICTURE
          A PICTURE


 -- Function: render-free-picture picture This request deletes all
          server resources associated with the picture object.
    PICTURE
          The PICTURE object to free



File: clx.info,  Node: Glyphs and Glyphsets,  Next: Using glyphs,  Prev: The picture object,  Up: RENDER - A new rendering system for X11

16.3.3 Glyphs and Glyphsets
---------------------------

A glyph in XRENDER is an alpha mask and an associated orgin,
advancement and numeric id. The application refers to them by the
numeric id.

   Glyphs are stored in a glyph-set. The client is responsible for
making sure the glyphs it uses are stored in the glyph-set, or there
will be a Glyph-error.

 -- Function: render-create-glyph-set format &key glyph-set
    FORMAT
          A PICTURE-FORMAT for the alpha masks that this font will use.

    GLYPH-SET
          An optional GLYPH-SET object to initialize with a server side
          glyphset resource.

     Creates an initially empty glyph-set for the client to use.
     _Format_ must be a Direct format. When it contains RGB values, the
     glyphs are composited using component-alpha True, otherwise they
     are composited using component-alpha False.

 -- Function: render-reference-glyph-set existing-glyph-set &key
          glyph-set
    EXISTING-GLYPH-SET
          An existing GLYPH-SET

    GLYPH-SET
          An optional GLYPH-SET, just like in RENDER-CREATE-GLYPH-SET

     Creates a new id refering to the existing-glyph-set. The glyph-set
     itself will not be freed until all ids has been removed.

 -- Function: render-free-glyph-set glyph-set
    GLYPH-SET
          A glyphset resource to free

     Removes an id to a glyph-set. When all ids have been removed the
     glyph-set itself is removed.


 -- Function: render-add-glyph glyph-set id &key x-origin y-origin
          x-advance y-advance data
    GLYPH-SET
          A GLYPH-SET

    ID
          CARD32

    X-ORGIN
          INT16

    Y-ORGIN
          INT16

    X-ADVANCE
          INT16

    Y-ADVANCE
          INT16

    DATA
          An ARRAY of CARD8 bytes.

     Associates id with the given description of a glyph. An existing
     glyph with the same id is replaced.

     At the time of writing, only 8bit alpha masks are supported.
     Experimentation with glyph-sets in other pict-formats needed.


 -- Function: render-add-glyph-from-picture glyph-set picture &key
          x-origin y-origin x-advance y-advance width height
    GLYPH-SET
          glyph-set

    PICTURE
          picture

    X-ORIGIN
          int16

    Y-ORIGIN
          int16

    X-ADVANCE
          int16

    Y-ADVANCE
          int16

    X
          int16

    Y
          int16

    WIDTH
          card16

    HEIGHT
          card16

     This request add a glyph to _glyph-set_ by copying it from the
     _x,y_ location in the _picture_.

     Existing glyphs with the same names are replaced.  The source
     _picture_ may be in a different PICTURE-FORMAT than _glyph-set_,
     in which case the images are converted to the glyph-set's format.

 -- Function: render-free-glyphs glyph-set glyphs
    GLYPH-SET
          A GLYPH-SET

    GLYPHS
          sequence of CARD32

     This request removes _glyphs_ from _glyph-set_.  Each glyph must
     exist in _glyph-set_ (else a MATCH error results).


File: clx.info,  Node: Using glyphs,  Next: Errors (Extensions),  Prev: Glyphs and Glyphsets,  Up: RENDER - A new rendering system for X11

16.3.4 Using glyphs
-------------------

 -- Function: render-composite-glyph dest glyph-set source dest-x
          dest-y sequence &key op src-x src-y mask-format start end
    DEST
          picture

    GLYPH-SET
          glyph-set

    SOURCE
          picture

    DEST-X
          int16

    DEST-Y
          int16

    SEQUENCE

    OP
          (member clear :src :dst :over :over-reverse :in :in-reverse
          :out :out-reverse :atop :atop-reverse :xor :add :saturate
          :maximum)

    SRC-X
          int16

    SRC-Y
          iny16

    MASK-FORMAT
          picture-format

    START
          blah

    END
          blah

     Requests the sequence of glyphs to be drawn with the glyph-set.


File: clx.info,  Node: Errors (Extensions),  Prev: Using glyphs,  Up: RENDER - A new rendering system for X11

16.3.5 Errors
-------------

What new errors Xrender defines...


File: clx.info,  Node: DPMS - The X11 Display Power Management Signaling Extension,  Next: BIG-REQUESTS - Big Requests Extension,  Prev: RENDER - A new rendering system for X11,  Up: Extensions

16.4 DPMS - The X11 Display Power Management Signaling Extension
================================================================

 -- Function: dpms-get-version display &optional (major-version 1)
          (minor-version 1)
    DISPLAY
          DISPLAY

    MAJOR-VERSION
          CARD16

    MINOR-VERSION
          CARD16

     Return two values: the major and minor version of the DPMS
     implementation the server supports.

     If supplied, the MAJOR-VERSION and MINOR-VERSION indicate what
     version of the protocol the client wants the server to implement.

 -- Function: dpms-capable display
    DISPLAY
          DISPLAY

     True if the currently running server's devices are capable of DPMS
     operations.

     The truth value of this request is implementation defined, but is
     generally based on the capabilities of the graphic card and monitor
     combination.  Also, the return value in the case of heterogeneous
     multi-head servers is implementation defined.

 -- Function: dpms-get-timeouts display
    DISPLAY
          DISPLAY

     Return three values: the current values of the DPMS timeout values.
     The timeout values are (in order returned): standby, suspend and
     off.  All values are in units of seconds.  A value of zero for any
     timeout value indicates that the mode is disabled.

 -- Function: dpms-set-timeouts display standby suspend off
    DISPLAY
          DISPLAY

    STANDBY
          CARD16

    SUSPEND
          CARD16

    OFF
          CARD16

     Set the values of the DPMS timeouts.  All values are in units of
     seconds.  A value of zero for any timeout value disables that mode.

 -- Function: dpms-enable display
    DISPLAY
          DISPLAY

     Enable the DPMS characteristics of the server using the server's
     currently stored timeouts.  If DPMS is already enabled, no change
     is affected.

 -- Function: dpms-disable display
    DISPLAY
          DISPLAY

     Disable the DPMS characteristics of the server.  It does not affect
     the core or extension screen savers.  If DPMS is already disabled,
     no change is effected.

     This request is provided so that DPMS may be disabled without
     damaging the server's stored timeout values.

 -- Function: dpms-force-level display power-level
    DISPLAY
          DISPLAY

    POWER-LEVEL
          (member :dpms-mode-on :dpms-mode-standby :dpms-mode-suspend
          :dpms-mode-off)

     Forces a specific DPMS level on the server.

 -- Function: dpms-info display
    DISPLAY
          DISPLAY

     Returns two values: the DPMS power-level and state value for the
     display.

     State is one of the keywords DPMS-ENABLED or DPMS-DISABLED.

     If state is DPMS-ENABLED, then power-level is returned as one of
     the keywords DPMS-MODE-ON, DPMS-MODE-STANDBY, DPMS-MODE-SUSPEND or
     DPMS-MODE-OFF.  If state is DPMS-DISABLED, then power-level is
     undefined and returned as NIL.


File: clx.info,  Node: BIG-REQUESTS - Big Requests Extension,  Prev: DPMS - The X11 Display Power Management Signaling Extension,  Up: Extensions

16.5 BIG-REQUESTS - Big Requests Extension
==========================================

 -- Function: display-extended-max-request-length display

 -- Function: enable-big-requests display

17 Errors
*********


File: clx.info,  Node: Errors,  Next: Undocumented,  Prev: Extensions,  Up: Top

* Menu:

* Introduction (Errors)::


File: clx.info,  Node: Introduction (Errors),  Prev: Errors,  Up: Errors

17.1 Introduction
=================

CLX error conditions are hierarchial. The base error condition is
X-ERROR, and all other conditions are built on top of X-ERROR. X-ERROR
can be built on a lower-level condition that is implementation
dependent (this is probably the ERROR condition).

 -- Macro: define-condition name (parent-types*) [(slot-specifier*)
          option*]
     Any new condition type must be defined with the DEFINE-CONDITION
     macro. A condition type has a name, parent types, report message,
     and any number of slot items. See the _Lisp_ _Reference_ manual
     for further information regarding DEFINE-CONDITION.

     The following are the predefined error conditions that can occur
     in CLX.

 -- Condition: access-error
     An ACCESS-ERROR can occur for several reasons:
        * A client attempted to grab a key/button combination already
          grabbed by another client

        * A client attempted to free a colormap entry that it did not
          already allocate

        * A client attempted to store into a read-only colormap entry

        * A client attempted to modify the access control list from
          other than the local (or otherwise authorized) host

        * A client attempted to select an event type that another client
          has already selected, and, that at most, one client can select
          at a time

     An ACCESS-ERROR is a special case of the more general
     REQUEST-ERROR (*note request-error::).

 -- Condition: alloc-error
     The server failed to allocate the requested resource or server
     memory.

     An ALLOC-ERROR is a special case of the more general REQUEST-ERROR
     (*note request-error::).

 -- Condition: atom-error
     A value for an _atom_ argument does not name a defined atom.

     An ATOM-ERROR is a special case of the more general REQUEST-ERROR
     (*note request-error::).

 -- Condition: closed-display
     The CLOSED-DISPLAY condition is signaled when trying to read or
     write a closed display (that is, CLOSE-DISPLAY has been called on
     the DISPLAY object, or a server-disconnect occurred). The
     CLOSED-DISPLAY object is reported with the error.

     A CLOSED-DISPLAY condition is a special case of the more general
     X-ERROR (*note x-error::).

 -- Condition: colormap-error
     A value for a _colormap_ argument does not name a defined colormap.

     A COLORMAP-ERROR is a special case of the more general
     RESOURCE-ERROR (*note resource-error::).

 -- Condition: connection-failure
     Signaled when an X11 server refuses a connection. The following
     items are reported along with the error:
        * _major-version_ - The major version of the X server code.

        * _minor-version_ - The minor version of the X server code.

        * _host_ - The host name for the X server.

        * _display_ - The display on which the error occurred.

        * _reason_ - A string indicating why the connection failed.

     A CONNECTION-FAILURE is a special case of the more general X-ERROR
     (*note x-error::).

 -- Condition: cursor-error
     A value for a _cursor_ argument does not name a defined cursor.

     A CURSOR-ERROR is a special case of the more general
     RESOURCE-ERROR (*note resource-error::).

 -- Condition: device-busy
     Signaled by (`setf' (POINTER-MAPPING _display_) MAPPING) when the
     SET-POINTER-MAPPING request returns a busy status. A similar
     condition occurs in SET-MODIFIER-MAPPING, but in this case, it
     returns a boolean indicating success, rather than signaling an
     error.  The DEVICE-BUSY condition returns the display object as
     part of the error.

     A DEVICE-BUSY condition is a special case of the more general
     X-ERROR (*note x-error::).

 -- Condition: drawable-error
     A value for a _drawable_ argument does not name a defined window
     or pixmap.

     A DRAWABLE-ERROR is a special case of the more general
     RESOURCE-ERROR (*note resource-error::).

 -- Condition: font-error
     A value for a _font_ or _gcontext_ argument does not name a
     defined font.

     A FONT-ERROR is a special case of the more general RESOURCE-ERROR
     (*note resource-error::).

 -- Condition: gcontext-error
     A value for a _gcontext_ argument does not name a defined GContext.

     A GCONTEXT-ERROR is a special case of the more general
     RESOURCE-ERROR (*note resource-error::).

 -- Condition: id-choice-error
     The value chosen for a resource identifier is either not included
     in the range assigned to the client or is already in use. Under
     normal circumstances, this cannot occur and should be considered a
     server or CLX library error.

     An ID-CHOICE-ERROR is a special case of the more general
     RESOURCE-ERROR (*note resource-error::).

 -- Condition: implementation-error
     The server does not implement some aspect of the request. A server
     that generates this error for a core request is deficient. As such,
     this error is not listed for any of the requests.  However, clients
     should be prepared to receive such errors and either handle or
     discard them.

     An IMPLEMENTATION-ERROR is a special case of the more general
     RESOURCE-ERROR (*note resource-error::).

 -- Condition: length-error
     The length of a request is shorter or longer than that minimally
     required to contain the arguments. This usually means an internal
     CLX error.

     A LENGTH-ERROR is a special case of the more general
     RESOURCE-ERROR (*note resource-error::).

 -- Condition: lookup-error
     CLX has the option of caching different resource types (see
     *CLX-CACHED-TYPES*) in a hash table by resource ID. When looking
     up an object in the hash table, if the type of the object is
     wrong, a LOOKUP-ERROR is signaled.

     For example: The cursor with ID 123 is interned in the hash table.
     An event is received with a field for window 123. When 123 is
     looked up in the hash table, a cursor is found.  Since a window was
     expected, a LOOKUP-ERROR is signaled. This error indicates a
     problem with the extension code being used. The following items are
     reported along with the error:
        * _id_ - The resource ID.

        * _display_ - The display being used.

        * _type_ - The resource type.

        * _object_ - The RESOURCE object.

     A LOOKUP-ERROR is a special case of the more general X-ERROR
     (*note x-error::).

 -- Condition: match-error
     In a graphics request, the root and depth of the GContext does not
     match that of the drawable. An :INPUT-ONLY window is used as a
     drawable. Some argument or pair of arguments has the correct type
     and range but fails to match in some other way required by the
     request. An :INPUT-ONLY window locks this attribute. The values do
     not exist for an :INPUT-ONLY window.

     A MATCH-ERROR is a special case of the more general REQUEST-ERROR
     (*note request-error::).

 -- Condition: missing-parameter
     One or more of the required keyword parameters is missing or NIL.
     The missing parameters are reported along with the error.

     A MISSING-PARAMETER condition is a special case of the more
     general X-ERROR (*note x-error::).

 -- Condition: name-error
     A font or color of the specified name does not exist.

     A NAME-ERROR is a special case of the more general REQUEST-ERROR
     (*note request-error::).

 -- Condition: pixmap-error
     A value for a _pixmap_ argument does not name a defined pixmap.

     A PIXMAP-ERROR is a special case of the more general
     RESOURCE-ERROR. (*note resource-error::.)

 -- Condition: reply-length-error (x-error) (slots*)
     The reply to a request has an unexpected length. The following
     items are reported along with the error:
        * _reply-length_ - The actual reply length.

        * _expected-length_ - The expected reply length.

        * _display_ - The display on which the error occurred.

     A REPLY-LENGTH-ERROR is a special case of the more general X-ERROR
     (*note x-error::).

 -- Condition: reply-timeout
     The *REPLY-TIMEOUT* parameter specifies the maximum number of
     seconds to wait for a request reply, or NIL to wait forever (the
     default). When a reply has not been received after *REPLY-TIMEOUT*
     seconds, the REPLY-TIMEOUT condition is signaled. The _timeout_
     _period_ and _display_ are reported along with the error.

     A REPLY-TIMEOUT condition is a special case of the more general
     X-ERROR (*note x-error::).

 -- Condition: request-error
     The following items are reported along with the error:

     The major or minor opcode does not specify a valid request.
        * _display_ - The display on which the error occurred.

        * _error-key_ - The error (sub)type.

        * _major_ - The major opcode.

        * _minor_ - The minor opcode.

        * _sequence_ - The actual sequence number.

        * _current-sequence_ - The current sequence number.

     A REQUEST-ERROR condition is a special case of the more general
     X-ERROR (*note x-error::).

 -- Condition: resource-error
     All X11 errors for incorrect resource IDs are built on top of
     RESOURCE-ERROR. These are COLORMAP-ERROR, CURSOR-ERROR,
     DRAWABLE-ERROR, FONT-ERROR, GCONTEXT-ERROR, ID-CHOICE-ERROR,
     PIXMAP-ERROR and WINDOW-ERROR. RESOURCE-ERROR is never signaled
     directly.

     A RESOURCE-ERROR is a special case of the more general
     REQUEST-ERROR (*note request-error::).

 -- Condition: sequence-error
     All X11 request replies contain the sequence number of their
     request. If a reply's sequence does not match the request count, a
     SEQUENCE-ERROR is signaled. A SEQUENCE-ERROR usually indicates a
     locking problem with a multi-processing Lisp. The following items
     are reported along with the error:
        * _display_ - The display on which the error occurred.

        * _req-sequence_ - The sequence number in the reply.

        * _msg-sequence_ - The current sequence number.

     A SEQUENCE-ERROR condition is a special case of the more general
     X-ERROR. (*note x-error::)

 -- Condition: server-disconnect
     The connection to the server was lost. The display on which the
     error occurred is reported along with the error.

     A SERVER-DISCONNECT condition is a special case of the more
     general X-ERROR. (*note x-error::)

 -- Condition: unexpected-reply
     A reply was found when none was expected. This indicates a problem
     with the extension code. The following items are reported along
     with the error:

    `display'
          The display on which the error occurred.

    `req-sequence'
          The sequence number in the reply.

    `msg-sequence'
          The current sequence number.

    `length'
          The message length of the reply.

     An UNEXPECTED-REPLY condition is a special case of the more general
     X-ERROR. (*note x-error::.)

 -- Condition: unknown-error (request-error) (error-code)
     An error was received from the server with an unknown error code.
     This indicates a problem with the extension code. The undefined
     error code is reported.

     An UNKNOWN-ERROR is a special case of the more general
     REQUEST-ERROR. (*note request-error::)

 -- Condition: value-error (request-error) (value)
     Some numeric value falls outside the range of values accepted by
     the request. Unless a specific range is specified for an argument,
     the full range defined by the argument's type is accepted. Any
     argument defined as a set of alternatives can generate this error.
     The erroneous value is reported.

     A VALUE-ERROR is a special case of the more general REQUEST-ERROR.
     (*note request-error::)

 -- Condition: window-error (resource-error)
     A value for a _window_ argument does not name a defined window.

     A WINDOW-ERROR is a special case of the more general
     RESOURCE-ERROR. (*note resource-error::.)

 -- Condition: x-error
     This is the most general error condition upon which all other
     conditions are defined.


File: clx.info,  Node: Undocumented,  Next: Glossary,  Prev: Errors,  Up: Top

18 Undocumented
***************

This section just lists all symbols exported from the XLIB package but
not documented in this manual.

 -- Function: bitmap-image &optional plist &rest patterns

 -- Function: character->keysyms character &optional display

 -- Function: character-in-map-p display character keymap
    DISPLAY
          A DISPLAY.


 -- Function: decode-core-error display event &optional arg

 -- Function: default-error-handler display error-key &rest key-vals
          &key asynchronous &allow-other-keys

 -- Function: default-keysym-index display keycode state

 -- Function: default-keysym-translate display state object

 -- Function: define-keysym object keysym &key lowercase translate
          modifiers mask display

 -- Function: define-keysym-set set first-keysym last-keysym

 -- Function: display-invoke-after-function display
     Explicitly invokes the _after-function_ of the display.  (see
     DISPLAY-AFTER-FUNCTION). This function is internally called after
     every request.

 -- Function: display-nscreens display

 -- Function: display-release-number object

 -- Function: event-handler handlers event-key

 -- Function: get-external-event-code display event

 -- Function: get-standard-colormap window property

 -- Function: get-wm-class window

 -- Function: icon-sizes window

 -- Function: iconify-window window screen

 -- Function: keysym->keycodes display keysym

 -- Function: keysym-in-map-p display keysym keymap

 -- Function: keysym-set keysym

 -- Function: mapping-notify display request start count
     Called on a :MAPPING-NOTIFY event to update the keyboard-mapping
     cache in _display_.

 -- Function: no-operation display

 -- Function: parse-color colormap spec

 -- Function: resource-database-timestamp database

 -- Function: resource-key stringable

 -- Function: rgb-colormaps window property

 -- Function: root-resources screen &key database key test test-not
     Returns a resource database containing the contents of the root
     window RESOURCE_MANAGER property for the given _screen_. If
     _screen_ is a display, then its default screen is used. If an
     existing _database_ is given, then resource values are merged with
     the _database_ and the modified _database_ is returned.

     _test_ and _test-not_ are predicates for selecting which resources
     are read. Arguments are a resource name list and a resource value.
     The _key_ function, if given, is called to convert a resource
     value string to the value given to _test_ or _test-not_.

 -- Function: rotate-cut-buffers display &optional (delta 1) (careful-p
          t)

 -- Function: set-access-control display enabled-p

 -- Function: set-close-down-mode display mode

 -- Function: set-pointer-mapping display map

 -- Function: set-selection-owner display selection owner &optional time

 -- Function: set-standard-colormap window property colormap base-pixel
          max-color mult-color

 -- Function: set-standard-properties window &rest options

 -- Function: set-wm-class window resource-name resource-class

 -- Function: set-wm-properties window &rest options &key name
          icon-name resource-name resource-class command client-machine
          hints normal-hints zoom-hints (user-specified-position-p nil
          usppp) (user-specified-size-p nil usspp)
          (program-specified-position-p nil psppp)
          (program-specified-size-p nil psspp) x y width height
          min-width min-height max-width max-height width-inc
          height-inc min-aspect max-aspect base-width base-height
          win-gravity input initial-state icon-pixmap icon-window
          icon-x icon-y icon-mask window-group

 -- Function: set-wm-resources database window &key write test test-not

 -- Function: transient-for window

 -- Function: translate-default src src-start src-end font dst dst-start

 -- Function: undefine-keysym object keysym &key display modifiers
          &allow-other-keys

 -- Function: visual-info-blue-mask object

 -- Function: visual-info-green-mask object

 -- Function: visual-info-red-mask object

 -- Function: window-cursor window

 -- Function: window-visual-info window

 -- Function: withdraw-window window screen

 -- Function: wm-client-machine window

 -- Function: wm-colormap-windows window

 -- Function: wm-command window

 -- Function: wm-hints window

 -- Function: wm-hints-flags object

 -- Function: wm-icon-name window

 -- Function: wm-name window

 -- Function: wm-normal-hints window

 -- Function: wm-protocols window

 -- Function: wm-resources database window &key key test test-not

 -- Function: wm-zoom-hints window


File: clx.info,  Node: Glossary,  Next: Function Index,  Prev: Undocumented,  Up: Top

Anhang A Glossary
*****************

access control list
     X maintains a list of hosts from which client programs can be run.
     By default, only programs on the local host can use the display,
     plus any hosts specified in an initial list read by the server.
     This _access control list_ can be changed by clients on the local
     host. Some server implementations can also implement other
     authorization mechanisms in addition to or in place of this
     mechanism. The action of this mechanism can be conditional based
     on the authorization protocol name and data received by the server
     at connection setup.

action
     A function that is designed to handle an input event. CLUE input
     processing consists of matching an event with an event
     specification found in a contact's EVENT-TRANSLATIONS slot and
     then calling actions associated with the matching event
     specification.

active grab
     A grab is _active_ when the pointer or keyboard is actually owned
     by the single grabbing client.

ancestors
     If W is an inferior of A, then A is an _ancestor_ of W.

atom
     A unique ID corresponding to a string name. Atoms are used to
     identify properties, types, and selections.

backing store
     When a server maintains the contents of a window, the off-screen
     saved pixels are known as a _backing store_.

before action
     An action of a CONTACT-DISPLAY that is called when an event is
     dispatched to a contact, but before any other contact input
     processing is performed.

bit gravity
     When a window is resized, the contents of the window are not
     necessarily discarded. It is possible to request the server to
     relocate the previous contents to some region of the window. This
     attraction of window contents for some location of a window is
     known as _bit_ _gravity_.

bitmap
     A pixmap of depth one.

button grabbing
     Buttons on the pointer can be passively _grabbed_ by a client.
     When the button is pressed, the pointer is then actively grabbed
     by the client.

byte order
     For image (pixmap/bitmap) data, byte order is defined by the
     server, and clients with different native byte ordering must swap
     bytes as necessary. For all other parts of the protocol, the byte
     order is defined by the client, and the server swaps bytes as
     necessary.

callback
     A function that represents a connection between a contact and the
     rest of an application program. A contact calls a callback
     function in order to report the results of the user interface
     component that it represents.

children
     First-level subwindows of a window.

class event
     Event translations that belong to all instances of a contact
     class. A class event TRANSLATIONS translation is created by the
     DEFEVENT macro.

class resources
     Resources defined for each instance of a contact class. Also see
     constraint resources.

click
     A :BUTTON-PRESS event followed immediately by a :BUTTON-RELEASE
     event for the same button, with no intervening change in pointer
     position or modifier key state.

client
     An application program connects to the window system server by some
     interprocess communication (IPC) path, such as a TCP connection or
     a shared memory buffer. This program is referred to as a _client_
     of the window system server. More precisely, the client is the IPC
     path itself. A program with multiple paths open to the server is
     viewed as multiple clients by the protocol. Resource lifetimes are
     controlled by connection lifetimes, not by program lifetimes.

clipping regions
     In a graphics context, a bitmap or list of rectangles can be
     specified to restrict output to a particular region of the window.
     The image defined by the bitmap or rectangles is called a _clipping
     region_.

colormap
     A set of entries defining color values. The colormap associated
     with a window is used to display the contents of the window. Each
     pixel value indexes the colormap to produce RGB values that drive
     the guns of a monitor. Depending on hardware limitations, one or
     more colormaps can be installed at one time, such that windows
     associated with those maps display with correct colors.

composite
     A subclass of CONTACT representing contacts that are the parents
     of other contacts. A composite provides geometry management and
     input focus management services for the contacts that are its
     children.

complete resource class
     A list of symbols containing the class of the contact, the class of
     the contact's PARENT (and so on), and the class of the
     CONTACT-DISPLAY to which the contact belongs.  The complete
     resource class is one of the two items used as a key by a CLUE
     application in order to access a contact resource value in a
     resource database.

complete resource name
     A list of symbols containing the NAME of the contact, the NAME of
     the contact's PARENT (and so on), and the name of the
     CONTACT-DISPLAY to which the contact belongs. The complete
     resource name is one of the two items used as a key by a CLUE
     application in order to access a contact resource value in a
     resource database.

connection
     The IPC path between the server and client program. A client
     program typically has one connection to the server over which
     requests and events are sent.

constraint resources
     Resources defined for each child belonging to a member of a
     composite class.  Constraint resources are typically used to
     control the parent's geometry management policy.  Also see class
     resources.

contact
     The basic CLUE object for programming a user interface.

contact-display
     The CLUE object type that represents a connection to an X server
     and that supports an event loop for application input.

contact initialization
     The process of collecting initial values for all contact
     attributes. No server resources (windows and so on) are actually
     allocated until contact realization.

contact realization
     The process of allocating contact resources. This process completes
     contact creation.

containment
     A window contains the pointer if the window is viewable and the hot
     spot of the cursor is within a visible region of the window or a
     visible region of one of its inferiors. The border of the window is
     included as part of the window for containment. The pointer is in a
     window if the window contains the pointer but no inferior contains
     the pointer.

content
     The single child of a shell. The basic geometry management policy
     implemented by the SHELL class constrains a shell and its content
     to have the same width and height; size changes to one are
     automatically applied to the other.

coordinate system
     The coordinate system has x horizontal and y vertical, with the
     origin [0, 0] at the upper left. Coordinates are discrete and are
     in terms of pixels. Each window and pixmap has its own coordinate
     system. For a window, the origin is at the inside upper left,
     inside the border.

cursor
     The visible shape of the pointer on a screen. It consists of a
     hot-spot, a source bitmap, a shape bitmap, and a pair of colors.
     The cursor defined for a window controls the visible appearance
     when the pointer is in that window.

depth
     The depth of a window or pixmap is number of bits per pixel it
     has. The depth of a graphics context is the depth of the drawables
     it can be used in conjunction with for graphics output.

descendant
     If W is an inferior of A, then W is a _descendant_ of A.

device
     Keyboards, mice, tablets, track-balls, button boxes, and so forth,
     are all collectively known as input _devices_. The core protocol
     only deals with two devices: the keyboard and the pointer.

direct color
     A class of colormap in which a pixel value is decomposed into three
     separate subfields for indexing. One subfield indexes an array to
     produce red intensity values, the second subfield indexes a second
     array to produce blue intensity values, and the third subfield
     indexes a third array to produce green intensity values. The RGB
     values can be changed dynamically.

dispatching an event
     The process of finding the appropriate contact and its actions.

double-click
     A sequence of two clicks of the same button in rapid succession.

drawable
     Both windows and pixmaps can be used as sources and destinations in
     graphics operations. These are collectively known as _drawables_.
     However, an :INPUT-ONLY window cannot be used as a source or
     destination in a graphics operation.

event
     Clients receive information asynchronously via _events_. These
     events can be either asynchronously generated from devices, or
     generated as side effects of client requests.  Events are grouped
     into types; events are never sent to a client by the server unless
     the client has specifically asked to be informed of that type of
     event, but clients can force events to be sent to other clients.
     Events are typically reported relative to a window.

event compression
     Ignoring (or compressing) certain redundant input events.
     Compression of redundant events is controlled by the class slots
     COMPRESS-EXPOSURES and COMPRESS-MOTION, which are shared by all
     instances of a contact class.

event loop
     The fundamental application control structure: wait for an event,
     figure out how to handle it, process the event, then go back and
     wait for the next one. In CLUE, the event loop is implemented
     using the PROCESS-NEXT-EVENT function.

event mask
     Events are requested relative to a window. The set of event types a
     client requests relative to a window are described using an _event
     mask_.

event propagation
     Device-related events _propagate_ from the source window to
     ancestor windows until some client has expressed interest in
     handling that type of event, or until the event is discarded
     explicitly.

event specification
     A notation for describing a certain sort of event. CLUE input
     processing consists of matching an event with an event
     specification found in a contact's EVENT-TRANSLATIONS slot and
     then calling actions associated with the matching event
     specification.

event synchronization
     Certain race conditions are possible when demultiplexing device
     events to clients (in particular deciding where pointer and
     keyboard events should be sent when in the middle of window
     management operations). The event synchronization mechanism allows
     synchronous processing of device events.

event source
     The smallest window containing the pointer is the _source_ of a
     device related event.

event translation
     The process of determining which contact action functions will be
     executed. An event translation is a list found in a contact's
     EVENT-TRANSLATIONS slot associating an event specification with
     one or more action names. Also see class event translations.

exposure event
     Servers do not guarantee to preserve the contents of windows when
     windows are obscured or reconfigured. _Exposure_ events are sent
     to clients to inform them when contents of regions of windows have
     been lost.

extension
     Named _extensions_ to the core protocol can be defined to extend
     the system. Extension to output requests, resources, and event
     types are all possible, and expected.

focus window
     Another term for the input focus.

font
     A matrix of glyphs (typically characters). The protocol does no
     translation or interpretation of character sets. The client simply
     indicates values used to index the glyph array. A font contains
     additional metric information to determine inter-glyph and
     inter-line spacing.

geometry management
     The process whereby a composite controls the geometrical
     properties of its child contacts; the composite is referred to as
     the geometry manager.

glyph
     An image, typically of a character, in a font.

grab
     Keyboard keys, the keyboard, pointer buttons, the pointer, and the
     server can be _grabbed_ for exclusive use by a client. In general,
     these facilities are not intended to be used by normal
     applications but are intended for various input and window
     managers to implement various styles of user interfaces.

gcontext
     Shorthand for graphics context.

graphics context
     Various information for graphics output is stored in a _graphics
     context_ (or gcontext), such as foreground pixel, background pixel,
     line width, clipping region, and so forth. A graphics context can
     only be used with drawables that have the same root and the same
     depth as the graphics context.

gray scale
     A degenerate case of pseudo color, in which the red, green, and
     blue values in any given colormap entry are equal, thus producing
     shades of gray. The gray values can be changed dynamically.

hot spot
     A cursor has an associated _hot spot_ that defines a point in the
     cursor that corresponds to the coordinates reported for the
     pointer.

identifier
     Each resource has an _identifier_, a unique value associated with
     it that clients use to name the resource. An identifier can be used
     over any connection to name the resource.

inferiors
     All of the subwindows nested below a window: the children, the
     children's children, and so on.

initialization
     See contact initialization.

input event
     See event.

input focus
     Normally a window defining the scope for processing of keyboard
     input. If a generated keyboard event would normally be reported to
     this window or one of its inferiors, the event is reported
     normally; otherwise, the event is reported with respect to the
     focus window. The input focus also can be set such that all
     keyboard events are discarded and that the focus window is
     dynamically taken to be the root window of whatever screen the
     pointer is on at each keyboard event.

input-only window
     A window that cannot be used for graphics requests. _input-only_
     windows are invisible, and can be used to control such things as
     cursors, input event generation, and grabbing.  _input-only_
     windows cannot have _input/output_ windows as inferiors.

input/output window
     The normal kind of opaque window, used for both input and output.
     Input/output windows can have both _input/output_ and input-only
     windows as inferiors.

insensitivity
     See sensitivity.

interactive-stream
     A contact subclass designed to integrate CLUE with the conventional
     stream-based I/O of Common Lisp.

key grabbing
     Keys on the keyboard can be passively _grabbed_ by a client. When
     the key is pressed, the keyboard is then actively grabbed by the
     client.

keyboard grabbing
     A client can actively _grab_ control of the keyboard, and key
     events will be sent to that client rather than the client to which
     the events would normally have been sent.

keysym
     An encoding of a symbol on a keycap on a keyboard.

managed
     A contact under geometry management control.

mapped
     A window is said to be _mapped_ if a map call has been performed
     on it. Unmapped windows and their inferiors are never viewable or
     visible.

modifier keys
     SHIFT, CONTROL, META, SUPER, HYPER, ALT, Compose, Apple, CAPS LOCK,
     Shift Lock, and similar keys are called _modifier keys_.

monochrome
     A special case of static gray, in which there are only two colormap
     entries.

obscure
     A window is _obscured_ if some other window obscures it. For
     example, window A obscures window B if:
        * Both windows are viewable :INPUT-OUTPUT windows

        * Window A is higher in the global stacking order than window B

        * The rectangle defined by the outside edges of window A
          intersects the rectangle defined by the outside edges of
          window B

     Notice that window borders are included in the calculation, and
     that a window can be obscured and yet still have visible regions.
     See occlude (there is a fine distinction between obscure and
     occlude).

occlude
     A window is _occluded_ if some other window occludes it. For
     example, window A occludes window B if:
        * Both windows are mapped

        * Window A is higher in the global stacking order than window B

        * The rectangle defined by the outside edges of window A
          intersects the rectangle defined by the outside edges of
          window B

     Notice that window borders are included in the calculation. See
     obscure (there is a fine distinction between occlude and obscure).

override-shell
     A subclass of SHELL used to override the window manager. This
     subclass contains pop-up menus and other temporary objects that the
     user can never resize and so on.

padding
     Some padding bytes are inserted in the data stream to maintain
     alignment of the protocol requests on natural boundaries. This
     increases ease of portability to some machine architectures.

parent window
     If C is a child of P, then P is the _parent_ of C.

passive grab
     Grabbing a key or button is a _passive grab_. The grab activates
     when the key or button is actually pressed.

pixel value
     An _n_-bit value, where _n_ is the number of bit planes used in
     (that is, the depth of) a particular window or pixmap. For a
     window, a pixel value indexes a colormap to derive an actual color
     to be displayed.

pixmap
     A three dimensional array of bits. A pixmap is normally thought of
     as a two dimensional array of pixels, where each pixel can be a
     value from 0 to (2_n_)-1, where _n_ is the depth (z axis) of the
     pixmap. A pixmap can also be thought of as a stack of _n_ bitmaps.

plane
     When a pixmap or window is thought of as a stack of bitmaps, each
     bitmap is called a _plane_ or _bit plane_.

plane mask
     Graphics operations can be restricted to only affect a subset of
     bit planes of a destination.  A _plane mask_ is a bit mask
     describing which planes are to be modified, and it is stored in a
     graphics context.

pointer
     The pointing device attached to the cursor and tracked on the
     screens.

pointer grabbing
     A client can actively _grab_ control of the pointer, and button
     and motion events will be sent to that client rather than the
     client to which the events would normally have been sent.

pointing device
     Typically a mouse or tablet, or some other device with effective
     dimensional motion.  There is only one visible cursor defined by
     the core protocol, and it tracks whatever pointing device is
     attached as the pointer.

pop-up
     One of the uses of a top-level shell (for example, a menu that
     pops up when a command button contact is activated). Setting the
     STATE of a shell to :MAPPED is sometimes referred to as _mapping_
     or _popping up_ the shell. Setting the STATE of a shell to
     :WITHDRAWN or :ICONIC is sometimes referred to as _unmapping_ or
     _popping down_ the shell.

property
     Windows can have associated _properties_, consisting of a name, a
     type, a data format, and some data. The protocol places no
     interpretation on properties; they are intended as a
     general-purpose naming mechanism for clients. For example, clients
     might share information such as resize hints, program names, and
     icon formats with a window manager via properties.

property list
     The list of properties that have been defined for a window.

pseudo color
     A class of colormap in which a pixel value indexes the colormap to
     produce independent red, green, and blue values. That is, the
     colormap is viewed as an array of triples (RGB values). The RGB
     values can be changed dynamically.

realization
     See contact realization.

redirecting control
     Window managers (or client programs) may choose to enforce window
     layout policy in various ways. When a client attempts to change the
     size or position of a window, the operation can be _redirected_ to
     a specified client, rather than the operation actually being
     performed.

reply
     Information requested by a client program is sent back to the
     client with a _reply_. Both events and replies are multiplexed on
     the same connection. Most requests do not generate replies.
     However, some requests generate multiple replies.

representation type
     The type of representation of a resource value. For example, a
     color value might be represented either as a namestring ("red"), a
     pixel value, an RGB triplet, an HSV triplet, and so on.

request
     A command to the server is called a _request_. It is a single
     block of data sent over a connection.

resource
     A value of the user interface that can be changed by the user in a
     resource database via CLX functions ADD-RESOURCE, GET-RESOURCE,
     and so forth. See server resource.

resource class, complete
     See complete resource class.

resource database
     Conceptually, a set of resource name/value pairs (or resource
     bindings). CLX defines functions for storing and retrieving
     interface resources from a resource database.

resource name, complete
     See complete resource name.

RGB values
     _Red_, _green_, and _blue_ intensity values used to define color.
     These values are always represented as 16-bit unsigned numbers,
     with zero being the minimum intensity and 65535 being the maximum
     intensity. The values are scaled by the server to match the
     display hardware.

root
     A special composite contact used to represent an entire display
     screen.

root window
     Each screen has a _root window_ covering it. It cannot be
     reconfigured or unmapped, but otherwise acts as a full-fledged
     window. A root window has no parent.

save set
     The _save set_ of a client is a list of other client's windows
     that, if they are inferiors of one of the client's windows at
     connection close, should not be destroyed and that should be
     remapped if it is unmapped. Save sets are typically used by window
     managers to avoid lost windows if the manager should terminate
     abnormally.

scanline
     A list of pixel or bit values viewed as a horizontal row (all
     values having the same y coordinate) of an image, with the values
     ordered by increasing x coordinate.

scanline order
     An image represented in _scanline order_ contains scanlines
     ordered by increasing y coordinate.

screen
     A server can provide several independent _screens_, which
     typically have physically independent monitors. This would be the
     expected configuration when there is only a single keyboard and
     pointer shared among the screens.

selection
     A _selection_ can be thought of as an indirect property with
     dynamic type. That is, rather than having the property stored in
     the server, it is maintained by some client (the _owner_).  A
     selection is global in nature, being thought of as belonging to the
     user (but maintained by clients), rather than being private to a
     particular window subhierarchy or a particular set of clients. When
     a client asks for the contents of a selection, it specifies a
     selection _target type_. This target type can be used to control
     the transmitted representation of the contents.

     For example, if the selection is "the last thing the user clicked
     on" and that is currently an image, then the target type might
     specify whether the contents of the image should be sent in XY
     Format or Z Format. The target type can also be used to control the
     class of contents transmitted; that is, asking for the looks
     (fonts, line spacing, indentation, and so forth) of a paragraph
     selection, rather than the text of the paragraph. The target type
     can also be used for other purposes; the semantics is not
     constrained by the protocol.

sensitivity
     A condition in which a user interface component of an application
     will accept input.  Conversely, when a contact is insensitive,
     events of particular types are not dispatched to the contact and
     are ignored.

server
     The _server_ provides the basic windowing mechanism. It handles
     IPC connections from clients, demultiplexes graphics requests onto
     the screens, and multiplexes input back to the appropriate clients.

server grabbing
     The server can be _grabbed_ by a single client for exclusive use.
     This prevents processing of any requests from other client
     connections until the grab is complete. This is typically only a
     transient state for such things as rubber-banding and pop-up
     menus, or to execute requests indivisibly.

server resource
     Windows, pixmaps, cursors, fonts, gcontexts, and colormaps are
     known as resources.  They all have unique identifiers associated
     with them for naming purposes. The lifetime of a resource is
     bounded by the lifetime of the connection over which the resource
     was created. See resource.

shell
     A composite that handles the duties required by standard
     conventions for top-level X windows.

sibling
     Children of the same parent window are known as _sibling_ windows.

static color
     A degenerate case of pseudo color in which the RGB values are
     predefined and read-only.

static gray
     A degenerate case of gray scale in which the gray values are
     predefined and read-only.  The values are typically (near-)linear
     increasing ramps.

stacking order
     Sibling windows can _stack_ on top of each other. Windows above
     both obscure and occlude lower windows. This is similar to paper
     on a desk. The relationship between sibling windows is known as the
     _stacking order_.

state
     A slot of CONTACT that controls the visual effect of the contact.

stipple
     A bitmap that is used to tile a region to serve as an additional
     clip mask for a fill operation with the foreground color.

tile
     A pixmap can be replicated in two dimensions to _tile_ a region.
     The pixmap itself is also known as a tile.

timer
     A CLUE object that provides support for animation and other types
     of time-sensitive user interfaces. A timer causes :TIMER events to
     be dispatched to a specific contact for processing.

timestamp
     A time value, expressed in milliseconds, typically since the last
     server reset. Timestamp values wrap around (after about 49.7
     days). The server, given its current time is represented by
     timestamp T, always interprets timestamps from clients by treating
     half of the timestamp space as being earlier in time than T and
     half of the timestamp space as being later in time than T. One
     timestamp value (named CurrentTime) is never generated by the
     server; this value is reserved for use in requests to represent
     the current server time.

top-level contact
     A contact whose parent is a root. A top-level contact is usually a
     composite at the top of a hierarchy of other contacts created by an
     application program.

top-level-session
     A subclass of SHELL that is used to communicate with a session
     manager.

top-level-shell
     A subclass of SHELL that provides full window manager interaction.

transient-shell
     A subclass of SHELL that a window manager typically will unmap
     when its owner becomes unmapped or iconified and will not allow to
     be individually iconified.

true color
     A degenerate case of direct color in which the subfields in the
     pixel value directly encode the corresponding RGB values. That is,
     the colormap has predefined read-only RGB values. The values are
     typically (near-)linear increasing ramps.

type
     An arbitrary atom used to identify the interpretation of property
     data. Types are completely uninterpreted by the server; they are
     solely for the benefit of clients.

unmanaged
     A contact that is not under geometry management control.

user interface
     A set of abstract interface objects used to control the dialog
     between an application and its human user.

viewable
     A window is _viewable_ if it and all of its ancestors are mapped.
     This does not imply that any portion of the window is actually
     visible. Graphics requests can be performed on a window when it is
     not viewable, but output will not be retained unless the server is
     maintaining backing store.

visible
     A region of a window is _visible_ if someone looking at the screen
     can actually see it; that is, the window is viewable and the
     region is not occluded by any other window.

window gravity
     When windows are resized, subwindows can be repositioned
     automatically relative to some position in the window. This
     attraction of a subwindow to some part of its parent is known as
     _window gravity_.

window manager
     Manipulation of windows on the screen, and much of the user
     interface (policy) is typically provided by a _window manager_
     client.

window manager shell
     A subclass of SHELL called WM-SHELL that interacts with the window
     manager.

XY Format
     The data for a pixmap is said to be in _XY Format_ if it is
     organized as a set of bitmaps representing individual bit planes,
     with the planes appearing from most to least significant in bit
     order.

Z Format
     The data for a pixmap is said to be in _Z Format_ if it is
     organized as a set of pixel values in scanline order.


File: clx.info,  Node: Function Index,  Next: Type Index,  Prev: Glossary,  Up: Top

Anhang B Function Index
***********************

 [index ]
* Menu:

* access-control:                        Managing Host Access.
                                                              (line  24)
* access-hosts:                          Managing Host Access.
                                                              (line  39)
* activate-screen-saver:                 Screen Saver.        (line  27)
* add-access-host:                       Managing Host Access.
                                                              (line  59)
* add-resource:                          Basic Resource Database Functions.
                                                              (line  26)
* add-to-save-set:                       Client Termination.  (line  99)
* alloc-color:                           Allocating Colors.   (line  11)
* alloc-color-cells:                     Allocating Colors.   (line  39)
* alloc-color-planes:                    Allocating Colors.   (line  96)
* allow-events:                          Releasing Queued Events.
                                                              (line  13)
* atom-name:                             Atoms (Atoms).       (line  68)
* bell:                                  Keyboard Control.    (line  16)
* bitmap-image:                          Undocumented.        (line  10)
* change-active-pointer-grab:            Grabbing the Pointer.
                                                              (line 124)
* change-keyboard-control:               Keyboard Control.    (line  37)
* change-keyboard-mapping:               Keyboard Mapping.    (line  12)
* change-pointer-control:                Pointer Control.     (line  14)
* change-property:                       Properties.          (line  32)
* char-ascent:                           Chracter Attributes. (line  10)
* char-attributes:                       Chracter Attributes. (line  24)
* char-descent:                          Chracter Attributes. (line  39)
* char-left-bearing:                     Chracter Attributes. (line  54)
* char-right-bearing:                    Chracter Attributes. (line  70)
* char-width:                            Chracter Attributes. (line  87)
* character->keysyms:                    Undocumented.        (line  12)
* character-in-map-p:                    Undocumented.        (line  14)
* circulate-window-down:                 Stacking Order.      (line  16)
* circulate-window-up:                   Stacking Order.      (line  32)
* clear-area:                            Area and Plane Operations.
                                                              (line  14)
* close-display:                         Closing the Display. (line   9)
* close-down-mode:                       Client Termination.  (line 109)
* close-font:                            Opening Fonts.       (line  25)
* color-blue:                            Color Functions.     (line  37)
* color-green:                           Color Functions.     (line  46)
* color-p:                               Color Functions.     (line  55)
* color-red:                             Color Functions.     (line  63)
* color-rgb:                             Color Functions.     (line  72)
* colormap-display:                      Colormap Attributes. (line  10)
* colormap-equal:                        Colormap Attributes. (line  20)
* colormap-id:                           Colormap Attributes. (line  29)
* colormap-p:                            Colormap Attributes. (line  39)
* colormap-plist:                        Colormap Attributes. (line  46)
* convert-selection:                     Selections.          (line  88)
* copy-area:                             Area and Plane Operations.
                                                              (line  54)
* copy-colormap-and-free:                Creating Colormaps.  (line  40)
* copy-gcontext:                         Copying Graphics Contexts.
                                                              (line  11)
* copy-gcontext-components:              Copying Graphics Contexts.
                                                              (line  23)
* copy-image:                            Image Functions.     (line 124)
* copy-plane:                            Area and Plane Operations.
                                                              (line 113)
* create-colormap:                       Creating Colormaps.  (line   9)
* create-cursor:                         Creating Cursors.    (line  11)
* create-gcontext:                       Creating Graphics Contexts.
                                                              (line  14)
* create-glyph-cursor:                   Creating Cursors.    (line  58)
* create-image:                          Image Functions.     (line  20)
* create-pixmap:                         Pixmaps.             (line  26)
* create-window:                         Creating Windows.    (line  15)
* cursor-display:                        Cursor Attributes.   (line  10)
* cursor-equal:                          Cursor Attributes.   (line  20)
* cursor-id:                             Cursor Attributes.   (line  29)
* cursor-p:                              Cursor Attributes.   (line  40)
* cursor-plist:                          Cursor Attributes.   (line  47)
* declare-event:                         Declaring Event Types.
                                                              (line  14)
* decode-core-error:                     Undocumented.        (line  19)
* default-error-handler:                 Undocumented.        (line  22)
* default-keysym-index:                  Undocumented.        (line  24)
* default-keysym-translate:              Undocumented.        (line  26)
* define-condition:                      Introduction (Errors).
                                                              (line  13)
* define-keysym:                         Undocumented.        (line  29)
* define-keysym-set:                     Undocumented.        (line  31)
* delete-property:                       Properties.          (line  82)
* delete-resource:                       Basic Resource Database Functions.
                                                              (line  44)
* destroy-subwindows:                    Destroying Windows.  (line  30)
* destroy-window:                        Destroying Windows.  (line  12)
* discard-current-event:                 Managing the Event Queue.
                                                              (line  40)
* discard-font-info:                     Opening Fonts.       (line  38)
* display-after-function:                Managing the Output Buffer.
                                                              (line  22)
* display-authorization-data:            Display Attributes.  (line  10)
* display-authorization-name:            Display Attributes.  (line  24)
* display-bitmap-format:                 Display Attributes.  (line  42)
* display-byte-order:                    Display Attributes.  (line  53)
* display-display:                       Display Attributes.  (line  75)
* display-error-handler:                 Display Attributes.  (line  85)
* display-extended-max-request-length:   BIG-REQUESTS - Big Requests Extension.
                                                              (line   7)
* display-finish-output:                 Managing the Output Buffer.
                                                              (line  45)
* display-force-output:                  Managing the Output Buffer.
                                                              (line  38)
* display-image-lsb-first-p:             Display Attributes.  (line 135)
* display-invoke-after-function:         Undocumented.        (line  33)
* display-keycode-range:                 Display Attributes.  (line 153)
* display-max-keycode:                   Display Attributes.  (line 166)
* display-max-request-length:            Display Attributes.  (line 178)
* display-min-keycode:                   Display Attributes.  (line 193)
* display-motion-buffer-size:            Display Attributes.  (line 205)
* display-nscreens:                      Undocumented.        (line  38)
* display-p:                             Display Attributes.  (line 219)
* display-pixmap-formats:                Display Attributes.  (line 225)
* display-plist:                         Display Attributes.  (line 240)
* display-protocol-major-version:        Display Attributes.  (line 251)
* display-protocol-minor-version:        Display Attributes.  (line 267)
* display-protocol-version:              Display Attributes.  (line 278)
* display-release-number:                Undocumented.        (line  40)
* display-resource-id-base:              Display Attributes.  (line 291)
* display-resource-id-mask:              Display Attributes.  (line 303)
* display-roots:                         Display Attributes.  (line 331)
* display-vendor:                        Display Attributes.  (line 341)
* display-vendor-name:                   Display Attributes.  (line 351)
* display-version-number:                Display Attributes.  (line 361)
* display-xid:                           Display Attributes.  (line 371)
* dpms-capable:                          DPMS - The X11 Display Power Management Signaling Extension.
                                                              (line  24)
* dpms-disable:                          DPMS - The X11 Display Power Management Signaling Extension.
                                                              (line  69)
* dpms-enable:                           DPMS - The X11 Display Power Management Signaling Extension.
                                                              (line  61)
* dpms-force-level:                      DPMS - The X11 Display Power Management Signaling Extension.
                                                              (line  80)
* dpms-get-timeouts:                     DPMS - The X11 Display Power Management Signaling Extension.
                                                              (line  36)
* dpms-get-version:                      DPMS - The X11 Display Power Management Signaling Extension.
                                                              (line   8)
* dpms-info:                             DPMS - The X11 Display Power Management Signaling Extension.
                                                              (line  90)
* dpms-set-timeouts:                     DPMS - The X11 Display Power Management Signaling Extension.
                                                              (line  45)
* draw-arc:                              Drawing Arcs.        (line  15)
* draw-arcs:                             Drawing Arcs.        (line  83)
* draw-glyph:                            Drawing Text.        (line  49)
* draw-glyphs:                           Drawing Text.        (line 105)
* draw-image-glyph:                      Drawing Text.        (line 165)
* draw-image-glyphs:                     Drawing Text.        (line 225)
* draw-line:                             Drawing Lines.       (line  17)
* draw-lines:                            Drawing Lines.       (line  44)
* draw-point:                            Drawing Points.      (line  18)
* draw-points:                           Drawing Points.      (line  32)
* draw-rectangle:                        Drawing Rectangles.  (line  20)
* draw-rectangles:                       Drawing Rectangles.  (line  48)
* draw-segments:                         Drawing Lines.       (line 105)
* drawable-border-width:                 Window Attributes.   (line  12)
* drawable-depth:                        Window Attributes.   (line  37)
* drawable-display:                      Drawables.           (line  11)
* drawable-equal:                        Drawables.           (line  18)
* drawable-height:                       Window Attributes.   (line  47)
* drawable-id:                           Drawables.           (line  27)
* drawable-p:                            Drawables.           (line  37)
* drawable-plist:                        Drawables.           (line  44)
* drawable-root:                         Window Hierarchy.    (line  15)
* drawable-width:                        Window Attributes.   (line  52)
* drawable-x:                            Window Attributes.   (line  89)
* drawable-y:                            Window Attributes.   (line  94)
* enable-big-requests:                   BIG-REQUESTS - Big Requests Extension.
                                                              (line   9)
* event-case:                            Processing Events.   (line  85)
* event-cond:                            Processing Events.   (line 153)
* event-handler:                         Undocumented.        (line  42)
* event-listen:                          Managing the Event Queue.
                                                              (line  55)
* find-atom:                             Atoms (Atoms).       (line  82)
* font-all-chars-exist-p:                Font Attributes.     (line  10)
* font-ascent:                           Font Attributes.     (line  22)
* font-default-char:                     Font Attributes.     (line  34)
* font-descent:                          Font Attributes.     (line  45)
* font-direction:                        Font Attributes.     (line  57)
* font-display:                          Font Attributes.     (line  70)
* font-equal:                            Font Attributes.     (line  80)
* font-id:                               Font Attributes.     (line  89)
* font-max-byte1:                        Font Attributes.     (line  99)
* font-max-byte2:                        Font Attributes.     (line 111)
* font-max-char:                         Font Attributes.     (line 123)
* font-min-byte1:                        Font Attributes.     (line 134)
* font-min-byte2:                        Font Attributes.     (line 146)
* font-min-char:                         Font Attributes.     (line 158)
* font-name:                             Font Attributes.     (line 169)
* font-p:                                Font Attributes.     (line 178)
* font-path:                             Listing Fonts.       (line  22)
* font-plist:                            Font Attributes.     (line 185)
* font-properties:                       Font Attributes.     (line 196)
* font-property:                         Font Attributes.     (line 207)
* force-gcontext-changes:                Graphics Context Cache.
                                                              (line  10)
* free-colormap:                         Creating Colormaps.  (line  64)
* free-colors:                           Allocating Colors.   (line 154)
* free-cursor:                           Creating Cursors.    (line 105)
* free-gcontext:                         Destroying Graphics Contexts.
                                                              (line   9)
* free-pixmap:                           Pixmaps.             (line  48)
* gcontext-arc-mode:                     Graphics Context Attributes.
                                                              (line  13)
* gcontext-background:                   Graphics Context Attributes.
                                                              (line  31)
* gcontext-cache-p:                      Graphics Context Attributes.
                                                              (line  46)
* gcontext-cap-style:                    Graphics Context Attributes.
                                                              (line  58)
* gcontext-clip-mask:                    Graphics Context Attributes.
                                                              (line 179)
* gcontext-clip-x:                       Graphics Context Attributes.
                                                              (line 232)
* gcontext-clip-y:                       Graphics Context Attributes.
                                                              (line 249)
* gcontext-dash-offset:                  Graphics Context Attributes.
                                                              (line 265)
* gcontext-dashes:                       Graphics Context Attributes.
                                                              (line 283)
* gcontext-display:                      Graphics Context Attributes.
                                                              (line 315)
* gcontext-equal:                        Graphics Context Attributes.
                                                              (line 325)
* gcontext-exposures:                    Graphics Context Attributes.
                                                              (line 336)
* gcontext-fill-rule:                    Graphics Context Attributes.
                                                              (line 353)
* gcontext-fill-style:                   Graphics Context Attributes.
                                                              (line 392)
* gcontext-font:                         Graphics Context Attributes.
                                                              (line 440)
* gcontext-foreground:                   Graphics Context Attributes.
                                                              (line 470)
* gcontext-function:                     Graphics Context Attributes.
                                                              (line 484)
* gcontext-id:                           Graphics Context Attributes.
                                                              (line 536)
* gcontext-join-style:                   Graphics Context Attributes.
                                                              (line 546)
* gcontext-line-style:                   Graphics Context Attributes.
                                                              (line 576)
* gcontext-line-width:                   Graphics Context Attributes.
                                                              (line 605)
* gcontext-p:                            Graphics Context Attributes.
                                                              (line 672)
* gcontext-plane-mask:                   Graphics Context Attributes.
                                                              (line 679)
* gcontext-plist:                        Graphics Context Attributes.
                                                              (line 706)
* gcontext-stipple:                      Graphics Context Attributes.
                                                              (line 718)
* gcontext-subwindow-mode:               Graphics Context Attributes.
                                                              (line 757)
* gcontext-tile:                         Graphics Context Attributes.
                                                              (line 781)
* gcontext-ts-x:                         Graphics Context Attributes.
                                                              (line 819)
* gcontext-ts-y:                         Graphics Context Attributes.
                                                              (line 831)
* get-external-event-code:               Undocumented.        (line  44)
* get-image:                             Image Functions.     (line 167)
* get-property:                          Properties.          (line  94)
* get-raw-image:                         Direct Image Transfer.
                                                              (line  12)
* get-resource:                          Resource Access Functions.
                                                              (line  11)
* get-search-resource:                   Resource Access Functions.
                                                              (line  65)
* get-search-table:                      Resource Access Functions.
                                                              (line  44)
* get-standard-colormap:                 Undocumented.        (line  46)
* get-wm-class:                          Undocumented.        (line  48)
* global-pointer-position:               Pointer Position.    (line  52)
* grab-button:                           Grabbing a Button.   (line  11)
* grab-key:                              Grabbing a Key.      (line  11)
* grab-keyboard:                         Grabbing the Keyboard.
                                                              (line  11)
* grab-pointer:                          Grabbing the Pointer.
                                                              (line  11)
* grab-server:                           Grabbing the Server. (line  15)
* handler-function:                      Processing Events.   (line  12)
* icon-sizes:                            Undocumented.        (line  50)
* iconify-window:                        Undocumented.        (line  52)
* image-blue-mask:                       Basic Images.        (line  10)
* image-depth:                           Basic Images.        (line  22)
* image-green-mask:                      Basic Images.        (line  32)
* image-height:                          Basic Images.        (line  43)
* image-name:                            Basic Images.        (line  52)
* image-plist:                           Basic Images.        (line  62)
* image-red-mask:                        Basic Images.        (line  72)
* image-width:                           Basic Images.        (line  83)
* image-x-hot:                           Basic Images.        (line  92)
* image-xy-bitmap-list:                  XY-Format Images.    (line  12)
* image-y-hot:                           Basic Images.        (line 103)
* image-z-bits-per-pixel:                Z-Format Images.     (line  11)
* image-z-pixarray:                      Z-Format Images.     (line  23)
* input-focus:                           Managing Input Focus.
                                                              (line  56)
* install-colormap:                      Installing Colormaps.
                                                              (line  13)
* installed-colormaps:                   Installing Colormaps.
                                                              (line  28)
* intern-atom:                           Atoms (Atoms).       (line  96)
* keyboard-control:                      Keyboard Control.    (line  99)
* keyboard-mapping:                      Keyboard Mapping.    (line  62)
* keycode->keysym:                       Using Keycodes and Keysyms.
                                                              (line  12)
* keysym->character:                     Using Keycodes and Keysyms.
                                                              (line  30)
* keysym->keycodes:                      Undocumented.        (line  54)
* keysym-in-map-p:                       Undocumented.        (line  56)
* keysym-set:                            Undocumented.        (line  58)
* kill-client:                           Client Termination.  (line 118)
* kill-temporary-clients:                Client Termination.  (line 136)
* list-extensions:                       Extensions (Extensions).
                                                              (line  27)
* list-font-names:                       Listing Fonts.       (line  46)
* list-fonts:                            Listing Fonts.       (line  70)
* list-properties:                       Properties.          (line 164)
* lookup-color:                          Finding Colors.      (line  14)
* make-color:                            Color Functions.     (line  25)
* make-event-keys:                       Data Types.          (line 391)
* make-event-mask:                       Data Types.          (line 399)
* make-resource-database:                Basic Resource Database Functions.
                                                              (line  20)
* make-state-keys:                       Data Types.          (line 702)
* make-state-mask:                       Data Types.          (line 715)
* map-resource:                          Basic Resource Database Functions.
                                                              (line  56)
* map-subwindows:                        Mapping Windows.     (line  61)
* map-window:                            Mapping Windows.     (line  34)
* mapping-notify:                        Undocumented.        (line  60)
* max-char-ascent:                       Font Attributes.     (line 221)
* max-char-attributes:                   Font Attributes.     (line 230)
* max-char-descent:                      Font Attributes.     (line 240)
* max-char-left-bearing:                 Font Attributes.     (line 250)
* max-char-right-bearing:                Font Attributes.     (line 260)
* max-char-width:                        Font Attributes.     (line 270)
* merge-resources:                       Basic Resource Database Functions.
                                                              (line  72)
* min-char-ascent:                       Font Attributes.     (line 279)
* min-char-attributes:                   Font Attributes.     (line 288)
* min-char-descent:                      Font Attributes.     (line 297)
* min-char-left-bearing:                 Font Attributes.     (line 306)
* min-char-right-bearing:                Font Attributes.     (line 315)
* min-char-width:                        Font Attributes.     (line 325)
* modifier-mapping:                      Keyboard Control.    (line 129)
* motion-events:                         Pointer Position.    (line  95)
* no-operation:                          Undocumented.        (line  64)
* open-default-display:                  Opening the Display. (line  45)
* open-display:                          Opening the Display. (line  14)
* open-font:                             Opening Fonts.       (line  10)
* parse-color:                           Undocumented.        (line  66)
* pixmap-display:                        Pixmaps.             (line  57)
* pixmap-equal:                          Pixmaps.             (line  67)
* pixmap-id:                             Pixmaps.             (line  76)
* pixmap-p:                              Pixmaps.             (line  87)
* pixmap-plist:                          Pixmaps.             (line  94)
* pointer-control:                       Pointer Control.     (line  35)
* pointer-mapping:                       Pointer Control.     (line  45)
* pointer-position:                      Pointer Position.    (line  69)
* process-event:                         Processing Events.   (line  40)
* put-image:                             Image Functions.     (line 213)
* put-raw-image:                         Direct Image Transfer.
                                                              (line  67)
* query-best-cursor:                     Cursor Functions.    (line  10)
* query-best-stipple:                    Graphics Context Attributes.
                                                              (line 843)
* query-best-tile:                       Graphics Context Attributes.
                                                              (line 863)
* query-colors:                          Finding Colors.      (line  33)
* query-extension:                       Extensions (Extensions).
                                                              (line  39)
* query-keymap:                          Keyboard Control.    (line 148)
* query-pointer:                         Pointer Position.    (line  10)
* query-tree:                            Window Hierarchy.    (line  25)
* queue-event:                           Managing the Event Queue.
                                                              (line  17)
* read-bitmap-file:                      Image Files.         (line  15)
* read-resources:                        Resource Database Files.
                                                              (line  13)
* recolor-cursor:                        Cursor Functions.    (line  29)
* remove-access-host:                    Managing Host Access.
                                                              (line  72)
* remove-from-save-set:                  Client Termination.  (line 152)
* render-add-glyph:                      Glyphs and Glyphsets.
                                                              (line  48)
* render-add-glyph-from-picture:         Glyphs and Glyphsets.
                                                              (line  78)
* render-composite-glyph:                Using glyphs.        (line   8)
* render-create-glyph-set:               Glyphs and Glyphsets.
                                                              (line  15)
* render-create-picture:                 The picture object.  (line  20)
* render-free-glyph-set:                 Glyphs and Glyphsets.
                                                              (line  39)
* render-free-glyphs:                    Glyphs and Glyphsets.
                                                              (line 116)
* render-free-picture:                   The picture object.  (line  78)
* render-reference-glyph-set:            Glyphs and Glyphsets.
                                                              (line  29)
* reparent-window:                       Window Hierarchy.    (line  49)
* reset-screen-saver:                    Screen Saver.        (line  34)
* resource-database-timestamp:           Undocumented.        (line  68)
* resource-key:                          Undocumented.        (line  70)
* rgb-colormaps:                         Undocumented.        (line  72)
* root-resources:                        Undocumented.        (line  74)
* rotate-cut-buffers:                    Undocumented.        (line  87)
* rotate-properties:                     Properties.          (line 176)
* screen-backing-stores:                 Screen Attributes.   (line  12)
* screen-black-pixel:                    Screen Attributes.   (line  25)
* screen-default-colormap:               Screen Attributes.   (line  35)
* screen-depths:                         Screen Attributes.   (line  50)
* screen-event-mask-at-open:             Screen Attributes.   (line  68)
* screen-height:                         Screen Attributes.   (line  78)
* screen-height-in-millimeters:          Screen Attributes.   (line  88)
* screen-max-installed-maps:             Screen Attributes.   (line 100)
* screen-min-installed-maps:             Screen Attributes.   (line 111)
* screen-p:                              Screen Attributes.   (line 122)
* screen-plist:                          Screen Attributes.   (line 128)
* screen-root:                           Screen Attributes.   (line 140)
* screen-root-depth:                     Screen Attributes.   (line 152)
* screen-root-visual:                    Screen Attributes.   (line 163)
* screen-save-unders-p:                  Screen Attributes.   (line 174)
* screen-saver:                          Screen Saver.        (line  43)
* screen-white-pixel:                    Screen Attributes.   (line 185)
* screen-width:                          Screen Attributes.   (line 195)
* screen-width-in-millimeters:           Screen Attributes.   (line 205)
* selection-owner:                       Selections.          (line 129)
* send-event:                            Sending Events.      (line  11)
* set-access-control:                    Undocumented.        (line  89)
* set-close-down-mode:                   Undocumented.        (line  91)
* set-input-focus:                       Managing Input Focus.
                                                              (line  10)
* set-modifier-mapping:                  Keyboard Control.    (line 162)
* set-pointer-mapping:                   Undocumented.        (line  93)
* set-screen-saver:                      Screen Saver.        (line  57)
* set-selection-owner:                   Undocumented.        (line  95)
* set-standard-colormap:                 Undocumented.        (line  98)
* set-standard-properties:               Undocumented.        (line 100)
* set-wm-class:                          Undocumented.        (line 102)
* set-wm-properties:                     Undocumented.        (line 113)
* set-wm-resources:                      Undocumented.        (line 115)
* setf:                                  Window Attributes.   (line 130)
* store-color:                           Changing Colors.     (line  11)
* store-colors:                          Changing Colors.     (line  39)
* text-extents:                          Querying Text Size.  (line  11)
* text-width:                            Querying Text Size.  (line  73)
* transient-for:                         Undocumented.        (line 117)
* translate-coordinates:                 Window Hierarchy.    (line 100)
* translate-default:                     Undocumented.        (line 119)
* translate-function:                    Drawing Text.        (line 291)
* undefine-keysym:                       Undocumented.        (line 122)
* ungrab-button:                         Grabbing a Button.   (line  72)
* ungrab-key:                            Grabbing a Key.      (line  68)
* ungrab-keyboard:                       Grabbing the Keyboard.
                                                              (line  79)
* ungrab-pointer:                        Grabbing the Pointer.
                                                              (line 105)
* ungrab-server:                         Grabbing the Server. (line  23)
* uninstall-colormap:                    Installing Colormaps.
                                                              (line  43)
* unmap-subwindows:                      Mapping Windows.     (line  84)
* unmap-window:                          Mapping Windows.     (line  71)
* visual-info-blue-mask:                 Undocumented.        (line 124)
* visual-info-green-mask:                Undocumented.        (line 126)
* visual-info-red-mask:                  Undocumented.        (line 128)
* warp-pointer:                          Pointer Position.    (line 125)
* warp-pointer-if-inside:                Pointer Position.    (line 166)
* warp-pointer-relative:                 Pointer Position.    (line 144)
* warp-pointer-relative-if-inside:       Pointer Position.    (line 200)
* window-all-event-masks:                Window Attributes.   (line 120)
* window-backing-pixel:                  Window Attributes.   (line 159)
* window-backing-planes:                 Window Attributes.   (line 172)
* window-backing-store:                  Window Attributes.   (line 185)
* window-bit-gravity:                    Window Attributes.   (line 199)
* window-class:                          Window Attributes.   (line 260)
* window-colormap:                       Window Attributes.   (line 269)
* window-colormap-installed-p:           Window Attributes.   (line 286)
* window-cursor:                         Undocumented.        (line 130)
* window-display:                        Window Attributes.   (line 312)
* window-do-not-propagate-mask:          Window Attributes.   (line 321)
* window-equal:                          Window Attributes.   (line 341)
* window-event-mask:                     Window Attributes.   (line 352)
* window-gravity:                        Window Attributes.   (line 363)
* window-id:                             Window Attributes.   (line 402)
* window-map-state:                      Window Attributes.   (line 411)
* window-override-redirect:              Window Attributes.   (line 421)
* window-p:                              Window Attributes.   (line 440)
* window-plist:                          Window Attributes.   (line 447)
* window-save-under:                     Window Attributes.   (line 484)
* window-visual:                         Window Attributes.   (line 495)
* window-visual-info:                    Undocumented.        (line 132)
* with-display:                          Display Attributes.  (line 381)
* with-event-queue:                      Managing the Event Queue.
                                                              (line  71)
* with-gcontext:                         Graphics Context Cache.
                                                              (line  24)
* with-server-grabbed:                   Grabbing the Server. (line  31)
* with-state:                            Window Attributes.   (line 504)
* withdraw-window:                       Undocumented.        (line 134)
* wm-client-machine:                     Undocumented.        (line 136)
* wm-colormap-windows:                   Undocumented.        (line 138)
* wm-command:                            Undocumented.        (line 140)
* wm-hints:                              Undocumented.        (line 142)
* wm-hints-flags:                        Undocumented.        (line 144)
* wm-icon-name:                          Undocumented.        (line 146)
* wm-name:                               Undocumented.        (line 148)
* wm-normal-hints:                       Undocumented.        (line 150)
* wm-protocols:                          Undocumented.        (line 152)
* wm-resources:                          Undocumented.        (line 154)
* wm-zoom-hints:                         Undocumented.        (line 156)
* write-bitmap-file:                     Image Files.         (line  25)
* write-resources:                       Resource Database Files.
                                                              (line  44)


File: clx.info,  Node: Type Index,  Prev: Function Index,  Up: Top

Anhang C Type Index
*******************

 [index ]
* Menu:

* :button-press:                         Keyboard and Pointer Events.
                                                              (line  13)
* :button-release:                       Keyboard and Pointer Events.
                                                              (line  14)
* :circulate-notify:                     Window State Events. (line  29)
* :circulate-request:                    Structure Control Events.
                                                              (line  16)
* :client-message:                       Client Communications Events.
                                                              (line  11)
* :colormap-notify:                      Structure Control Events.
                                                              (line  44)
* :configure-notify:                     Window State Events. (line  54)
* :configure-request:                    Structure Control Events.
                                                              (line  77)
* :create-notify:                        Window State Events. (line 125)
* :destroy-notify:                       Window State Events. (line 180)
* :enter-notify:                         Keyboard and Pointer Events.
                                                              (line 186)
* :exposure:                             Exposure Events.     (line  16)
* :focus-in:                             Input Focus Events.  (line   9)
* :focus-out:                            Input Focus Events.  (line  10)
* :graphics-exposure:                    Exposure Events.     (line  87)
* :gravity-notify:                       Window State Events. (line 202)
* :key-press:                            Keyboard and Pointer Events.
                                                              (line  11)
* :key-release:                          Keyboard and Pointer Events.
                                                              (line  12)
* :keymap-notify:                        Keyboard and Pointer State Events.
                                                              (line  10)
* :leave-notify:                         Keyboard and Pointer Events.
                                                              (line 187)
* :map-notify:                           Window State Events. (line 236)
* :map-request:                          Structure Control Events.
                                                              (line 151)
* :mapping-notify:                       Keyboard and Pointer State Events.
                                                              (line  34)
* :motion-notify:                        Keyboard and Pointer Events.
                                                              (line 147)
* :no-exposure:                          Exposure Events.     (line 148)
* :property-notify:                      Client Communications Events.
                                                              (line  46)
* :reparent-notify:                      Window State Events. (line 269)
* :resize-request:                       Structure Control Events.
                                                              (line 170)
* :selection-clear:                      Client Communications Events.
                                                              (line  78)
* :selection-notify:                     Client Communications Events.
                                                              (line 100)
* :selection-request:                    Client Communications Events.
                                                              (line 152)
* :unmap-notify:                         Window State Events. (line 311)
* :visibility-notify:                    Window State Events. (line 336)
* access-error:                          Introduction (Errors).
                                                              (line  22)
* alist:                                 Data Types.          (line  10)
* alloc-error:                           Introduction (Errors).
                                                              (line  42)
* angle:                                 Data Types.          (line  15)
* arc-seq:                               Data Types.          (line  22)
* array-index:                           Data Types.          (line  30)
* atom-error:                            Introduction (Errors).
                                                              (line  49)
* bit-gravity:                           Data Types.          (line  36)
* bitmap:                                Data Types.          (line  69)
* bitmap-format:                         Data Types.          (line  72)
* bits-per-pixel:                        Data Types.          (line 592)
* bits-per-rgb:                          Data Types.          (line 765)
* blue-mask:                             Data Types.          (line 757)
* boole-constant:                        Data Types.          (line 107)
* boolean:                               Data Types.          (line 103)
* card16:                                Data Types.          (line 150)
* card29:                                Data Types.          (line 154)
* card32:                                Data Types.          (line 158)
* card8:                                 Data Types.          (line 146)
* class:                                 Data Types.          (line 748)
* closed-display:                        Introduction (Errors).
                                                              (line  55)
* color:                                 Data Types.          (line 162)
* colormap:                              Data Types.          (line 165)
* colormap-entries:                      Data Types.          (line 773)
* colormap-error:                        Introduction (Errors).
                                                              (line  64)
* connection-failure:                    Introduction (Errors).
                                                              (line  70)
* cursor:                                Data Types.          (line 168)
* cursor-error:                          Introduction (Errors).
                                                              (line  86)
* depth:                                 Data Types.          (line 587)
* device-busy:                           Introduction (Errors).
                                                              (line  92)
* device-event-mask:                     Data Types.          (line 171)
* device-event-mask-class:               Data Types.          (line 177)
* display:                               Data Types.          (line 203)
* draw-direction:                        Data Types.          (line 213)
* drawable:                              Data Types.          (line 207)
* drawable-error:                        Introduction (Errors).
                                                              (line 103)
* error-key:                             Data Types.          (line 218)
* event-key:                             Data Types.          (line 259)
* event-mask:                            Data Types.          (line 330)
* event-mask-class:                      Data Types.          (line 336)
* font:                                  Data Types.          (line 410)
* font-error:                            Introduction (Errors).
                                                              (line 110)
* font-props:                            Data Types.          (line 420)
* fontable:                              Data Types.          (line 415)
* gcontext:                              Data Types.          (line 424)
* gcontext-error:                        Introduction (Errors).
                                                              (line 117)
* gcontext-key:                          Data Types.          (line 429)
* grab-status:                           Data Types.          (line 480)
* green-mask:                            Data Types.          (line 756)
* id:                                    Data Types.          (line 742)
* id-choice-error:                       Introduction (Errors).
                                                              (line 123)
* image-depth:                           Data Types.          (line 501)
* implementation-error:                  Introduction (Errors).
                                                              (line 132)
* index-size:                            Data Types.          (line 506)
* int16:                                 Data Types.          (line 516)
* int32:                                 Data Types.          (line 520)
* int8:                                  Data Types.          (line 512)
* keysym:                                Data Types.          (line 524)
* length-error:                          Introduction (Errors).
                                                              (line 142)
* lookup-error:                          Introduction (Errors).
                                                              (line 150)
* lsb-first-p:                           Data Types.          (line  97)
* mask16:                                Data Types.          (line 529)
* mask32:                                Data Types.          (line 532)
* match-error:                           Introduction (Errors).
                                                              (line 173)
* missing-parameter:                     Introduction (Errors).
                                                              (line 184)
* modifier-key:                          Data Types.          (line 535)
* modifier-mask:                         Data Types.          (line 556)
* name-error:                            Introduction (Errors).
                                                              (line 191)
* pad:                                   Data Types.          (line  91)
* pixarray:                              Data Types.          (line 562)
* pixel:                                 Data Types.          (line 566)
* pixmap:                                Data Types.          (line 572)
* pixmap-error:                          Introduction (Errors).
                                                              (line 197)
* pixmap-format:                         Data Types.          (line 576)
* point-seq:                             Data Types.          (line 604)
* pointer-event-mask:                    Data Types.          (line 610)
* pointer-event-mask-class:              Data Types.          (line 617)
* rect-seq:                              Data Types.          (line 651)
* red-mask:                              Data Types.          (line 755)
* repeat-seq:                            Data Types.          (line 658)
* reply-length-error:                    Introduction (Errors).
                                                              (line 203)
* reply-timeout:                         Introduction (Errors).
                                                              (line 215)
* request-error:                         Introduction (Errors).
                                                              (line 225)
* resource-error:                        Introduction (Errors).
                                                              (line 244)
* resource-id:                           Data Types.          (line 662)
* rgb-val:                               Data Types.          (line 667)
* scanline-pad:                          Data Types.          (line 598)
* screen:                                Data Types.          (line 674)
* seg-seq:                               Data Types.          (line 679)
* sequence-error:                        Introduction (Errors).
                                                              (line 254)
* server-disconnect:                     Introduction (Errors).
                                                              (line 269)
* state-mask-key:                        Data Types.          (line 685)
* stringable:                            Data Types.          (line 725)
* timestamp:                             Data Types.          (line 732)
* unexpected-reply:                      Introduction (Errors).
                                                              (line 276)
* unit:                                  Data Types.          (line  84)
* unknown-error:                         Introduction (Errors).
                                                              (line 296)
* value-error:                           Introduction (Errors).
                                                              (line 304)
* visual-info:                           Data Types.          (line 736)
* win-gravity:                           Data Types.          (line 781)
* window:                                Data Types.          (line 816)
* window-error:                          Introduction (Errors).
                                                              (line 314)
* x-error:                               Introduction (Errors).
                                                              (line 320)
* xatom:                                 Data Types.          (line 820)


