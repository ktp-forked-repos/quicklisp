This is clx.info, produced by makeinfo version 4.13 from clx.texinfo.

INFO-DIR-SECTION lisp
START-INFO-DIR-ENTRY
* CLX: (clx).           Common LISP X Interface
END-INFO-DIR-ENTRY

   The Common LISP X Interface (CLX)

   Copyright (C) 1988, 1989 Texas Instruments Incorporated

     Permission is granted to any individual or institution to use,
     copy, modify and distribute this document, provided that this
     complete copyright and permission notice is maintained, intact, in
     all copies and supporting documentation. Texas Instruments
     Incorporated makes no representations about the suitability of
     this document or the software described herein for any purpose. It
     is provided "as is" without express or implied warranty.


File: clx.info,  Node: Top,  Next: Acknowledgments,  Prev: (dir),  Up: (dir)

The Common LISP X Interface (CLX)
*********************************

The Common LISP X Interface (CLX)

   Copyright (C) 1988, 1989 Texas Instruments Incorporated

     Permission is granted to any individual or institution to use,
     copy, modify and distribute this document, provided that this
     complete copyright and permission notice is maintained, intact, in
     all copies and supporting documentation. Texas Instruments
     Incorporated makes no representations about the suitability of
     this document or the software described herein for any purpose. It
     is provided "as is" without express or implied warranty.

* Menu:

* Acknowledgments::
* Introduction to CLX::
* Displays::
* Screens::
* Windows and Pixmaps::
* Graphics Contexts::
* Graphic Operations::
* Images::
* Font and Characters::
* Colors::
* Cursors::
* Atoms::
* Events and Input::
* Resources::
* Control Functions::
* Extensions::
* Errors::
* Undocumented::
* Glossary::
* Function Index::
* Type Index::

 --- The Detailed Node Listing ---

Introduction to CLX

* The X Window System::
* A Quick Tour of CLX::
* Naming and Argument Conventions::
* Programming Considerations::
* Data Types::

The X Window System

* Windows::
* Input Events::

A Quick Tour of CLX

* A Simple Menu::
* Displaying the Menu::
* Menu Input::
* The Main Program::
* Debugging With CLX::

Displays

* Opening the Display::
* Display Attributes::
* Managing the Output Buffer::
* Closing the Display::

Screens

* Screens and Visuals::
* Screen Attributes::

Windows and Pixmaps

* Drawables::
* Creating Windows::
* Window Attributes::
* Stacking Order::
* Window Hierarchy::
* Mapping Windows::
* Destroying Windows::
* Pixmaps::

Graphics Contexts

* Creating Graphics Contexts::
* Graphics Context Attributes::
* Copying Graphics Contexts::
* Destroying Graphics Contexts::
* Graphics Context Cache::

Graphic Operations

* Area and Plane Operations::
* Drawing Points::
* Drawing Lines::
* Drawing Rectangles::
* Drawing Arcs::
* Drawing Text::

Images

* Image Types::
* Image Functions::
* Image Files::
* Direct Image Transfer::

Image Types

* Basic Images::
* XY-Format Images::
* Z-Format Images::

Font and Characters

* Opening Fonts::
* Listing Fonts::
* Font Attributes::
* Chracter Attributes::
* Querying Text Size::

Colors

* Colormaps and Colors::
* Color Functions::
* Colormap Functions::

Colormap Functions

* Creating Colormaps::
* Installing Colormaps::
* Allocating Colors::
* Finding Colors::
* Changing Colors::
* Colormap Attributes::

Cursors

* Creating Cursors::
* Cursor Functions::
* Cursor Attributes::

Atoms, Properties and Selections

* Atoms (Atoms)::
* Properties::
* Selections::

Events and Input

* Selecting Events::
* Processing Events::
* Managing the Event Queue::
* Sending Events::
* Pointer Position::
* Managing Input Focus::
* Grabbing the Pointer::
* Grabbing a Button::
* Grabbing the Keyboard::
* Grabbing a Key::
* Event Types::
* Releasing Queued Events::

Event Types

* Keyboard and Pointer Events::
* Input Focus Events::
* Keyboard and Pointer State Events::
* Exposure Events::
* Window State Events::
* Structure Control Events::
* Client Communications Events::
* Declaring Event Types::

Resources

* Resource Binings::
* Basic Resource Database Functions::
* Accessing Resource Values::
* Resource Database Files::

Accessing Resource Values

* Complete Names and Classes::
* Matching Resource Names::
* Resource Access Functions::

Control Functions

* Grabbing the Server::
* Pointer Control::
* Keyboard Control::
* Keyboard Encodings::
* Client Termination::
* Managing Host Access::
* Screen Saver::

Keyboard Encodings

* Keycodes and Keysyms::
* Keyboard Mapping::
* Using Keycodes and Keysyms::

Extensions

* Extensions (Extensions)::
* SHAPE - The X11 Nonrectangular Window Shape Extension::
* RENDER - A new rendering system for X11::
* DPMS - The X11 Display Power Management Signaling Extension::
* BIG-REQUESTS - Big Requests Extension::

RENDER - A new rendering system for X11

* Picture formats::
* The picture object::
* Glyphs and Glyphsets::
* Using glyphs::
* Errors (Extensions)::

Errors

* Introduction (Errors)::


File: clx.info,  Node: Acknowledgments,  Next: Introduction to CLX,  Prev: Top,  Up: Top

1 Acknowledgments
*****************

Primary Interface Author:

   Robert W. Scheifler

     MIT Laboratory for Computer Science
     545 Technology Square, Room 418
     Cambridge, MA 02139
     <rws@zermatt.lcs.mit.edu>

   Primary Implementation Author:

   LaMott Oren

     Texas Instruments
     PO Box 655474, MS 238
     Dallas, TX 75265
     <oren@csc.ti.com>

   Design Contributors:

   * Dan Cerys, BBN

   * Scott Fahlman, CMU

   * Kerry Kimbrough, Texas Instruments

   * Chris Lindblad, MIT

   * Rob MacLachlan, CMU

   * Mike McMahon, Symbolics

   * David Moon, Symbolics

   * LaMott Oren, Texas Instruments

   * Daniel Weinreb, Symbolics

   * John Wroclawski, MIT

   * Richard Zippel, Symbolics

   Documentation Contributors:

   * Keith Cessna, Texas Instruments

   * Kerry Kimbrough, Texas Instruments

   * Mike Myjak

   * LaMott Oren, Texas Instruments

   * Dan Stenger, Texas Instruments

   The X Window System is a trademark of MIT.

   UNIX is a trademark of AT&T Bell Laboratories.

   ULTRIX, ULTRIX-32, ULTRIX-32m, ULTRIX-32w, and VAX/VMS are
trademarks of Digital Equipment Corporation.


File: clx.info,  Node: Introduction to CLX,  Next: Displays,  Prev: Acknowledgments,  Up: Top

2 Introduction to CLX
*********************

This manual assumes a basic understanding of window systems and the
Common Lisp programming language. To provide an introduction to the
Common Lisp X Interface (CLX) programming, this section discusses the
following:

   * Overview of the X Window System

   * Naming and argument conventions

   * Programming considerations

* Menu:

* The X Window System::
* A Quick Tour of CLX::
* Naming and Argument Conventions::
* Programming Considerations::
* Data Types::


File: clx.info,  Node: The X Window System,  Next: A Quick Tour of CLX,  Prev: Introduction to CLX,  Up: Introduction to CLX

2.1 The X Window System
=======================

The X Window System was developed at the Massachusetts Institute of
Technology (MIT) and first released in 1985. Since then, the X Window
System has become an industry-standard product available on virtually
every type of bit-mapped workstation. The current version of X, Version
11, has been implemented for several different computer architectures,
for a wide variety of display hardware, and also for many different
operating systems. X Version 11 represents the fulfillment of the
original design goals proposed by MIT, as follows:

Portable
     Support virtually any bitmap display and any interactive input
     device (including keyboards, mice, tablets, joysticks, and touch
     screens).  Make it easy to implement the window system on
     different operating systems.

Device-Independent Applications
     Avoid rewriting, recompiling, or even relinking in order to use
     different display/input hardware. Make it easy for an application
     to work on both monochrome and color hardware.

Network Transparent
     Let an application run on one computer while using another
     computer's display, even if the other computer has a different
     operating system or hardware architecture.

Multitasking
     Support multiple applications being displayed simultaneously.

No User Interface Policy
     Since no one agrees on what constitutes the best user interface,
     make it possible for a broad range of user interface styles (or
     policies) to be implemented, external to the window system and to
     the application programs.

Cheap Windows
     Windows should be abundant, and ubiquitous. Provide overlapping
     windows and a simple mechanism for window hierarchy.

High-Performance Graphics
     Provide powerful interfaces for synthesizing 2-D images (geometric
     primitives, high-quality text with multiple typefaces, and scanned
     images).

Extensible
     Include a mechanism for adding new capabilities. Allow separate
     sites to develop independent extensions without becoming
     incompatible with remote applications.

   Some of these goals lead directly to the basic X architecture - the
client-server model. The basic window system is implemented by the X
_server_ program. An application program (the _client_) sends window
system _requests_ to the X server through a reliable two-way
byte-stream.

   In general, the server and the client can be executing on separate
host computers, in which case the byte-stream is implemented via some
network protocol (TCP, DECnet(tm), Chaosnet, and so forth). The X
server, which is connected to several client programs running
concurrently, executes client requests in round-robin fashion. The
server is responsible for drawing client graphics on the display screen
and for making sure that graphics output to a window stays inside its
boundary.

   The other primary job of the X server is to channel input from the
keyboard, pointer, and other input devices back to the appropriate
client programs. Input arrives at the client asynchronously in the form
of input _events_ representing up/down transitions of keys or pointer
buttons, changes in the pointer position, and so on. In some cases, a
request generates a return value (or _reply_) from the server, which is
another kind of client input. Replies and input events are received via
the same byte-stream connecting the client with the server.

* Menu:

* Windows::
* Input Events::


File: clx.info,  Node: Windows,  Next: Input Events,  Prev: The X Window System,  Up: The X Window System

2.1.1 Windows
-------------

The X Window System supports one or more screens containing overlapping
windows and subwindows. A _screen_ is a physical monitor and hardware,
which can be either color or black and white. There can be multiple
screens per display workstation. A single server can provide display
services for any number of screens. A set of screens for a single user
with one keyboard and one mouse is called a _display_.

   All windows in an X server are arranged in a strict hierarchy. At the
top of the hierarchy are the _root windows_, which cover each of the
display screens. Each root window is either partially or completely
covered by child windows. All windows, except for root windows, have
parents. Any window can in turn have its own children. In this way, an
application program can create a window tree of arbitrary depth on each
screen.

   A child window can be larger than its parent. That is, part or all of
the child window can extend beyond the boundaries of the parent.
However, all output to a window is clipped by the boundaries of its
parent window. If several children of a window have overlapping
locations, one of the children is considered to be on top of/or raised
over the others, _obscuring_ them. Window output to areas that are
covered by other windows is suppressed.

   A window has a border that is zero or more pixels in width and can be
any pattern (pixmap) or solid color. A window usually has a background
pattern that is drawn by the X server. Each window has its own
coordinate system. Child windows obscure their parents unless the child
windows have no background. Graphics operations in the parent window
are usually clipped by the children.

   X also provides objects called _pixmaps_ for off-screen storage of
graphics. Single-plane pixmaps (that is, of depth 1) are sometimes
referred to as _bitmaps_. Both pixmaps and windows can be used
interchangeably in most graphics functions. Pixmaps are also used in
various graphics operations to define patterns, or _tiles_. Windows and
pixmaps together are referred to as _drawables_.


File: clx.info,  Node: Input Events,  Prev: Windows,  Up: The X Window System

2.1.2 Input Events
------------------

The X input mechanism is conceptually simple yet quite powerful. Most
events are attached to a particular window (that is, contain an
identifier for the window receiving the event). A client program can
receive multiple window input streams, all multiplexed over the single
byte-stream connection to the server.

   Clients can tailor their input by expressing interest in only certain
event types. The server uses special event types to send important
messages to the client. For example, the client can elect to receive an
:ENTER-NOTIFY (*note :enter-notify::) event when the pointer cursor
moves into a certain window. Another vital message from the server is
an :EXPOSURE (*note :exposure::) event. This is a signal to the client
indicating that at least some portion of the window has suddenly become
visible (perhaps the user moved another window which had been
overlapping it). The client is then responsible for doing what is
necessary to redisplay the window's image.  Client programs must be
prepared to regenerate the contents of windows in this way on demand.

   Input is also subject to policy decisions about which client window
receives keyboard and pointer events. Since the pointer is free to roam
between windows, just clicking on a window is often enough to send a
pointer event to that window. Keyboard events, however, must go to a
keyboard focus window which has to be designated in some other way.
Usually, the arbiter of such input management policy is a program called
the _window manager_. The window manager gives the human user a way to
make a window the keyboard focus, to manage the layout of windows on
the screen, to represent windows with icons, and so forth. In fact, the
window manager client determines most of the so-called look and feel of
the X Window System.


File: clx.info,  Node: A Quick Tour of CLX,  Next: Naming and Argument Conventions,  Prev: The X Window System,  Up: Introduction to CLX

2.2 A Quick Tour of CLX
=======================

The X Window System is defined by the X Window System Protocol
Specification, a detailed description of the encoding and the meaning of
requests and events sent between a client and a server. This standard
protocol does not depend on any particular programming language. As a
result, each programming language must define its own functional
interface for using the X protocol. The standard X interface used by
Common Lisp programmers is called CLX. CLX is a set of data types,
functions, and macros which allow a Common Lisp client program to
interact with an X server to send requests and to receive input events
and replies.

   For the most part, CLX functions are closely tied to the underlying
requests in the X protocol. Many CLX functions simply add requests to an
output buffer. These requests later execute asynchronously on the X
display server. However, some functions of CLX lie outside the scope of
the protocol-for example, reading events and managing a clientside
event queue. CLX is also responsible for important batching and caching
tasks that minimize network communication.

   The following paragraphs show an example of a CLX client program. All
CLX functions and macros are shown in upper case. Note that some of the
terms used are unique to X, while other terms that are common to other
window systems have different meanings in X. It may be helpful to refer
to the glossary when you are uncertain of a term's meaning in the
context of the X Window System.

* Menu:

* A Simple Menu::
* Displaying the Menu::
* Menu Input::
* The Main Program::
* Debugging With CLX::


File: clx.info,  Node: A Simple Menu,  Next: Displaying the Menu,  Prev: A Quick Tour of CLX,  Up: A Quick Tour of CLX

2.2.1 A Simple Menu
-------------------

The example client program creates and displays a simple pop-up menu
consisting of a column of strings-a title string followed by selectable
menu item strings. The implementation uses one window to represent the
entire menu, plus a set of subwindows, one for each menu item. Here is
the definition of a structure which represents such a menu.

     (defstruct (menu)
       "A simple menu of text strings."
       (title "Choose an item:")
       item-alist				;((item-window item-string))
       window
       gcontext
       width
       title-width
       item-width
       item-height
       (geometry-changed-p t))	     ;nil if unchanged since displayed

   The `window' slot will contain the WINDOW (*note window::) object
that represents the menu. The `item-' `alist' represents the
relationship between the menu items and their associated subwindows.
Each entry in `item-alist' is a list whose first element is a
(sub)window object and whose second element is the corresponding item
string. A WINDOW (*note window::) object is an instance of a
CLX-defined data type which represents X windows. A WINDOW (*note
window::) object actually carries two pieces of information: an X
window ID integer and a DISPLAY (*note display::) object. A DISPLAY
(*note display::) is another CLX-defined data type that represents a
connection to a specific X display server. The `gcontext' slot contains
an instance of a CLX data type known as a _graphics context_. A
graphics context is a set of display attribute values, such as
foreground color, fill style, line style, text font, and so forth. Each
X graphics request (and hence each CLX graphics function call) must
supply a graphics context to use in displaying the request. The menu's
`gcontext' will thus hold all of the attribute values used during menu
display.

   The first thing to do is make an instance of a `menu' object:

     (defun create-menu (parent-window text-color background-color text-font)
       (make-menu
        ;; Create menu graphics context
        :gcontext (CREATE-GCONTEXT :drawable   parent-window
     			      :foreground text-color
     			      :background background-color
     			      :font       text-font)

        ;; Create menu window
        :window    (CREATE-WINDOW
     	       :parent            parent-window
     	       :class             :input-output
     	       :x                 0	;temporary value
     	       :y                 0	;temporary value
     	       :width             16	;temporary value
     	       :height            16	;temporary value
     	       :border-width 2
     	       :border            text-color
     	       :background        background-color
     	       :save-under        :on
     	       :override-redirect :on ;override window mgr when positioning
     	       :event-mask        (MAKE-EVENT-MASK :leave-window :exposure))))

   CREATE-WINDOW (*note create-window::) is one of the most important
CLX functions, since it creates and returns a WINDOW (*note window::)
object. Several of its options are shown here. The default window class
is :INPUT-OUTPUT, but X provides for :INPUT-ONLY windows, too. Every
window must have a parent window, except for a system-defined _root
window_, which represents an entire display screen. The :EVENT-MASK
keyword value, a CLX EVENT-MASK (*note event-mask::) data type, says
that an input event will be received for the menu window when the
window is exposed and also when the pointer cursor leaves the window.
The window border is a pattern-filled or (as in this case) a
solid-colored boundary which is maintained automatically by the X
server; a client cannot draw in a window's border, since all graphics
requests are relative to the origin (upper-left corner) of the window's
interior and are clipped by the server to this inside region. Turning on
the :SAVE-UNDER option is a hint to the X server that, when this window
is made visible, it may be more efficient to save the pixels it
obscures, rather than require several client programs to refresh their
windows when the pop-up menu disappears. This is a way to work around
X's client-managed refresh policy when only a small amount of screen
space is needed temporarily.

   Why is :OVERRIDE-REDIRECT turned on for the menu window? This is
actually a little unusual, because it prevents any window manager client
from _redirecting_ the position of the menu when it is popped up.
Remember that the window manager represents the user's policy for
controlling the positions of his windows, so this kind of redirection is
ordinarily correct. However, in this case, as a favor to the user, the
menu avoids redirection in order to pop up the menu at a very specific
location; that is, under the pointer cursor.

   What about the item subwindows? The `menu-set-item-list' function in
the following example creates them whenever the menu's item list is
changed. The upper-left x and y coordinates and the width and height
are not important yet, because they are computed just before the menu
is displayed. This function also calls CREATE-WINDOW (*note
create-window::), demonstrating the equal treatment of parent and
children windows in the X window hierarchy.

     (defun menu-set-item-list (menu &rest item-strings)
       ;; Assume the new items will change the menu's width and height
       (setf (menu-geometry-changed-p menu) t)

       ;; Destroy any existing item windows
       (dolist (item (menu-item-alist menu))
         (DESTROY-WINDOW (first item)))

       ;; Add (item-window item-string) elements to item-alist
       (setf (menu-item-alist menu)
     	(let (alist)
     	  (dolist (item item-strings (nreverse alist))
     	    (push (list (CREATE-WINDOW
     			 :parent       (menu-window menu)
     			 :x            0 ;temporary value
     			 :y            0 ;temporary value
     			 :width        16 ;temporary value
     			 :height       16 ;temporary value
     			 :background   (GCONTEXT-BACKGROUND (menu-gcontext menu))
     			 :event-mask   (MAKE-EVENT-MASK :enter-window
     							:leave-window
     							:button-press
     							:button-release))
     			item)
     		  alist)))))


File: clx.info,  Node: Displaying the Menu,  Next: Menu Input,  Prev: A Simple Menu,  Up: A Quick Tour of CLX

2.2.2 Displaying the Menu
-------------------------

The `menu-recompute-geometry' function (shown in the following example)
handles the job of calculating the size of the menu, based on its
current item list and its current text font. CLX provides a way to
inquire the geometrical properties of a font object (for example, its
ascent and descent from the baseline) and also a TEXT-EXTENTS (*note
text-extents::) function.  TEXT-EXTENTS (*note text-extents::) returns
the geometry of a given string as displayed in a given font.  Notice
the use of the WITH-STATE (*note with-state::) macro when setting a
window's geometry attributes. CLX strives to preserve the familiar
`setf' style of accessing individual window attributes, even though an
attribute access actually involves sending a request to a (possibly
remote) server and/or waiting for a reply.  WITH-STATE (*note
with-state::) tells CLX to batch together all read and write accesses
to a given window, using a local cache to minimize the number of server
requests.  This CLX feature can result in a dramatic improvement in
client performance without burdening the programmer interface.

   `menu-recompute-geometry' causes all the item subwindows to become
_mapped_. Mapping a window means attempting to make it visible on the
screen. However, a subwindow will not actually be _visible_ until it
and all of its ancestors are mapped. Even then, another window might be
covering up the subwindow.

     (defun menu-recompute-geometry (menu)
       (when (menu-geometry-changed-p menu)
         (let* ((menu-font   (GCONTEXT-FONT (menu-gcontext menu)))
     	   (title-width (TEXT-EXTENTS menu-font (menu-title menu)))
     	   (item-height (+ (FONT-ASCENT menu-font)
     			   (FONT-DESCENT menu-font)
     			   *menu-item-margin*))
     	   (item-width     0)
     	   (items          (menu-item-alist menu))
     	   menu-width)

           ;; Find max item string width
           (setf item-width
     	    (+ *menu-item-margin*
     	       (dolist (next-item items item-width)
     		 (setf item-width (max item-width
     				       (TEXT-EXTENTS menu-font (second next-item)))))))

           ;; Compute final menu width, taking margins into account
           (setf menu-width (max title-width (+ item-width *menu-item-margin*)))
           (let ((window     (menu-window menu)))

     	;; Update width and height of menu window
     	(WITH-STATE (window)
     		    (setf (DRAWABLE-WIDTH      window) menu-width
     			  (DRAWABLE-HEIGHT window) (* (1+ (length items)) item-height)))

     	;; Update width, height, position of item         windows
     	(let ((item-left         (round (- menu-width item-width) 2))
     	      (next-item-top (- item-height (round *menu-item-margin* 2))))
     	  (dolist (next-item items)
     	    (let ((window (first next-item)))
     	      (WITH-STATE (window)
     			  (setf (DRAWABLE-HEIGHT window) item-height
     				(DRAWABLE-WIDTH      window) item-width
     				(DRAWABLE-X          window) item-left
     				(DRAWABLE-Y          window) next-item-top)))
     	    (incf next-item-top item-height))))

           ;; Map all item windows
           (MAP-SUBWINDOWS (menu-window menu))

           ;; Save item geometry
           (setf (menu-item-width menu)         item-width
     	    (menu-item-height menu)        item-height
     	    (menu-width menu)              menu-width
     	    (menu-title-width menu)        title-width
     	    (menu-geometry-changed-p menu) nil))))

   Of course, the sample client must know how to draw/redraw the menu
and its items, so the function `menu-refresh' is defined next to handle
that task (shown in the following example). Note that the location of
window output is given relative to the window origin.  Windows and
subwindows have different coordinate systems. The location of the
origin (upper-left corner) of a subwindow's coordinate system is given
with respect to its parent window's coordinate system. Negative
coordinates are valid, although only output to the +x/+y quadrant of a
window's coordinate system will ever be visible.

     (defun menu-refresh (menu)
       (let* ((gcontext   (menu-gcontext menu))
     	 (baseline-y (FONT-ASCENT (GCONTEXT-FONT gcontext))))
         ;; Show title centered in "reverse-video"
         (let ((fg (GCONTEXT-BACKGROUND gcontext))
     	  (bg (GCONTEXT-FOREGROUND gcontext)))
           (WITH-GCONTEXT (gcontext :foreground fg :background bg)
     		     (DRAW-IMAGE-GLYPHS
     		      (menu-window menu)
     		      gcontext
     		      (round (- (menu-width menu)
     				(menu-title-width menu)) 2) ;start x
     		      baseline-y	;start y
     		      (menu-title menu))))

         ;; Show each menu item (position is relative to item window)
         (let ((box-margin (round *menu-item-margin* 2)))
           (dolist (item (menu-item-alist menu))
     	(DRAW-IMAGE-GLYPHS
     	 (first item) gcontext
     	 box-margin			;start x
     	 (+ baseline-y box-margin)	;start y
     	 (second item))))))

   WITH-GCONTEXT (*note with-gcontext::) is a CLX macro that allows you
temporarily to modify a graphics context within the dynamic scope of
the macro body.  DRAW-IMAGE-GLYPHS (*note draw-image-glyphs::) is a CLX
text drawing function which produces a terminal-like rendering:
foreground character on a background block. (More sophisticated text
rendering functions are also available.) The strange use of _glyphs_
instead of _string_ here actually highlights an important fact: X and
Common Lisp have totally different concepts of a character. A Common
Lisp character is an object whose implementation can comprehend a vast
universe of text complexities (typefaces, type styles, international
character sets, symbols, and so forth). However, to X, a string is just
a sequence of integer indexes into the array of bitmaps represented by
a CLX font object. In general, DRAW-IMAGE-GLYPHS (*note
draw-image-glyphs::), TEXT-EXTENTS (*note text-extents::), and other
CLX text functions accept a :TRANSLATE keyword argument. Its value is a
function which translates the characters of a string argument into the
appropriate font-and-index pairs needed by CLX.  This example relies
upon the default translation function, which simply uses CHAR-CODE to
compute an index into the current font.


File: clx.info,  Node: Menu Input,  Next: The Main Program,  Prev: Displaying the Menu,  Up: A Quick Tour of CLX

2.2.3 Menu Input
----------------

Now that a menu can be displayed, the sample client program must define
how the menu will process user input. The `menu-choose' function (shown
in the following example) has the classic structure of an X client
program. First, do some initialization (for example, present the menu
at a given location). Then, enter an input event loop. Read an input
event, process it, and repeat the loop until a termination event is
received. The EVENT-CASE (*note event-case::) macro continues reading
an event from the menu window's display object until one of its clauses
returns non-NIL. These clauses specify the action to be taken for each
event type and also bind values from the event report to local
variables, such as the EVENT-WINDOW receiving the event. Notice that
the :FORCE-OUTPUT-P option is enabled, causing EVENT-CASE (*note
event-case::) to begin by sending any client requests which CLX has not
yet output to the server. To improve performance, CLX quietly queues up
requests and periodically sends them off in a batch. However, in an
interactive feedback loop such as this, it is important to keep the
display crisply up-to-date.

     (defun menu-choose (menu x y)
       ;; Display the menu so that first item is at x,y.
       (menu-present menu x y)

       (let ((items (menu-item-alist menu))
     	(mw    (menu-window menu))
     	selected-item)

         ;; Event processing loop
         (do () (selected-item)
           (EVENT-CASE ((DRAWABLE-DISPLAY mw) :force-output-p t)
     		  (:exposure
     		   (count)
     		   ;; Discard all but final :exposure then display the menu
     		   (when (zerop count) (menu-refresh menu))
     		   t)

     		  (:button-release
     		   (event-window)
     		   ;;Select an item
     		   (setf selected-item (second (assoc event-window items)))
     		   t)

     		  (:enter-notify
     		   (window)
     		   ;;Highlight an item
     		   (menu-highlight-item menu (find window items :key #'first))
     		   t)

     		  (:leave-notify
     		   (window kind)
     		   (if (eql mw window)
     		       ;; Quit if pointer moved out of main menu window
     		       (setf selected-item (when (eq kind :ancestor) :none))
     		     ;; Otherwise, unhighlight the item window left
     		     (menu-unhighlight-item menu (find window items :key #'first)))
     		   t)

     		  (otherwise
     		   ()
     		   ;;Ignore and discard any other event
     		   t)))

         ;; Erase the menu
         (UNMAP-WINDOW mw)

         ;; Return selected item string, if any
         (unless (eq selected-item :none) selected-item)))

   The event loop in `menu-choose' demonstrates an idiom used in all X
programs: the contents of a window are displayed (in this case, by
calling `menu-refresh') only when an :EXPOSURE (*note :exposure::)
event is received, signaling that the server has actually made the
window _viewable_. The handling of :EXPOSURE (*note :exposure::) in
`menu-choose' also implements a little trick for improving efficiency.
In general, when a window is exposed after being previously obscured
(perhaps only partially), the server is free to send several :EXPOSURE
(*note :exposure::) events, one for each rectangular tile of the
exposed region. For small windows like this menu, it is not worth the
trouble to redraw the image one tile at a time. So the code above just
ignores all but the last tile exposure and redraws everything in one
call to `menu-refresh'.


File: clx.info,  Node: The Main Program,  Next: Debugging With CLX,  Prev: Menu Input,  Up: A Quick Tour of CLX

2.2.4 The Main Program
----------------------

After all the preceding build-up and the other functions referenced
(but not shown here) have been implemented, the code for the main
client program is very small.

     (defun just-say-lisp (host &optional (font-name "fg-16"))
       (let* ((display   (OPEN-DISPLAY host))
     	 (screen    (first (DISPLAY-ROOTS display)))
     	 (fg-color  (SCREEN-BLACK-PIXEL screen))
     	 (bg-color  (SCREEN-WHITE-PIXEL screen))
     	 (nice-font (OPEN-FONT display font-name))

     	 ;; Create a menu as a child of the root window.
     	 (a-menu       (create-menu (SCREEN-ROOT screen)
     				    fg-color bg-color nice-font)))

         (setf (menu-title a-menu) "Please pick your favorite language:")
         (menu-set-item-list a-menu "Fortran" "APL" "Forth" "Lisp")

         ;; Bedevil the user until he picks a nice programming language
         (unwind-protect
     	(loop
     	 ;; Determine the current root window position of the pointer
     	 (multiple-value-bind (x y) (QUERY-POINTER (SCREEN-ROOT screen))

     	   (let ((choice (menu-choose a-menu x y)))
     	     (when (string-equal "Lisp" choice)
     	       (return)))))

           (CLOSE-DISPLAY display))))

   Note that the main program event loop lies in the body of an
UNWIND-PROTECT form. This is a good programming technique because,
without this protection, an unexpected error could cause the program to
terminate without freeing the _server resources_ it has created. Server
resources are CLX objects which refer to objects actually stored on the
X server. Examples of these are WINDOW (*note window::), FONT (*note
font::), PIXMAP (*note pixmap::), CURSOR (*note cursor::), COLORMAP
(*note colormap::), and GCONTEXT (*note gcontext::) objects. These
server resources are created and destroyed by user requests. Server
resources created by a client are also destroyed when its display
connection is closed. If client resources are repeatedly created
without being destroyed, then the server will eventually run out of
memory and fail.

   Most server resources are potentially sharable between applications.
In fact, windows are manipulated explicitly by window manager programs.
Fonts and cursors are typically shared automatically since the X server
loads and unloads font storage as needed.  GCONTEXT (*note gcontext::)
objects are not ordinarily shared between client applications.


File: clx.info,  Node: Debugging With CLX,  Prev: The Main Program,  Up: A Quick Tour of CLX

2.2.5 Debugging With CLX
------------------------

Typically, most CLX programs do not need to control the buffering of
output requests directly. However, CLX programmers need to be aware of
the asynchronous nature of client-server communication. It may be
convenient to control the CLX output buffer more directly, especially
during debugging.

   A client that wants a request to execute immediately instead of
asynchronously can follow it with a call to DISPLAY-FORCE-OUTPUT (*note
display-force-output::).  This function _blocks_ (does not return)
until all previously buffered output requests have been sent.
Otherwise, the output buffer is always flushed by a call to any
function which returns a value from the server or which waits for input
(for example, GET-PROPERTY (*note get-property::).  Certain output
requests can cause input events to be sent. For example, MAP-WINDOW
(*note map-window::) can cause :EXPOSURE (*note :exposure::) events to
be sent. Synchronizing output with the resulting input can be done with
the DISPLAY-FINISH-OUTPUT (*note display-finish-output::) function.
This function blocks until all previously buffered output has been sent
and all resulting input events have been received.

   Functions that return information from the server block until an
explicit reply is received or an error occurs. If a nonblocking call
results in an error, the error is generally not reported until later.
All errors (synchronous and asynchronous) are processed by calling an
error handler defined for the display. If the handler is a sequence it
is expected to contain handler functions specific to each error. The
error code is used to index the sequence, fetching the appropriate
handler. Any results returned by the handler are ignored since it is
assumed that the handler either takes care of the error completely, or
else signals.


File: clx.info,  Node: Naming and Argument Conventions,  Next: Programming Considerations,  Prev: A Quick Tour of CLX,  Up: Introduction to CLX

2.3 Naming and Argument Conventions
===================================

Throughout CLX, a number of conventions for naming and syntax of the CLX
functions have been followed. These conventions are intended to make the
syntax of the functions more predictable.

   The major naming conventions are as follows:

   * To better differentiate the CLX symbols from other symbols, they
     have all been placed in the package XLIB. External symbols have
     been explicitly exported.

   * The _display_ argument, where used, is always first in the
     argument list.

   * All server resource objects, where used, occur at the beginning of
     the argument list, immediately after the display variable.

   * When a graphics context (_gcontext_) is present together with
     another type of server resource (most commonly, a _drawable_), the
     graphics context occurs in the argument list after the other
     server resource. Drawables out rank all other server resources.

   * Source arguments always precede the destination arguments in the
     argument list.

   * The _x_ argument always precedes the _y_ argument in the argument
     list.

   * The _width_ argument always precedes the _height_ argument in the
     argument list.

   * Where the _x_, _y_, _width_ and _height_ arguments are used
     together, the _x_ and _y_ arguments always precede the _width_ and
     _height_ arguments.

   * Where a _mask_ is accompanied with a _structure_, the mask always
     precedes the structure in the argument list.


File: clx.info,  Node: Programming Considerations,  Next: Data Types,  Prev: Naming and Argument Conventions,  Up: Introduction to CLX

2.4 Programming Considerations
==============================

The major programming considerations are as follows:

   * Keyboards are the greatest variable between different
     manufacturer's workstations. If you want your program to be
     portable, you should be particularly conservative here.

   * Many display systems have limited amounts of off-screen memory. If
     you can, you should minimize use of pixmaps and backing store.

   * The user should have control of his screen real-estate. Therefore,
     you should write your applications to react to window management,
     rather than presume control of the entire screen. What you do
     inside of your top level window, however, is up to your
     application.

   * Coordinates and sizes in X are actually 16-bit quantities. They
     usually are declared as an INT16 (*note int16::) in the functions.
     Values larger than 16 bits can be truncated silently.  Sizes
     (width and height) are unsigned quantities.

   * The types COLOR (*note color::), COLORMAP (*note colormap::),
     CURSOR (*note cursor::), DISPLAY (*note display::), FONT (*note
     font::), GCONTEXT (*note gcontext::), PIXMAP (*note pixmap::),
     SCREEN (*note screen::), and WINDOW (*note window::) are defined
     solely by a functional interface. Even though they are treated
     like structures in this document, it is not specified whether they
     are implemented as structures or classes. Although some interfaces
     are described as functions, they are not required to be defined
     using DEFUN. (It is a requirement that they be functions as
     opposed to macros or special forms.)


File: clx.info,  Node: Data Types,  Prev: Programming Considerations,  Up: Introduction to CLX

2.5 Data Types
==============

The following are some data type definitions that are commonly used in
CLX function definitions.

 -- Type: alist (key-type-and-name datum-type-and-name) 'list
     ALIST defines an association list. An association list is a
     sequence, containing zero or more repetitions of the given elements
     with each of the elements expressed as (_type_ _name_).

 -- Type: angle `(number ,(* -2pi) ,(* 2pi))
     ANGLE defines an angle in units of radians and is bounded by
     (-2%pi;) and (2%pi;). Note that we are explicitly using a
     different angle representation than what is actually transmitted in
     the protocol.

 -- Type: arc-seq '(repeat-seq (int16 x) (int16 y) (card16 width)
          (card16 height) (angle angle1) (angle angle2))
     ARC-SEQ defines a six-tuple sequence of the form (_x_, _y_,
     _width_, _height_, _angle1_, _angle2_).  The points _x_ and _y_
     are signed, 16-bit quantities with a range from -32,768 to 32,767.
     The _width_ and _height_ values are unsigned, 16-bit quantities
     and range from 0 to 65,535.  _angle1_ and _angle2_ are in units of
     radians, and bounded by (-2%pi;) and (2%pi;).

 -- Type: array-index `(integer 0 ,array-dimension-limit)
     ARRAY-INDEX defines a type which is a subtype of the integers and
     can be used to describe all variables that can be array indices.
     The range is inclusive because start and end array index
     specifiers can be one (1) past the end.

 -- Type: bit-gravity '(member gravity*)
     A keyword that specifies which region of a window should be
     retained when the window is resized.

     _gravity_ - One of the following:
          :CENTER

          :NORTH

          :SOUTH

          :STATIC

          :EAST

          :NORTH-EAST

          :SOUTH-EAST :WEST

          :FORGET

          :NORTH-WEST

          :SOUTH-WEST

     If a window is reconfigured without changing its inside width or
     height, then the contents of the window moves with the window and
     are not lost. Otherwise, the contents of a resized window are
     either moved or lost, depending on its bit-gravity attribute. See
     WINDOW-BIT-GRAVITY, in *note Window Attributes::, for additional
     information.


 -- Type: bitmap '(array bit (* *))
     Specifies a two-dimensional array of bits.

 -- Structure: bitmap-format
     A structure that describes the storage format of a bitmap.

     The BITMAP-FORMAT structure contains slots for UNIT, PAD, and
     LSB-FIRST-P. The UNIT member indicates the unit of increments used
     to maintain the bitmap data. The units available for use are 8,
     16, or 32 bits. The PAD member indicates how many bits are needed
     to pad the left edge of the scan-line. The LSB-FIRST-P member is a
     predicate which indicates the ordering of bits with the bitmap
     unit.


 -- Slot of bitmap-format: unit
     Type: (MEMBER 8 16 32).

     The size of a contiguous grouping of bits, which can be 8, 16, or
     32. The default is 8.


 -- Slot of bitmap-format: pad
     Type: (MEMBER 8 16 32).

     The number of bits to left-pad the scan-line, which can be 8, 16,
     or 32. The default is 8.

 -- Slot of bitmap-format: lsb-first-p
     Type: BOOLEAN.

     A predicate indicating whether the least significant bit comes
     first (TRUE) or not (NIL).

 -- Type: boolean '(or nil (not nil))
     BOOLEAN defines a type which is all inclusive. It is used for
     variables that can take on a true (non-NIL) or false (NIL) value.

 -- Type: boole-constant `(member value*)
     BOOLE-CONSTANT defines a type that is a set of the values
     associated with the 16 boolean operation-code constants for the
     Common Lisp language. It is used for the set of allowed source and
     destination combination functions in a graphics context.

     _value_ - One of the following:
          BOOLE-1

          BOOLE-C1

          BOOLE-NAND

          BOOLE-XOR

          BOOLE-2

          BOOLE-C2

          BOOLE-NOR

          BOOLE-AND

          BOOLE-CLR

          BOOLE-ORC1

          BOOLE-ANDC1

          BOOLE-EQV

          BOOLE-ORC2

          BOOLE-ANDC2

          BOOLE-IOR

          BOOLE-SET

 -- Type: card8 '(unsigned-byte 8)
     An unsigned integer value that is a maximum of eight bits long.
     This gives a number of this type a range from 0 to 255.

 -- Type: card16 '(unsigned-byte 16)
     An unsigned integer value that is a maximum of 16 bits long. This
     gives a number of this type a range from 0 to 65,535.

 -- Type: card29 '(unsigned-byte 29)
     An unsigned integer value that is a maximum of 29 bits long. This
     gives a number of this type a range from 0 to 536,870,911.

 -- Type: card32 '(unsigned-byte 32)
     An unsigned integer value that is a maximum of 32 bits long. This
     gives a number of this type a range from 0 to 4,294,967,295.

 -- Type: color '(satisfies color-p)
     A COLOR. *Note Color Functions::, for additional information.

 -- Type: colormap '(satisfies colormap-p)
     A COLORMAP. *Note Colormap Functions::, for additional information.

 -- Type: cursor '(satisfies cursor-p)
     A CURSOR. *Note Cursors::, for additional information.

 -- Type: device-event-mask '(or mask32 (list device-event-mask-class))
     Provides a way to specify a set of bits for an event bitmask. Two
     ways of specifying the bits are allowed: by setting the event bits
     in a 32 bit mask, or by listing the keyword names of the device
     related event bits in a list.

 -- Type: device-event-mask-class '(member event*)
     A keyword name, for a device related event, that corresponds to a
     particular bit in an event bitmask. The set of names is a subset of
     the names in the type EVENT-MASK-CLASS.

     _event_ - One of the following:
          :BUTTON-1-MOTION

          :BUTTON-MOTION

          :BUTTON-2-MOTION

          :BUTTON-PRESS

          :BUTTON-3-MOTION

          :KEY-PRESS

          :BUTTON-4-MOTION

          :KEY-RELEASE

          :BUTTON-5-MOTION

          :POINTER-MOTION

 -- Type: display '(satisfies display-p)
     A connection to an X server. *Note Displays::, for additional
     information.

 -- Type: drawable '(or window pixmap)
     Both WINDOWS and PIXMAPS can be used as sources and destinations
     in graphics operations. WINDOWS and PIXMAPS together are known as
     _drawables_. However, an :INPUT-ONLY window cannot be used as a
     source or destination in a graphics operation.

 -- Type: draw-direction '(member :left-to-right :right-to-left)
     Defines a list of rotation directions for drawing arcs and fonts.
     DRAW-DIRECTION can have the values of :LEFT-TO-RIGHT or
     :RIGHT-TO-LEFT.

 -- Type: error-key '(member error*)
     Defines a list of all predefined errors. All errors (synchronous
     and asynchronous) are processed by calling an error handler in the
     display. The handler is called with the display as the first
     argument and the error-key as its second argument.

     _error_ - One of the following:
          :ACCESS

          :DRAWABLE

          :IMPLEMENTATION

          :VALUE

          :ALLOC

          :FONT

          :LENGTH

          :WINDOW

          :ATOM

          :GCONTEXT

          :MATCH

          :COLORMAP

          :ID-CHOICE

          :NAME

          :CURSOR

          :ILLEGAL-REQUEST

          :PIXMAP

 -- Type: event-key '(member event-type*)
     Defines a list that specifies all predefined event-types. Clients
     are informed of information asynchronously by means of events.
     These events can be either asynchronously generated from devices or
     generated as side effects of client requests.

     _event-type_ - One of the following:
          :BUTTON-PRESS

          :EXPOSURE

          :MOTION-NOTIFY

          :BUTTON-RELEASE

          :FOCUS-IN

          :NO-EXPOSURE

          :CIRCULATE-NOTIFY

          :FOCUS-OUT

          :PROPERTY-NOTIFY

          :CIRCULATE-REQUEST

          :GRAPHICS-EXPOSURE

          :REPARENT-NOTIFY

          :CLIENT-MESSAGE

          :GRAVITY-NOTIFY

          :RESIZE-REQUEST

          :COLORMAP-NOTIFY

          :KEYMAP-NOTIFY

          :SELECTION-CLEAR

          :CONFIGURE-NOTIFY

          :KEY-PRESS

          :SELECTION-NOTIFY

          :CONFIGURE-REQUEST

          :KEY-RELEASE

          :SELECTION-REQUEST

          :CREATE-NOTIFY

          :LEAVE-NOTIFY

          :UNMAP-NOTIFY

          :DESTROY-NOTIFY

          :MAP-NOTIFY

          :VISIBILITY-NOTIFY

          :ENTER-NOTIFY

          :MAP-REQUEST

 -- Type: event-mask '(or mask32 (list event-mask-class))
     Provides a way to specify a set of bits for an event bitmask. Two
     ways of specifying the bits are allowed: by setting the event bits
     in a 32 bit mask, or by listing the keyword names of the event
     bits in a list.

 -- Type: event-mask-class '(member event*)
     The elements of the type EVENT-MASK-CLASS are keyword names that
     correspond to a particular bit in an event bitmask.

     _event_ - One of the following:
          :BUTTON-1-MOTION

          :ENTER-WINDOW

          :POINTER-MOTION-HINT

          :BUTTON-2-MOTION

          :EXPOSURE

          :PROPERTY-CHANGE

          :BUTTON-3-MOTION

          :FOCUS-CHANGE

          :RESIZE-REDIRECT

          :BUTTON-4-MOTION

          :KEY-PRESS

          :STRUCTURE-NOTIFY

          :BUTTON-5-MOTION

          :KEY-RELEASE

          :SUBSTRUCTURE-NOTIFY

          :BUTTON-MOTION

          :KEYMAP-STATE

          :SUBSTRUCTURE-REDIRECT

          :BUTTON-PRESS

          :LEAVE-WINDOW

          :VISIBILITY-CHANGE

          :BUTTON-RELEASE

          :OWNER-GRAB-BUTTON

          :COLORMAP-CHANGE

          :POINTER-MOTION

 -- Function: make-event-keys event-mask
     Returns a list of EVENT-MASK-CLASS keyword names for the event
     bits that are set in the specified event mask.

    EVENT-MASK
          An event mask (type MASK32).


 -- Function: make-event-mask &rest keys
    KEYS
          EVENT-MASK-CLASS keywords.

     Constructs an event mask from a set of EVENT-MASK-CLASS keyword
     names.

    EVENT-MASK
          Type MASK32.


 -- Type: font '(satisfies font-p)
     A text font. *Note Font and Characters::, for additional
     information.


 -- Type: fontable '(or stringable font)
     A FONTABLE is either a FONT object or the name of one of the fonts
     in the font database.


 -- Type: font-props 'list
     A LIST that contains alternating keywords and integers.


 -- Type: gcontext '(satisfies gcontext-p)
     A graphics context. *Note Graphics Contexts::, for additional
     information.


 -- Type: gcontext-key '(member type*)
     A list of predefined types for use in GCONTEXT processing. Various
     information for graphics output is stored in a graphics context
     (GC or GContext), such as foreground pixel, background pixel, line
     width, clipping region, and so forth.

     TYPE - One of the following:
          :ARC-MODE

          :EXPOSURES

          :LINE-WIDTH

          :BACKGROUND

          :FILL-RULE

          :PLANE-MASK

          :CAP-STYLE :FILL-STYLE

          :STIPPLE

          :CLIP-MASK

          :FONT

          :SUBWINDOW-MODE

          :CLIP-X

          :FOREGROUND

          :TILE

          :CLIP-Y

          :FUNCTION

          :TS-X

          :DASH-OFFSET

          :JOIN-STYLE

          :TS-Y

          :DASHES

          :LINE-STYLE

 -- Type: grab-status '(member grab-type*)
     There are two kinds of grabs: active and passive. An _active grab_
     occurs when a single client grabs the keyboard and/or pointer
     explicitly. Clients can also grab a particular keyboard key or
     pointer button in a window. The grab activates when the key or
     button is actually pressed, and is called a _passive grab_.
     Passive grabs can be very convenient for implementing reliable
     pop-up menus.

     GRAB-TYPE - One of the following:

          :ALREADY-GRABBED

          :FROZEN

          :INVALID-TIME

          :NOT-VIEWABLE

          :SUCCESS

 -- Type: image-depth '(integer 0 32)
     Used in determining the depth of a pixmap, window, or image. The
     value specifies the number of bits deep that a given pixel has
     within a given pixmap, window, or image.

 -- Type: index-size '(member :default 8 16)
     Used to control the element size of the destination buffer given to
     the translate function when drawing glyphs. If :DEFAULT is
     specified, the size is based on the current font, if known;
     otherwise, 16 is used.

 -- Type: int8 '(signed-byte 8)
     A signed integer value that is a maximum of eight bits long. A
     number of this type can have a range from -128 to 127.

 -- Type: int16 '(signed-byte 16)
     A signed integer value that is a maximum of 16 bits long. A number
     of this type can have a range from -32,768 to 32,767.

 -- Type: int32 '(signed-byte 32)
     A signed integer value that is a maximum of 32 bits long. A number
     of this type can have a range from -2,147,483,648 to 2,147,483,647.

 -- Type: keysym 'card32
     Used as an encoding of a symbol on a keycap on a keyboard. It is an
     unsigned integer value represented in a maximum of 32 bits long. A
     KEYSYM type can have a range from 0 to 4,294,967,295.

 -- Type: mask16 ' card16
     A positional bitmask that contains 16 boolean flags.

 -- Type: mask32 ' card32
     A positional bitmask that contains 32 boolean flags.

 -- Type: modifier-key '(member modifier*)
     A keyword identifying one of the modifier keys on the keyboard
     device.

     MODIFIER - One of the following:
          :SHIFT

          :MOD-2

          :LOCK

          :MOD-3

          :CONTROL

          :MOD-4

          :MOD-1

          :MOD-5

 -- Type: modifier-mask '(or (member :any) mask16 (list modifier-key))
     A bitmask or list of keywords that specifies a set of modifier
     keys. The keyword :ANY is equivalent to any subset of modifier key.

 -- Type: pixarray '(or (array pixel (* *)) (array card16 (* *)) (array
          card8 (* *)) (array (unsigned-byte 4) (* *)) (array bit (*
          *)))
     Specifies a two-dimensional array of pixels.


 -- Type: pixel '(unsigned-byte 32)
     An unsigned integer value that is a maximum of 32 bits long. This
     gives a pixel type a value range from 0 to 4,294,967,295. Useful
     values are dependent on the class of colormap being used.


 -- Type: pixmap '(satisfies pixmap-p)
     A PIXMAP, *note Pixmaps::), for additional information.


 -- Structure: pixmap-format
     A structure that describes the storage format of a pixmap.

     The PIXMAP-FORMAT structure contains slots for DEPTH,
     BITS-PER-PIXEL, and SCANLINE-PAD. The DEPTH member indicates the
     number of bit planes in the pixmap. The BITS-PER-PIXEL member
     indicates the number of bits used to represent a single pixel. For
     X, a pixel can be 1, 4, 8, 16, 24, or 32 bits wide. As for
     BITMAP-FORMAT, the SCANLINE-PAD member indicates how many pixels
     are needed to pad the left edge of the scan-line.

 -- Slot of pixmap-format: depth
     Type: IMAGE-DEPTH.

     The number of bit planes in the pixmap.

 -- Slot of pixmap-format: bits-per-pixel
     Type: (MEMBER 1 4 8 16 24 32).

     The number of consecutive bits used to encode a single pixel. The
     default is 8.

 -- Slot of pixmap-format: scanline-pad
     Type: (MEMBER 8 16 32).

     The number of bits to left-pad the scan-line, which can be 8, 16,
     or 32. The default is 8.

 -- Type: point-seq '(repeat-seq (int16 x) (int16 y))
     The POINT-SEQ type is used to define sequences of (X,Y) pairs of
     points. The paired values are 16-bit, signed integer quantities.
     This gives the points in this type a range from -32,768 to 32,767.

 -- Type: pointer-event-mask '(or mask32 (list
          pointer-event-mask-class))
     Provides a way to specify a set of bits for an event bitmask. Two
     ways of specifying the bits are allowed: by setting the event bits
     in a 32 bit mask, or by listing the keyword names of the pointer
     related event bits in a list.


 -- Type: pointer-event-mask-class '(member event*)
     A keyword name, for a pointer related event, that corresponds to a
     particular bit in an event bitmask. The set of names is a subset of
     the names in the type EVENT-MASK-CLASS.

     EVENT - One of the following:

          :BUTTON-1-MOTION

          :BUTTON-MOTION

          :LEAVE-WINDOW

          :BUTTON-2-MOTION

          :BUTTON-PRESS

          :POINTER-MOTION

          :BUTTON-3-MOTION

          :BUTTON-RELEASE

          :POINTER-MOTION-HINT

          :BUTTON-4-MOTION

          :ENTER-WINDOW

          :BUTTON-5-MOTION

          :KEYMAP-STATE

 -- Type: rect-seq '(repeat-seq (int16 x) (int16 y) (card16 width)
          (card16 height))
     RECT-SEQ defines a four-tuple sequence of the form (X, Y, WIDTH,
     HEIGHT). The points X and Y are signed, 16-bit quantities with a
     range from -32,768 to 32,767. The WIDTH and HEIGHT values are
     unsigned, 16-bit quantities and range from 0 to 65,535.


 -- Type: repeat-seq (&rest elts) 'sequence
     A subtype used to define repeating sequences.


 -- Type: resource-id 'card29
     A numeric identifier that is assigned by the server to a server
     resource object.


 -- Type: rgb-val '(float 0.0 1.0)
     An RGB-VAL is a floating-point value between 0 and 1 that
     specifies a saturation for a red, green, or blue additive primary.
     The 0 value indicates no saturation and 1 indicates full
     saturation.


 -- Type: screen '(satisfies screen-p)
     A display screen. *Note Screens::, for further information.


 -- Type: seg-seq '(repeat-seq (int16 x1) (int16 y1) (int16 x2) (int16
          y2))
     Defines sequences of (X1, Y1, X2, Y2) sets of points. The point
     values are 16-bit, signed integer quantities. This gives the
     points in this type a range from -32,768 to 32,767.


 -- Type: state-mask-key '(or modifier-key (member button*))
     A keyword identifying one of the display modifier keys or pointer
     buttons whose state is reported in device events.

     BUTTON - One of the following:

          :BUTTON-1

          :BUTTON-4

          :BUTTON-2

          :BUTTON-5

          :BUTTON-3


 -- Function: make-state-keys state-mask
    STATE-MASK
          A 16-bit mask of type MASK16.


     Returns a list of STATE-MASK-KEY symbols corresponding to the
     STATE-MASK. A symbol belongs to the returned list if, and only if,
     the corresponding STATE-MASK bit is 1.

    STATE-KEYWORDS
          Type LIST.


 -- Function: make-state-mask &rest keys
    KEYS
          A list of STATE-MASK-KEY symbols.

     Returns a 16-bit MASK representing the given STATE-MASK-KEY
     symbols. The returned MASK contains a 1 bit for each keyword.

    MASK
          Type MASK16.

 -- Type: stringable '(or string symbol)
     Used for naming something. This type can be either a string or a
     SYMBOL whose SYMBOL-NAME is used as the string containing the
     name. The case of the characters in the string is ignored when
     comparing stringables.


 -- Type: timestamp '(or null card32)
     An encoding of a time. NIL stands for the current time.


 -- Structure: visual-info
     A structure that represents a visual type. The elements of this
     structure are ID, CLASS, RED-MASK, GREEN-MASK, BLUE-MASK,
     BITS-PER-RGB, and COLORMAP-ENTRIES.


 -- Slot of visual-info: id
     Type: CARD29.

     A unique identification number.


 -- Slot of visual-info: class
     Type: (member :direct-color :gray-scale :pseudo-color
     :static-color :static-gray :true-color).

     The class of the visual type.


 -- Slots of visual-info: red-mask
 -- Slots of visual-info: green-mask
 -- Slots of visual-info: blue-mask
     Type: PIXEL.

     The RED-MASK, GREEN-MASK, and BLUE-MASK elements are only
     meaningful for the :DIRECT-COLOR and :TRUE-COLOR classes. Each
     mask has one contiguous set of bits with no intersections.


 -- Slot of visual-info: bits-per-rgb
     Type: CARD8.

     Specifies the log base 2 of the approximate number of distinct
     color values ( individually) of red, green, and blue. Actual RGB
     values are unsigned 16-bit numbers.


 -- Slot of visual-info: colormap-entries
     Type: CARD16.

     Defines the number of available colormap entries in a newly created
     colormap. For :DIRECT-COLOR and :TRUE-COLOR, this is the size of
     an individual pixel subfield.


 -- Type: win-gravity '(member gravity*)
     A keyword that specifies how to reposition a window when its
     parent is resized.

     GRAVITY - One of the following:
          :CENTER

          :NORTH-WEST

          :STATIC

          :EAST

          :SOUTH

          :UNMAP

          :NORTH

          :SOUTH-EAST

          :WEST

          :NORTH-EAST

          :SOUTH-WEST

     If a parent window is reconfigured without changing its inside
     width or height, then all child windows move with the parent and
     are not changed. Otherwise, each child of the resized parent is
     moved, depending on the child's gravity attribute. See
     WINDOW-GRAVITY (*note Window Attributes::)), for additional
     information.


 -- Type: window '(satisfies window-p)
     A window. *Note Windows and Pixmaps::, for additional information.


 -- Type: xatom '(or string symbol)
     A name that has been assigned a corresponding unique ID by the
     server. XATOMS are used to identify properties, selections, and
     types defined in the X server. An XATOM can be either a STRING or
     SYMBOL whose SYMBOL-NAME is used as the XATOM name. The case of
     the characters in the string are significant when comparing XATOMS.



File: clx.info,  Node: Displays,  Next: Screens,  Prev: Introduction to CLX,  Up: Top

3 Displays
**********

A particular X server, together with its screens and input devices, is
called a _display_. The CLX DISPLAY object contains all the information
about the particular display and its screens, as well as the state that
is needed to communicate with the display over a particular connection.

   Before your program can use a display, you must establish a
connection to the X server driving your display. Once you have
established a connection, you then can use the CLX macros and functions
discussed in this section to return information about the display.
This section discusses how to:

   * Open (connect) a display

   * Obtain information about a display

   * Access and change display attributes

   * Close (disconnect) a display

* Menu:

* Opening the Display::
* Display Attributes::
* Managing the Output Buffer::
* Closing the Display::


File: clx.info,  Node: Opening the Display,  Next: Display Attributes,  Prev: Displays,  Up: Displays

3.1 Opening the Display
=======================

The OPEN-DISPLAY and OPEN-DEFAULT-DISPLAY functions are used to open a
connection to an X server.  OPEN-DEFAULT-DISPLAY is an extension that
is not present in the MIT CLX tree, but is preferred where available as
it uses the same rules for display defaulting as the C Xlib bindings,
and tends to get authorization right more often than OPEN-DISPLAY
(particularly on ssh-forwarded connections)

 -- Function: open-display host &key :display :protocol
    HOST
          Specifies the name of the _host_ machine on which the server
          executes. A string must be acceptable as a _host_, but
          otherwise the possible types are not constrained and will
          likely be very system dependent.

    :DISPLAY
          An integer that specifies which display device on the _host_
          should be used for this connection. This is needed since
          multiple displays can be controlled by a single X server. The
          default is display 0 (zero).

    :PROTOCOL
          A keyword argument that specifies which network protocol
          should be used for connecting to the server (for example,
          :TCP, :DNA, or :CHAOS). The set of possible values and the
          default value are implementation specific.


     Returns a DISPLAY that serves as the connection to the X server
     and contains all the information about that X server.

     Authorization, if any, is assumed to come from the environment.
     After a successful call to OPEN-DISPLAY, all screens on the
     display can be used by the client application.

    DISPLAY
          Type DISPLAY.


 -- Function: open-default-display &optional display-name
    DISPLAY-NAME
          The display to connect to.  Display names have the format

            [protocol/] [hostname] : [:] displaynumber [.screennumber]

          There are two special cases in parsing, to match that done in
          the Xlib C language bindings

             * If the hostname is `unix' or the empty string, any
               supplied protocol is ignored and a connection is made
               using the `local' transport.

             * If a double colon separates HOSTNAME from DISPLAYNUMBER,
               the protocol is assumed to be `decnet'.

          If DISPLAY-NAME is not supplied, a default will be provided
          appropriate for the local environment: on a POSIX system -
          the only kind this CLX port runs on - the default display is
          taken from the environment variable `DISPLAY'.  See also the
          section "DISPLAY NAMES" in X(7)


     Open a connection to DISPLAY-NAME or to the appropriate default
     display.

     `open-display-name' always attempts to do display authorization,
     following complicated rules that closely match the ones that the C
     Xlib bindings use.  Briefly: the hostname is resolved to an
     address, then authorization data for the (protocol, host-address,
     displaynumber) triple is looked up in the file given by the
     environment variable `AUTHORITY_PATHNAME' (typically
     `$HOME/.Xauthority').  If the protocol is `:local', or if the
     hostname resolves to the local host, authority data for the local
     machine's actual hostname - as returned by gethostname(3) - is used
     instead.



File: clx.info,  Node: Display Attributes,  Next: Managing the Output Buffer,  Prev: Opening the Display,  Up: Displays

3.2 Display Attributes
======================

The complete set of display attributes is discussed in the following
paragraphs.

 -- Function: display-authorization-data display
    DISPLAY
          A DISPLAY object.

     Returns the authorization data string for DISPLAY that was
     transmitted to the server by OPEN-DISPLAY during connection setup.
     The data is specific to the particular authorization protocol that
     was used. The DISPLAY-AUTHORIZATION-NAME function returns the
     protocol used.

    AUTHORIZATION-DATA
          Type STRING.


 -- Function: display-authorization-name display
    DISPLAY
          A DISPLAY object.

     Returns the authorization protocol namestring for DISPLAY that was
     transmitted by OPEN-DISPLAY to the server during connection setup.
     The AUTHORIZATION-NAME indicates what authorization protocol the
     client expects the server to use. Specification of valid
     authorization mechanisms is not part of the X protocol. A server
     that implements a different protocol than the client expects, or a
     server that only implements the host-based mechanism, can simply
     ignore this information. If both name and data strings are empty,
     this is to be interpreted as "no explicit authorization."

    AUTHORIZATION-NAME
          Type STRING.


 -- Function: display-bitmap-format display
    DISPLAY
          A DISPLAY object.

     Returns the _bitmap-format_ information for the specified
     _display_.

    BITMAP-FORMAT
          Type BITMAP-FORMAT.


 -- Function: display-byte-order display
    DISPLAY
          A DISPLAY object.

     Returns the BYTE-ORDER to be employed in communication with the
     server for the given DISPLAY. The possible values are as follows:

    :LSBFIRST
          Values are transmitted least significant byte first.

    :MSBFIRST
          Values are transmitted most significant byte first.

     Except where explicitly noted in the protocol, all 16-bit and
     32-bit quantities sent by the client must be transmitted with this
     BYTE-ORDER, and all 16-bit and 32-bit quantities returned by the
     server are transmitted with this BYTE-ORDER.

    BYTE-ORDER
          Either :LSBFIRST or :MSBFIRST.


 -- Function: display-display display
    DISPLAY
          A DISPLAY object.

     Returns the DISPLAY-NUMBER for the host associated with DISPLAY.

    DISPLAY-NUMBER
          Type INTEGER.


 -- Function: display-error-handler display
    DISPLAY
          A DISPLAY object.

     Returns and (with `setf') sets the ERROR-HANDLER function for the
     given DISPLAY. CLX calls (one of) the display error handler
     functions to handle server errors returned to the connection. The
     default error handler, DEFAULT-ERROR-HANDLER, signals conditions
     as they occur. *Note Errors::, for a list of the conditions that
     CLX can signal. For more information about errors and error
     handling, refer to the section entitled Common Lisp Condition
     System in the _Lisp Reference_ manual.

     If the value of ERROR-HANDLER is a sequence, it is expected to
     contain a handler function for each specific error. The error code
     is used as an index into the sequence to fetch the appropriate
     handler function. If this element is a function, it is called for
     all errors. Any results returned by the handler are ignored since
     it is assumed the handler either takes care of the error
     completely or else signals. The arguments passed to the handler
     function are the DISPLAY object, a symbol naming the type of
     error, and a set of keyword-value argument pairs that vary
     depending on the type of error. For all core errors, the
     keyword-value argument pairs are:

     :CURRENT-SEQUENCE                  CARD16
     :MAJOR                             CARD8
     :MINOR                             CARD16
     :SEQUENCE                          CARD16

     For COLORMAP, CURSOR, DRAWABLE, FONT, GCONTEXT, ID-CHOICE, PIXMAP,
     and WINDOW errors, the keyword-value pairs are the core error
     pairs plus:

     :RESOURCE-ID                       CARD32

     For :ATOM errors, the keyword-value pairs are the core error pairs
     plus:

     :ATOM-ID                           CARD32

     For :VALUE errors, the keyword-value pairs are the core error
     pairs plus:

     :VALUE                             CARD32

    ERROR-HANDLER
          Type FUNCTION or SEQUENCE.


 -- Function: display-image-lsb-first-p display
    DISPLAY
          A DISPLAY object.

     Although the server is generally responsible for byte swapping
     communication data to match the client, images (pixmaps/bitmaps)
     are always transmitted and received in formats (including byte
     order) specified by the server. Within images for each scan-line
     unit in bitmaps or for each pixel value in pixmaps, the leftmost
     bit in the image as displayed on the screen is either the least or
     most significant bit in the unit. For the given DISPLAY,
     DISPLAY-IMAGE-LSB-FIRST-P returns non-NIL if the leftmost bit is
     the least significant bit; otherwise, it returns NIL.

    IMAGE-LSB-FIRST-P
          Type BOOLEAN.


 -- Function: display-keycode-range display
    DISPLAY
          A DISPLAY object.

     Returns MIN-KEYCODE and MAX-KEYCODE as multiple values. See the
     DISPLAY-MAX-KEYCODE and DISPLAY-MIN-KEYCODE functions for
     additional information.

    MIN-KEYCODE
    MAX-KEYCODE
          Type CARD8.


 -- Function: display-max-keycode display
    DISPLAY
          A DISPLAY object.

     Returns the maximum keycode value for the specified _display_.
     This value is never greater than 255. Not all keycodes in the
     allowed range are required to have corresponding keys.

    MAX-KEYCODE
          Type CARD8.


 -- Function: display-max-request-length display
    DISPLAY
          A DISPLAY object.

     Returns the maximum length of a request, in four-byte units, that
     is accepted by the specified _display_. Requests larger than this
     generate a length error, and the server will read and simply
     discard the entire request. This length is always at least 4096
     (that is, requests of length up to and including 16384 bytes are
     accepted by all servers).

    MAX-REQUEST-LENGTH
          Type CARD16.


 -- Function: display-min-keycode display
    DISPLAY
          A DISPLAY object.

     Returns the minimum keycode value for the specified DISPLAY. This
     value is never less than eight. Not all keycodes in the allowed
     range are required to have corresponding keys.

    MIN-KEYCODE
          Type CARD8.


 -- Function: display-motion-buffer-size display
    DISPLAY
          A DISPLAY object.

     Returns the approximate size of the motion buffer for the specified
     DISPLAY. The server can retain the recent history of pointer
     motion at a finer granularity than is reported by :MOTION-NOTIFY
     events. Such history is available through the MOTION-EVENTS
     function.

    MOTION-BUFFER-SIZE
          Type CARD32.


 -- Function: display-p display
    DISPLAY-P
          Type BOOLEAN.

     Returns non-NIL if _display_ is a DISPLAY object;

 -- Function: display-pixmap-formats display
    DISPLAY
          A DISPLAY object.

     Returns the list of PIXMAP-FORMAT values for the given _display_.
     This list contains one entry for each depth value. The entry
     describes the format used to represent images of that depth. An
     entry for a depth is included if any screen supports that depth,
     and all screens supporting that depth must support (only) the
     format for that depth.

    PIXMAP-FORMATS
          Type LIST.


 -- Function: display-plist display
    DISPLAY
          A DISPLAY object.

     Returns and (with `setf') sets the property list for the specified
     _display_. This function provides a hook where extensions can add
     data.
    PLIST
          Type LIST.


 -- Function: display-protocol-major-version display
    DISPLAY
          A DISPLAY object.

     Returns the major version number of the X protocol associated with
     the specified _display_. In general, the major version would
     increment for incompatible changes. The returned protocol version
     number indicates the protocol the server actually supports. This
     might not equal the version supported by the client. The server
     can (but need not) refuse connections from clients that offer a
     different version than the server supports. A server can (but need
     not) support more than one version simultaneously.
    PROTOCOL-MAJOR-VERSION
          Type CARD16.


 -- Function: display-protocol-minor-version display
    DISPLAY
          A DISPLAY object.

     Returns the minor protocol revision number associated with the
     specified _display_. In general, the minor version would increment
     for small upward compatible changes in the X protocol.
    PROTOCOL-MINOR-VERSION
          Type CARD16.


 -- Function: display-protocol-version display
    DISPLAY
          A DISPLAY object.

     Returns _protocol-major-version_ and _protocol-minor-version_ as
     multiple values. See the DISPLAY-PROTOCOL-MAJOR-VERSION and
     DISPLAY-PROTOCOL-MINOR-VERSION functions for additional
     information.

    PROTOCOL-MAJOR-VERSION
    PROTOCOL-MINOR-VERSION


 -- Function: display-resource-id-base display
    DISPLAY
          A DISPLAY object.

     Returns the _resource-id-base_ value that was returned from the
     server during connection setup for the specified _display_. This
     is used in combination with the _resource-id-mask_ to construct
     valid IDs for this connection.
    RESOURCE-ID-BASE
          Type RESOURCE-ID.


 -- Function: display-resource-id-mask display
    DISPLAY
          A DISPLAY object.

     Returns the _resource-id-mask_ that was returned from the server
     during connection setup for the specified _display_. The
     _resource-id-mask_ contains a single contiguous set of bits (at
     least 18) which the client uses to allocate resource IDs for types
     WINDOW, PIXMAP, CURSOR, FONT, GCONTEXT, and COLORMAP by choosing a
     value with (only) some subset of these bits set, and ORing it with
     the _resource-id-base_. Only values constructed in this way can be
     used to name newly created server resources over this connection.
     Server resource IDs never have the top three bits set. The client
     is not restricted to linear or contiguous allocation of server
     resource IDs. Once an ID has been freed, it can be reused, but this
     should not be necessary.

     An ID must be unique with respect to the IDs of all other server
     resources, not just other server resources of the same type.
     However, note that the value spaces of server resource
     identifiers, atoms, visualids, and keysyms are distinguished by
     context, and as such are not required to be disjoint (for example,
     a given numeric value might be both a valid window ID, a valid
     atom, and a valid keysym.)
    RESOURCE-ID-MASK
          Type RESOURCE-ID.


 -- Function: display-roots display
    DISPLAY
          A DISPLAY object.

     Returns a list of all the SCREEN structures available for the
     given _display_.
    ROOTS
          A list of screens.


 -- Function: display-vendor display
    DISPLAY
          A DISPLAY object.
     Returns _vendor-name_ and _release-number_ as multiple values. See
     the DISPLAY-VENDOR-NAME and DISPLAY-RELEASE-NUMBER functions for
     additional information.
    VENDOR-NAME
    RELEASE-NUMBER


 -- Function: display-vendor-name display
    DISPLAY
          A DISPLAY object.

     Returns a string that provides some vendor identification of the X
     server implementation associated with the specified _display_.
    VENDOR-NAME
          Type STRING.


 -- Function: display-version-number display
    DISPLAY
          A DISPLAY object.

     Returns the X protocol version number for this implementation of
     CLX.
    VERSION-NUMBER
          Type CARD16.


 -- Function: display-xid display
    DISPLAY
          A DISPLAY object.

     Returns the function that is used to allocate server resource IDs
     for this _display_.
    RESOURCE-ALLOCATOR
          Type FUNCTION.


 -- Macro: with-display display &body body
     This macro is for use in a multi-process environment. WITH-DISPLAY
     provides exclusive access to the local DISPLAY object for multiple
     request generation. It need not provide immediate exclusive access
     for replies. That is, if another process is waiting for a reply
     (while not in a WITH-DISPLAY), then synchronization need not (but
     can) occur immediately. Except where noted, all routines
     effectively contain an implicit WITH-DISPLAY where needed, so that
     correct synchronization is always provided at the interface level
     on a per-call basis. Nested uses of this macro work correctly.
     This macro does not prevent concurrent event processing (*note
     with-event-queue::).

    DISPLAY
          A DISPLAY.



File: clx.info,  Node: Managing the Output Buffer,  Next: Closing the Display,  Prev: Display Attributes,  Up: Displays

3.3 Managing the Output Buffer
==============================

Most CLX functions cause output requests to be generated to an X
server. Output requests are not transmitted immediately but instead are
stored in an _output buffer_ for the appropriate display. Requests in
the output buffer are typically sent only when the buffer is filled.
Alternatively, buffered requests can be sent prior to processing an
event in the input event queue (*note Processing Events::). In either
case, CLX sends the output buffer automatically without explicit
instructions from the client application.

   However, in some cases, explicit control over the output buffer is
needed, typically to ensure that the X server is in a consistent state
before proceeding further. The DISPLAY-FORCE-OUTPUT and
DISPLAY-FINISH-OUTPUT functions allow a client program to synchronize
with buffered output requests.

 -- Function: display-after-function display
    DISPLAY
          A DISPLAY object.

     Returns and (with `setf') sets the _after-function_ for the given
     _display_. If _after-function_ is non-NIL, it is a function that
     is called after every protocol request is generated, even those
     inside an explicit WITH-DISPLAY, but never called from inside the
     _after-function_. The function is called inside the effective
     WITH-DISPLAY for the associated request. The default value is NIL.
     This can be set, for example, to #'DISPLAY-FORCE-OUTPUT or #'
     DISPLAY-FINISH-OUTPUt.
    AFTER-FUNCTION
          Type FUNCTION or NULL.


 -- Function: display-force-output display
    DISPLAY
          A DISPLAY object.

     Forces any buffered output to be sent to the X server.


 -- Function: display-finish-output display
    DISPLAY
          A DISPLAY object.

     Forces any buffered output to be sent to the X server and then
     waits until all requests display error handler. Any events
     generated by output requests are read and stored in the event
     queue.



File: clx.info,  Node: Closing the Display,  Prev: Managing the Output Buffer,  Up: Displays

3.4 Closing the Display
=======================

To close or disconnect a display from the X server, use CLOSE-DISPLAY.

 -- Function: close-display display
    DISPLAY
          A DISPLAY object.

     Closes the connection to the X server for the specified DISPLAY.
     It destroys all server resources (WINDOW, FONT, PIXMAP, COLORMAP,
     CURSOR, and GCONTEXT), that the client application has created on
     this display, unless the close down mode of the server resource
     has been changed (*note set-close-down-mode::). Therefore, these
     server resources should never be referenced again. In addition,
     this function discards any output requests that have been buffered
     but have not yet been sent.



File: clx.info,  Node: Screens,  Next: Windows and Pixmaps,  Prev: Displays,  Up: Top

4 Screens
*********

* Menu:

* Screens and Visuals::
* Screen Attributes::


File: clx.info,  Node: Screens and Visuals,  Next: Screen Attributes,  Prev: Screens,  Up: Screens

4.1 Screens and Visuals
=======================

An X display supports graphical output to one or more _screens_. Each
screen has its own root window and window hierarchy. Each window
belongs to exactly one screen and cannot simultaneously appear on
another screen.

   The kinds of graphics hardware used by X screens can vary greatly in
their support for color and in their methods for accessing raster
memory. X uses the concept of a _visual type_ (usually referred to
simply as a _visual_) which uniquely identifies the hardware
capabilities of a display screen. Fundamentally, a visual is
represented by a CARD29 integer ID, which uniquely identifies the
visual type relative to a single display. CLX also represents a visual
with a VISUAL-INFO structure that contains other attributes associated
with a visual (*note Data Types::). A screen can support more than one
depth (that is, pixel size), and for each supported depth, a screen may
support more than one visual.  However, it is more typical for a screen
to have only a single depth and a single visual type.

   A visual represents various aspects of the screen hardware, as
follows:

   * A screen can be color or gray-scale.

   * A screen can have a colormap that is either writable or read-only.

   * A screen can have a single colormap or separate colormaps for each
     of the red, green, and blue components. With separate colormaps, a
     pixel value is decomposed into three parts to determine indexes
     into each of the red, green, and blue colormaps.


   CLX supports the following classes of visual types: :DIRECT-COLOR,
:GRAY-SCALE, :PSEUDO-COLOR, :STATIC-COLOR, :STATIC-GRAY, and
:TRUE-COLOR. The following tables show how the characteristics of a
screen determine the class of its visual type.

   For screens with a single colormap:

Read-only:STATIC-COLOR:STATIC-GRAY
Writable:PSEUDO-COLOR:GRAY-SCALE

   For screens with red, green, and blue colormaps:

Read-only              :TRUE-COLOR            
Writable               :DIRECT-COLOR          :GRAY-SCALE

   The visual class also indicates how screen colormaps are handled.
*note Colormaps and Colors::).


File: clx.info,  Node: Screen Attributes,  Prev: Screens and Visuals,  Up: Screens

4.2 Screen Attributes
=====================

In CLX, each display screen is represented by a SCREEN structure. The
DISPLAY-ROOTS function returns the list of SCREEN structures for the
display. The following paragraphs discuss the attributes of CLX SCREEN
structures.

 -- Function: screen-backing-stores screen
    SCREEN
          A SCREEN.

     Returns a value indicating when the _screen_ supports backing
     stores, although it may be storage limited in the number of
     windows it can support at once. The value returned can be one of
     :ALWAYS, :NEVER, or :WHEN-MAPPED.

    BACKING-STORES-TYPE
          One of :ALWAYS, :NEVER, or :WHEN-MAPPED.


 -- Function: screen-black-pixel screen
    SCREEN
          A SCREEN.

     Returns the black pixel value for the specified _screen_.

    BLACK-PIXEL
          Type PIXEL.


 -- Function: screen-default-colormap screen
    SCREEN
          A SCREEN.

     Returns the _default-colormap_ for the specified _screen_. The
     _default-colormap_ is initially associated with the root window.
     Clients with minimal color requirements creating windows of the
     same depth as the root may want to allocate from this map by
     default. Most routine allocations of color should be made out of
     this colormap.

    DEFAULT-COLORMAP
          Type COLORMAP.


 -- Function: screen-depths screen
    SCREEN
          A SCREEN.

     Returns an association list that specifies what drawable depths
     are supported on the specified _screen_. Elements of the returned
     association list have the form (depth _visual_*), where each
     _visual_ is a VISUAL-INFO structure. Pixmaps are supported for
     each depth listed, and windows of that depth are supported if at
     least one visual type is listed for the depth.  A pixmap depth of
     one is always supported and listed, but windows of depth one might
     not be supported. A depth of zero is never listed, but zero-depth
     :INPUT-ONLY windows are always supported.

    DEPTHS
          Type ALIST.


 -- Function: screen-event-mask-at-open screen
    SCREEN
          A SCREEN.

     Returns the initial root event mask for the specified _screen_.

    EVENT-MASK-AT-OPEN
          Type MASK32.


 -- Function: screen-height screen
    SCREEN
          A SCREEN.

     Returns the _height_ of the specified _screen_ in pixel units.

    HEIGHT
          Type CARD16.


 -- Function: screen-height-in-millimeters screen
    SCREEN
          A SCREEN.

     Returns the height of the specified _screen_ in millimeters. The
     returned height can be used with the width in millimeters to
     determine the physical size and the aspect ratio of the screen.

    HEIGHT-IN-MILLIMETERS
          Type CARD16.


 -- Function: screen-max-installed-maps screen
    SCREEN
          A SCREEN.

     Returns the maximum number of colormaps that can be installed
     simultaneously with INSTALL-COLORMAP.

    MAX-INSTALLED-COLORMAPS
          Type CARD16.


 -- Function: screen-min-installed-maps screen
    SCREEN
          A SCREEN.

     Returns the minimum number of colormaps that can be guaranteed to
     be installed simultaneously.

    MIN-INSTALLED-COLORMAPS
          Type CARD16.


 -- Function: screen-p screen
    SCREEN-P
          Type BOOLEAN.

     Returns non-`nil' if the _screen_ argument is a

 -- Function: screen-plist screen
    SCREEN
          A SCREEN.

     Returns and (with `setf') sets the property list for the specified
     _screen_. This function provides a hook where extensions can add
     data.

    PLIST
          Type LIST.


 -- Function: screen-root screen
    SCREEN
          A SCREEN.

     Returns the _root-window_ for the specified _screen_. This
     function is useful with functions that take a parent window as an
     argument. The class of the root window is always :INPUT-OUTPUT.

    ROOT-WINDOW
          Type WINDOW or NULL.


 -- Function: screen-root-depth screen
    SCREEN
          A SCREEN.

     Returns the depth of the root window for the specified _screen_.
     Other depths can also be supported on this _screen_.

    ROOT-WINDOW-DEPTH
          Type IMAGE-DEPTH.


 -- Function: screen-root-visual screen
    SCREEN
          A SCREEN.

     Returns the default visual type for the root window for the
     specified _screen_.

    ROOT-WINDOW-VISUAL
          Type CARD29.


 -- Function: screen-save-unders-p screen
    SCREEN
          A screen.

     If true, the server can support the save-under mode in
     CREATE-WINDOW and in changing window attributes.

    SAVE-UNDERS-P
          Type BOOLEAN.


 -- Function: screen-white-pixel screen
    SCREEN
          A screen.

     Returns the white pixel value for the specified _screen_.

    WHITE-PIXEL
          Type PIXEL.


 -- Function: screen-width screen
    SCREEN
          A screen.

     Returns the width of the specified _screen_ in pixel units.

    WIDTH
          Type CARD16.


 -- Function: screen-width-in-millimeters screen
    SCREEN
          A screen.

     Returns the width of the specified _screen_ in millimeters. The
     returned width can be used with the height in millimeters to
     determine the physical size and the aspect ratio of the screen.

    WIDTH-IN-MILLIMETERS
          Type CARD16.



File: clx.info,  Node: Windows and Pixmaps,  Next: Graphics Contexts,  Prev: Screens,  Up: Top

5 Windows and Pixmaps
*********************

* Menu:

* Drawables::
* Creating Windows::
* Window Attributes::
* Stacking Order::
* Window Hierarchy::
* Mapping Windows::
* Destroying Windows::
* Pixmaps::


File: clx.info,  Node: Drawables,  Next: Creating Windows,  Prev: Windows and Pixmaps,  Up: Windows and Pixmaps

5.1 Drawables
=============

Both windows and pixmaps can be used as sources and destinations in
graphics operations. These are collectively known as _drawables_. The
following functions apply to both windows and pixmaps.

 -- Function: drawable-display drawable
    DRAWABLE
          A DRAWABLE object.

     Returns the display for the specified _drawable_.


 -- Function: drawable-equal drawable-1 drawable-2
    DRAWABLE-1
    DRAWABLE-2
          DRAWABLE objects.

     Returns true if the two arguments refer to the same server
     resource, and NIL if they do not.


 -- Function: drawable-id drawable
    DRAWABLE
          A DRAWABLE object.

     Returns the unique resource ID assigned to the specified DRAWABLE.

    ID
          Type RESOURCE-ID.


 -- Function: drawable-p drawable
    BOOLE
          Type BOOLEAN.

     Returns true if the argument is a DRAWABLE and NIL otherwise.


 -- Function: drawable-plist drawable
    PLIST
          A property list.

     Returns and (with `setf') sets the property list for the specified
     _drawable_. This function provides a hook where extensions can add
     data.



File: clx.info,  Node: Creating Windows,  Next: Window Attributes,  Prev: Drawables,  Up: Windows and Pixmaps

5.2 Creating Windows
====================

A window is a DRAWABLE that can also receive input events. CLX
represents a window with a WINDOW object. The CREATE-WINDOW function
creates a new WINDOW object.

 -- Function: create-window &key :parent :x :y :width :height (:depth
          0) (:border-width 0) (:class :copy) (:visual :copy)
          :background :border :gravity :bit-gravity :backing-store
          :backing-planes :backing-pixel :save-under :event-mask
          :do-not-propagate-mask :override-redirect :colormap :cursor
    :PARENT
          The parent window. This argument is required.

    :X
    :Y
          INT16 coordinates for the outside upper-left corner of the new
          window with respect to the origin (inside upper-left corner)
          of the :PARENT. These arguments are required.

    :WIDTH
    :HEIGHT
          CARD16 values for the size of the new window. These arguments
          are required.

    :DEPTH
          A CARD16 specifying the depth of the new window.

    :CLASS
          One of :INPUT-OUTPUt, :INPUT-ONLY, or :COPY.

    :VISUAL
          A CARD29 ID specifying the visual type of the new window.

    :BACKGROUND
    :BACKING-PIXEL
    :BACKING-PLANES
    :BACKING-STORE
    :BIT-GRAVITY
    :BORDER
    :BORDER-WIDTH
    :COLORMAP
    :CURSOR
    :DO-NOT-PROPAGATE-MASK
    :EVENT
    :GRAVITY
    :OVERRIDE-REDIRECT
    :SAVE-UNDER
          Initial attribute values for the new window. If NIL, the
          default value is defined by the X protocol.See paragraph

     Creates and returns a window. A :PARENT window must be specified;
     the first window created by a client will have a root window as
     its :PARENT. The new window is initially unmapped and is placed on
     top of its siblings in the stacking order. A :CREATE-NOTIFY event
     is generated by the server.

     The :CLASS of a window can be :INPUT-OUTPUT or :INPUT-ONLY.
     Windows of class :INPUT-ONLY cannot be used as the destination
     drawable for graphics output and can never receive :EXPOSURE
     events, but otherwise operate the same as :INPUT-OUTPUT windows.
     The :CLASS can also be :COPY, in which case the new window has the
     same class as its :PARENT.

     For an :INPUT-OUTPUT window, the :VISUAL and :DEPTH must be a
     combination supported by the :PARENT's screen, but the :DEPTH need
     not be the same as the :PARENT's. The :PARENT of an :INPUT-OUTPUT
     window must also be :INPUT-OUTPUT. A :DEPTH of 0 means that the
     depth of the :PARENT is used.

     For an :INPUT-ONLY window, the :DEPTH must be zero, and the
     :VISUAL must be supported by the :PARENT's screen. The :PARENT of
     an :INPUT-ONLY window can be of any class. The only attributes
     that can be given for an :INPUT-ONLY window are :CURSOR,
     :DO-NOT-PROPAGATE-MASK, :EVENT-MASK, :GRAVITY, and
     :OVERRIDE-REDIRECT.

    WINDOW
          Type WINDOW.



File: clx.info,  Node: Window Attributes,  Next: Stacking Order,  Prev: Creating Windows,  Up: Windows and Pixmaps

5.3 Window Attributes
=====================

The following paragraphs describe the CLX functions used to return or
change window attributes. Using the WITH-STATE macro improves the
performance of attribute access by batching related accesses in the
minimum number of server requests.

 -- Function: drawable-border-width drawable
    DRAWABLE
          A DRAWABLE object.

     Returns the _border-width_ of the _drawable_ in pixels. It always
     returns zero if the _drawable_ is a pixmap or an :INPUT-ONLY
     window. Used with `setf', this function also changes the border
     width of the :INPUT-ONLY window. The default border width of a new
     window is zero.

     Changing just the border width leaves the outer left corner of a
     window in a fixed position but moves the absolute position of the
     window's origin. It is an error to make the border width of an
     :INPUT-ONLY window nonzero.

     When changing the border-width of a window, if the
     override-redirect attribute of the window is :OFF and some other
     client has selected :SUBSTRUCTURE-REDIRECT on the parent, a
     :CONFIGURE-REQUEST event is generated, and no further processing
     is performed.  Otherwise, the border-width is changed.

    BORDER-WIDTH
          Type CARD16.


 -- Function: drawable-depth drawable
    DRAWABLE
          A DRAWABLE object.

     Returns the depth of the specified _drawable_ (bits per pixel).

    DEPTH
          Type CARD8.


 -- Function: drawable-height drawable
    INSIDE-HEIGHT
          Type CARD16.


 -- Function: drawable-width drawable
    DRAWABLE
          A DRAWABLE object.

     These functions return the height or width of the _drawable_.
     These coordinates define the inside size of the _drawable_, in
     pixels. Used with `setf', these functions also change the inside
     height or width of a window. However, the height or width of a
     pixmap cannot be changed.

     Changing the width and height resizes a window without changing its
     position or stacking priority.

     Changing the size of a mapped window may cause the window to lose
     its contents and generate an :EXPOSURE event. If a mapped window is
     made smaller, :EXPOSURE events are generated on windows that it
     formerly obscured.

     When changing the size of a window, if the override-redirect
     attribute of the window is :OFF and some other client has selected
     :SUBSTRUCTURE-REDIRECT on the parent, a :CONFIGURE-REQUEST event
     is generated, and no further processing is performed. Otherwise,
     if another client has selected :RESIZE-REDIRECT on the window, a
     :RESIZE-REQUEST event is generated, and the current inside width
     and height are maintained. Note that the override-redirect
     attribute of the window has no effect on :RESIZE-REDIRECT and that
     :SUBSTRUCTURE-REDIRECT on the parent has precedence over
     :RESIZE-REDIRECT on the window.

     When the inside size of the window is changed, the children of the
     window can move according to their window gravity. Depending on the
     window's bit gravity, the contents of the window can also be moved.

    INSIDE-WIDTH
          Type CARD16.


 -- Function: drawable-x drawable
    OUTSIDE-LEFT
          Type INT16.


 -- Function: drawable-y drawable
    DRAWABLE
          A DRAWABLE object.

     These functions return the x or y coordinate of the specified
     _drawable_. They always return zero if the _drawable_ is a pixmap.
     These coordinates define the location of the top left pixel of the
     window's border or of the window, if it has no border. Used with
     `setf', these functions also change the x or y coordinate of a
     window. However, the x or y coordinate of a pixmap cannot be
     changed.

     Changing the x and y coordinates moves a window without changing
     its size or stacking priority. Moving a mapped window generates
     :EXPOSURE events on any formerly obscured windows.

     When changing the position of a window, if the override-redirect
     attribute of the window is :OFF and some other client has selected
     :SUBSTRUCTURE-REDIRECT on the parent, a :CONFIGURE-REQUEST event
     is generated, and no further processing is performed.  Otherwise,
     the window is moved.

    OUTSIDE-TOP
          Type INT16.


 -- Function: window-all-event-masks window
    WINDOW
          A WINDOW.

     Returns the inclusive-or of the event masks selected on the
     specified _window_ by all clients.
    ALL-EVENT-MASKS
          Type MASK32.


 -- Function: setf (window-background) window background
    WINDOW
          A WINDOW.

    BACKGROUND
          Either a PIXEL, a PIXMAP, :NONE, or :PARENT-RELATIVE.

     Changes the _background_ attribute of the _window_ to the
     specified value. This operation is not allowed on an :INPUT-ONLY
     window. Changing the background does not cause the window contents
     to be changed. Note that the background of a window cannot be
     returned from the X server. The default background of a new window
     is :NONE.

     In general, the server automatically fills in exposed areas of the
     window when they are first made visible. A background pixmap is
     tiled to fill each area. However, if the background is :NONE, the
     server will not modify exposed areas. If the background is
     :PARENT-RELATIVE, the window and its parent must have the same
     depth. In this case, the window shares the same background as its
     parent. The parent's background is not copied and is reexamined
     whenever the window's background is required. If the background is
     :PARENT-RELATIVE, the background pixmap tile origin is the same as
     the parent's; otherwise, the tile origin is the window origin.

    BACKGROUND
          Either a PIXEL, a PIXMAP, :NONE, or :PARENT-RELATIVE.


 -- Function: window-backing-pixel window
    WINDOW
          A WINDOW.

     Returns and (with `setf') changes the value of the backing-pixel
     attribute for the specified _window_. Changing the backing-pixel
     attribute of a mapped window may have no immediate effect. The
     default backing-pixel of a new window is zero.

    BACKING-PIXEL
          Type PIXEL.


 -- Function: window-backing-planes window
    WINDOW
          A WINDOW.

     Returns and (with `setf') changes the value of the backing-planes
     attribute for the specified _window_. Changing the backing-planes
     attribute of a mapped window may have no immediate effect. The
     default backing-planes of a new window is all one's.

    BACKING-PLANES
          Type PIXEL.


 -- Function: window-backing-store window
    WINDOW
          A WINDOW.

     Returns and (with `setf') changes the value of the backing-store
     attribute for the specified _window_. Changing the backing-store
     attribute of an obscured window to :WHEN-MAPPED or :ALWAYS may
     have no immediate effect. The default backing-store of a new
     window is :NOT-USEFUL.

    BACKING-STORE-TYPE
          One of :ALWAYS, :NOT-USEFUL, or :WHEN-MAPPED.


 -- Function: window-bit-gravity window
    WINDOW
          A WINDOW.

     Returns and (with `setf') changes the bit-gravity attribute of the
     _window_. If a window is reconfigured without changing its inside
     width or height, the contents of the window move with the window
     and are not lost. Otherwise, the contents of the resized window
     are either moved or lost, depending on its bit-gravity attribute.
     The default bit-gravity of a new window is :FORGET.

     For example, suppose a window's size is changed by _W_ pixels in
     width and _H_ pixels in height. The following table shows, for
     each bit-gravity value, the change in position (relative to the
     window origin) that results for each pixel of the window contents.

     :CENTER       _W/_2      _H/_2
     :EAST         _W_        _H/_2
     :NORTH        _W/_2      0
     :NORTH-EAST   _W_        0
     :NORTH-WEST   0          0
     :SOUTH        _W/_2      _H_
     :SOUTH-EAST   W          H
     :SOUTH-WEST   0          H
     :WEST         0          H/2

     A :STATIC bit-gravity indicates the contents or window should not
     move relative to the origin of the root window.

     A server can choose to ignore the specified bit-gravity attribute
     and use :FORGET instead.  A :FORGET bit-gravity attribute
     indicates that the window contents are always discarded after a
     size change, even if backing-store or save-under attributes are
     :ON. The window's background is displayed (unless it is :NONE),
     and zero or more :EXPOSURE events are generated.
    BIT-GRAVITY
          Type BIT-GRAVITY.


 -- Function: setf (window-border) window border
    WINDOW
          A WINDOW.

    BORDER
          Either a PIXEL, a PIXMAP, or :COPY.

     Changes the _border_ attribute of the _window_ to the specified
     value. This operation is not allowed on an :INPUT-ONLY window.
     Changing the border attribute also causes the window border to be
     repainted. Note that the border of a window cannot be returned
     from the X server. The default border of a new window is :COPY.

     A border pixmap is tiled to fill the border. The border pixmap tile
     origin is the same as the background tile origin. A border pixmap
     and the window must have the same root and depth. If the border is
     :COPY, the parent's border is copied and used; subsequent changes
     to the parent's border do not affect the window border.
    BORDER
          Either a PIXEL, a PIXMAP, or :COPY.


 -- Function: window-class window
    WINDOW
          A WINDOW.

     Returns the _class_ of the specified _window_.
    CLASS
          Either :INPUT-OUTPUT or :INPUT-ONLY.


 -- Function: window-colormap window
    WINDOW
          A WINDOW.

     Returns and (with `setf') changes the value of the colormap
     attribute for the specified _window_. A value of :COPY is never
     returned, since the parent's colormap attribute is actually
     copied, but the attribute can be set to :COPY in a `setf' form.
     Changing the colormap of a window (defining a new map, not
     changing the contents of the existing map) generates a
     :COLORMAP-NOTIFY event. Changing the colormap of a visible window
     may have no immediate effect on the screen (*note
     install-colormap::). The default colormap of a new window is :COPY.
    COLORMAP
          Type COLORMAP or NULL.


 -- Function: window-colormap-installed-p window
    WINDOW
          A WINDOW.

     Returns non-NIL if the colormap associated with this _window_ is
     installed. Otherwise, this function returns NIL.
    COLORMAP-INSTALLED-P
          Type BOOLEAN.


 -- Function: setf (window-cursor) window cursor
    WINDOW
          A WINDOW.

    CURSOR
          Either CURSOR or :NONE.

     Changes the _cursor_ attribute of the _window_ to the specified
     value. Changing the cursor of a root window to :NONE restores the
     default cursor. Note that the cursor of window cannot be returned
     from the X server. The default cursor of a new window is :NONE.

    CURSOR
          Type CURSOR or :NONE.


 -- Function: window-display window
    WINDOW
          A WINDOW.

     Returns the DISPLAY object associated with the specified _window_.
    DISPLAY
          Type DISPLAY.


 -- Function: window-do-not-propagate-mask window
    WINDOW
          A WINDOW.

     Returns and (with `setf') changes the do-not-propagate-mask
     attribute for the window.  The default do-not-propagate-mask of a
     new window is zero.

     If a window receives an event from one of the user input devices,
     and if no client has selected to receive the event, the event can
     instead be propagated up the window hierarchy to the first
     ancestor for which some client has selected it. However, any event
     type selected by the do-not-propagate-mask is not be propagated.
     The types of events that can be selected by the
     do-not-propagate-mask are those of type DEVICE-EVENT-MASK-CLASS.
     *Note Selecting Events::.
    DO-NOT-PROPAGATE-MASK
          Type MASK32.


 -- Function: window-equal window-1 window-2
    WINDOW-1
    WINDOW-2
          The windows to compare for equality.

     Returns non-NIL if the two arguments are the same window, and NIL
     if they are not.
    EQUAL-P
          Type BOOLEAN.


 -- Function: window-event-mask window
    WINDOW
          A WINDOW.

     Returns and (with `setf') changes the value of the event-mask
     attribute for the _window_.  The default event-mask of a new
     window is zero.
    EVENT-MASK
          Type MASK32.


 -- Function: window-gravity window
    WINDOW
          A WINDOW.

     Returns and (with `setf') changes the gravity attribute of the
     _window_. If a parent window is reconfigured without changing its
     inside width or height, then all child windows move with the parent
     and are not changed. Otherwise, each child of the resized parent is
     moved, depending on the child's gravity attribute. The default
     gravity of a new window is :NORTH-WEST.

     For example, suppose the size of the window's parent is changed by
     _W_ pixels in width and _H_ pixels in height. The following table
     shows, for each possible gravity value, the resulting change in
     the window's position relative to its parent's origin. When the
     window is moved, two events are generated-a :CONFIGURE-NOTIFY event
     followed by a :GRAVITY-NOTIFY event.

     :CENTER   _W/_2      _H/_2
     :EAST     _W_        _H/_2
     :NORTH    _W/_2      0
     :NORTH-EAST_W_        0
     :NORTH-WEST0          0
     :SOUTH    _W/_2      _H_
     :SOUTH-EASTW          H
     :SOUTH-WEST0          H
     :WEST     0          H/2

     A :STATIC gravity indicates that the position of the window should
     not move relative to the origin of the root window.

     An :UNMAP gravity is like :NORTH-WEST, except the window is also
     unmapped and an :UNMAP-NOTIFY event is generated. This
     :UNMAP-NOTIFY event is generated after the :CONFIGURE-NOTIFY event
     is generated for the parent.
    GRAVITY
          Type WIN-GRAVITY.


 -- Function: window-id window
    WINDOW
          A WINDOW.

     Returns the unique ID assigned to _window_.
    ID
          Type RESOURCE-ID.


 -- Function: window-map-state window
    WINDOW
          A WINDOW.

     Returns the map state of _window_. A window is :UNVIEWABLE if it
     is mapped but some ancestor is unmapped.
    MAP-STATE
          One of :UNMAPPED, :UNVIEWABLE, or :VIEWABLE.


 -- Function: window-override-redirect window
    WINDOW
          A WINDOW.

     Returns and (with `setf') changes the value of the
     override-redirect attribute for _window_.  The default
     override-redirect of a new window is :OFF.

     The override-redirect attribute determines whether or not attempts
     to change window geometry or parent hierarchy can be _redirected_
     by a window manager or some other client. The functions that might
     be affected by the override-redirect attribute are
     CIRCULATE-WINDOW-DOWN, CIRCULATE-WINDOW-UP, DRAWABLE-BORDER-WIDTH,
     DRAWABLE-HEIGHT, DRAWABLE-WIDTH, DRAWABLE-X, DRAWABLE-Y,
     MAP-WINDOW, and WINDOW-PRIORITY.
    OVERRIDE-REDIRECT
          Either :ON or :OFF.


 -- Function: window-p object
    WINDOW-P
          Type BOOLEAN.

     Returns non-NIL if the _object_ argument is a window; otherwise,
     it returns NIL.

 -- Function: window-plist window
    WINDOW
          A WINDOW.

     Returns and (with `setf') sets the property list for the specified
     _window_. This function provides a hook where extensions can hang
     data.
    PLIST
          A property list.


 -- Function: setf (window-priority window) (&optional sibling) mode
    WINDOW
          A WINDOW.

    SIBLING
          An optional argument specifying that _window_ is to be
          restacked relative to this sibling WINDOW.

    MODE
          One of :ABOVE, :BELOW, :BOTTOM-IF, :OPPOSITE, or :TOP-IF.

     Changes the stacking priority element of the _window_ to the
     specified value. It is an error if the _sibling_ argument is
     specified and is not actually a sibling of the window. Note that
     the priority of an existing window cannot be returned from the X
     server.

     When changing the priority of a window, if the override-redirect
     attribute of the window is :OFF and some other client has selected
     :substructure-redirect on the parent, a :configure-request event
     is generated, and no further processing is performed. Otherwise,
     the priority is changed.
    MODE
          One of :ABOVE, :BELOW, :BOTTOM-IF, :OPPOSITE, or :TOP-IF.


 -- Function: window-save-under window
    WINDOW
          A WINDOW.

     Returns and (with `setf') changes the value of the save-under
     attribute for the specified _window_. Changing the save-under
     attribute of a mapped window may have no immediate effect.
    SAVE-UNDER
          Either :ON or :OFF.


 -- Function: window-visual window
    WINDOW
          A WINDOW.

     Returns the _visual-type_ associated with the specified _window_.
    VISUAL-TYPE
          Type CARD29.


 -- Macro: with-state drawable &body body
     Batches successive read and write accesses to window attributes and
     drawable geometry, in order to minimize the number of requests
     sent to the server. Batching occurs automatically within the
     dynamic extent of the _body_. The _body_ is not executed within a
     WITH-DISPLAY form.

     All window attributes can be returned or changed in a single
     request. Similarly, all drawable geometry values can be returned or
     changed in a single request. WITH-STATE combines accesses to these
     values into the minimum number of server requests necessary to
     guarantee that each read access returns the current server state of
     the _drawable_.  The number of server requests sent depends on the
     sequence of calls to reader and `setf' functions within the
     dynamic extent of the _body_. There are two groups of reader and
     `setf' functions-the Window Attributes group and the Drawable
     Geometry group-as shown in Table 4-1.

     Window  WINDOW-ALL-EVENT-MASKSWINDOW-BACKGROUND
     Attributes                   
             WINDOW-BACKING-PIXELWINDOW-BACKING-PIXEL
             WINDOW-BACKING-PLANESWINDOW-BACKING-PLANES
             WINDOW-BACKING-STOREWINDOW-BACKING-STORE
             WINDOW-BIT-GRAVITY WINDOW-BIT-GRAVITY
             WINDOW-CLASS       WINDOW-BORDER
             WINDOW-COLORMAP    WINDOW-COLORMAP
             WINDOW-COLORMAP-INSTALLED-PWINDOW-CURSOR
             WINDOW-DO-NOT-PROPAGATE-MASKWINDOW-DO-NOT-PROPAGATE-MASK
             WINDOW-EVENT-MASK  WINDOW-EVENT-MASK
             WINDOW-GRAVITY     WINDOW-GRAVITY
             WINDOW-MAP-STATE   
             WINDOW-OVERRIDE-REDIRECTWINDOW-OVERRIDE-REDIRECT
             WINDOW-SAVE-UNDER  WINDOW-SAVE-UNDER
             WINDOW-VISUAL      
     DrawableDRAWABLE-BORDER-WIDTHDRAWABLE-BORDER-WIDTH
     Geometry                   
             DRAWABLE-DEPTH     DRAWABLE-HEIGHT
             DRAWABLE-HEIGHT    DRAWABLE-WIDTH
             DRAWABLE-ROOT      DRAWABLE-X
             DRAWABLE-WIDTH     DRAWABLE-Y
             DRAWABLE-X         WINDOW-PRIORITY
             DRAWABLE-Y         

     The results from a sequence of calls to `setf' functions in a
     given group are cached and sent in a single server request, either
     upon exit from the _body_ or when a reader function from the
     corresponding group is called.

     WITH-STATE sends a single request to update all its cached values
     for the _drawable_ before the first call to a reader function
     within the _body_ and also before the first call to a reader
     function following a sequence of calls to `setf' functions from
     the corresponding group.

    DRAWABLE
          A DISPLAY.

    BODY
          The forms in which attributes accesses are batched.



File: clx.info,  Node: Stacking Order,  Next: Window Hierarchy,  Prev: Window Attributes,  Up: Windows and Pixmaps

5.4 Stacking Order
==================

Sibling windows can _stack_ on top of each other. Windows above can
_obscure_ or _occlude_ lower windows. This relationship between sibling
windows is known as the stacking order. The WINDOW-PRIORITY function
can be used to change the stacking order of a single window. CLX also
provides functions to raise or lower children of a window.  Raising a
mapped window can generate :EXPOSURE events for the window and any
mapped subwindows that were formerly obscured. Lowering a mapped window
can generate :EXPOSURE events on any windows it formerly obscured.

 -- Function: circulate-window-down window
    WINDOW
          A WINDOW.

     Lowers the highest mapped child of the specified _window_ that
     partially or completely occludes another child to the bottom of the
     stack. Completely unobscured children are unaffected. Exposure
     processing is performed on formerly obscured windows.

     If some other client has selected :SUBSTRUCTURE-REDIRECT on the
     _window_, a :CIRCULATE-REQUEST event is generated, and no further
     processing is performed. Otherwise, the child window is lowered
     and a :CIRCULATE-NOTIFY event is generated if the _window_ is
     actually restacked.


 -- Function: circulate-window-up window
    WINDOW
          A WINDOW.

     Raises the lowest mapped child of the specified _window_ that is
     partially or completely occluded by another child to the top of the
     stack. Completely unobscured children are unaffected. Exposure
     processing is performed on formerly obscured windows.

     If another client has selected :SUBSTRUCTURE-REDIRECT on the
     _window_, a :CIRCULATE-REQUEST event is generated, and no further
     processing is performed. Otherwise, the child window is raised and
     a :CIRCULATE-NOTIFY event is generated if the _window_ is actually
     restacked.



File: clx.info,  Node: Window Hierarchy,  Next: Mapping Windows,  Prev: Stacking Order,  Up: Windows and Pixmaps

5.5 Window Hierarchy
====================

All the windows in X are arranged in a strict hierarchy. At the top of
the hierarchy are the root windows, which cover the display screens.
Each root window is partially or completely covered by its child
windows. All windows, except for root windows, have parents. Child
windows can have their own children. In this way, a tree of arbitrary
depth on each screen can be created. CLX provides several functions for
examining and modifying the window hierarchy.

 -- Function: drawable-root drawable
    DRAWABLE
          A DRAWABLE.

     Returns the root window of the specified _drawable_.

    ROOT-WINDOW
          Type WINDOW.


 -- Function: query-tree window &key (:result-type `list)
    WINDOW
          A WINDOW.

    :RESULT-TYPE
          A valid type specifier for a sub-type of SEQUENCE. The
          default is a LIST.

     Returns the _children_ windows, the _parent_ window, and the
     _root_ window for the specified _window_. The children are
     returned as a sequence of windows in current stacking order, from
     bottom-most (first) to top-most (last). The :RESULT-TYPE specifies
     the type of children sequence returned.

    CHILDREN
          Type SEQUENCE of WINDOW.

    PARENT
          Type WINDOW or NULL.

    ROOT
          Type WINDOW.


 -- Function: reparent-window window parent x y
    WINDOW
          A WINDOW.

    PARENT
          The new parent WINDOW.

    X
    Y
          The position (type INT16) of the _window_ in its new
          _parent_. These coordinates are relative to the _parent_'s
          origin, and specify the new position of the upper, left,
          outer corner of the _window_.

     Changes a _window_'s _parent_ within a single screen. There is no
     way to move a window between screens.

     The specified _window_ is reparented by inserting it as a child of
     the specified _parent_. If the _window_ is mapped, an UNMAP-WINDOW
     operation is automatically performed on the specified _window_.
     The _window_ is then removed from its current position in the
     hierarchy and inserted as the child of the specified _parent_. The
     _window_ is placed on top in the stacking order with respect to
     sibling windows.

     After reparenting the specified _window,_ a :REPARENT-NOTIFY event
     is generated. The override-redirect attribute of the _window_ is
     passed on in this event. Window manager clients normally should
     ignore this event if this attribute is :ON. *Note Events and
     Input::, for more information on :REPARENT-NOTIFY event
     processing. Finally, if the specified _window_ was originally
     mapped, a MAP-WINDOW operation is automatically performed on it.

     The X server performs normal exposure processing on formerly
     obscured windows. It might not generate :EXPOSURE events for
     regions from the initial UNMAP-WINDOW operation if they are
     immediately obscured by the final MAP-WINDOW operation.

     It is an error if any of the following are true:

        * The new _parent_ window is not on the same screen as the old
          parent window.

        * The new _parent_ window is the specified _window_ or an
          inferior of the specified _window_.

        * The specified _window_ has a :PARENT-RELATIVE background
          attribute and the new _parent_ window is not the same depth as
          the specified _window_.


 -- Function: translate-coordinates source source-x source-y destination
    SOURCE
          A WINDOW defining the source coordinate system.

    SOURCE-X
    SOURCE-Y
          Coordinates (INT16) relative to the origin of the _source_
          WINDOW.

    DESTINATION
          A WINDOW defining the destination coordinate system.


     Returns the position defined by _source-x_ and _source-y_
     (relative to the origin of the _source_ window), expressed as
     coordinates relative to the origin of the _destination_ window.

    DESTINATION-X
          Type INT16 or NULL.

    DESTINATION-Y
          Type INT16 or NULL.

    DESTINATION-CHILD
          Type WINDOW or NULL.



File: clx.info,  Node: Mapping Windows,  Next: Destroying Windows,  Prev: Window Hierarchy,  Up: Windows and Pixmaps

5.6 Mapping Windows
===================

A window is considered mapped if a MAP-WINDOW call has been made on it.
When windows are first created, they are not mapped because an
application may wish to create a window long before it is mapped to the
screen. A mapped window may not be visible on the screen for one of the
following reasons:

   * It is obscured by another opaque sibling window.

   * One of its ancestors is not mapped.

   * It is entirely clipped by an ancestor.


   A subwindow will appear on the screen as long as all of its ancestors
are mapped and not obscured by a sibling or clipped by an ancestor.
Mapping a window that has an unmapped ancestor does not display the
window, but marks it as eligible for display when the ancestor becomes
mapped. Such a window is called unviewable. When all its ancestors are
mapped, the window becomes viewable and remains visible on the screen
if not obscured by any sibling or ancestor.

   Any output to a window not visible on the screen is discarded.
:EXPOSURE events are generated for the window when part or all of it
becomes visible on the screen. A client only receives the :EXPOSURE
events if it has selected them. Mapping or unmapping a window does not
change its stacking order priority.

 -- Function: map-window window
    WINDOW
          A WINDOW.
     Maps the _window_. This function has no effect when the _window_
     is already mapped.

     If the override-redirect attribute of the _window_ is :OFF and
     another client has selected :SUBSTRUCTURE-REDIRECT on the parent
     window, the X server generates a :MAP-REQUEST event and the
     MAP-WINDOW function does not map the _window_. Otherwise, the
     _window_ is mapped, and the X server generates a :MAP-NOTIFY event.

     If the _window_ becomes visible and no earlier contents for it are
     remembered, MAP-WINDOW tiles the window with its background. If no
     background was defined for the window, the existing screen
     contents are not altered, and the X server generates one or more
     :EXPOSURE events. If a backing-store was maintained while the
     window was unmapped, no :EXPOSURE events are generated. If a
     backing-store will now be maintained, a full window exposure is
     always generated. Otherwise, only visible regions may be reported.
     Similar tiling and exposure take place for any newly viewable
     inferiors.

     MAP-WINDOW generates :EXPOSURE events on each :INPUT-OUTPUT window
     that it causes to become visible.


 -- Function: map-subwindows window
    WINDOW
          A WINDOW.

     Maps all child windows for a specified _window_ in top-to-bottom
     stacking order. The X server generates an :EXPOSURE event on each
     newly visible window. This function is much more efficient than
     mapping each child individually.


 -- Function: unmap-window window
    WINDOW
          A WINDOW.

     Unmaps the specified _window_ and causes the X server to generate
     an :UNMAP-NOTIFY event. If the specified _window_ is already
     unmapped, UNMAP-WINDOW has no effect.  Normal exposure processing
     on formerly obscured windows is performed. Any child window is no
     longer viewable. Unmapping the _window_ generates :EXPOSURE events
     on windows that were formerly obscured by _window_ and its
     children.


 -- Function: unmap-subwindows window
    WINDOW
          A WINDOW.

     Unmaps all child windows for the specified _window_ in bottom to
     top stacking order. The X server generates an :UNMAP-NOTIFY event
     on each child and :EXPOSURE events on formerly obscured windows.
     Using this function is much more efficient than unmapping child
     windows individually.



File: clx.info,  Node: Destroying Windows,  Next: Pixmaps,  Prev: Mapping Windows,  Up: Windows and Pixmaps

5.7 Destroying Windows
======================

CLX provides functions to destroy a window or destroy all children of a
window. Note that by default, windows are destroyed when a connection
is closed. For further information, *Note Closing the Display::, and
*Note Client Termination::.

 -- Function: destroy-window window
    WINDOW
          A WINDOW.

     Destroys the specified _window_ as well as all of its inferiors.
     The windows should never again be referenced. If the specified
     _window_ is mapped, it is automatically unmapped.  The window and
     all of its inferiors are then destroyed, and a :DESTROY-NOTIFY
     event is generated for each window. The ordering of the
     :DESTROY-NOTIFY events is such that for any given window being
     destroyed, :DESTROY-NOTIFY is generated on the window's inferiors
     before being generated on the window. The ordering among siblings
     and across sub-hierarchies is not otherwise constrained. If the
     _window_ is a root window, no windows are destroyed. Destroying a
     mapped window generates :EXPOSURE events on other windows that the
     mapped window obscured.


 -- Function: destroy-subwindows window
    WINDOW
          A WINDOW.

     Destroys all inferiors of the specified _window_, in bottom to top
     stacking order. The X server generates a :DESTROY-NOTIFY event for
     each window. This is much more efficient than deleting many
     windows individually. The inferiors should never be referenced
     again.



File: clx.info,  Node: Pixmaps,  Prev: Destroying Windows,  Up: Windows and Pixmaps

5.8 Pixmaps
===========

A _pixmap_ is a three-dimensional array of bits. A pixmap is normally
thought of as a two-dimensional array of pixels, where each pixel can
be a value from 0 to 2_n_-1, where _n_ is the depth of the pixmap. A
pixmap can also be thought of as a stack of _n_ bitmaps. A _bitmap_ is
a single bit pixmap of depth 1. CLX provides functions to:

   * Create or free a pixmap

   * Test if an object is a pixmap

   * Test if two pixmap objects are equal

   * Return the pixmap resource ID from a PIXMAP object

   Note that pixmaps can only be used on the screen where they were
created. Pixmaps are off-screen server resources that are used for a
number of operations. These include defining patterns for cursors or as
the source for certain raster operations.

 -- Function: create-pixmap &key :width :height :depth :drawable
    :WIDTH
    :HEIGHT
          The nonzero width and height (type CARD16).

    :DEPTH
          The depth (type CARD8) of the pixmap.

    :DRAWABLE
          A DRAWABLE which determines the screen where the pixmap will
          be used.

     Creates a pixmap of the specified :WIDTH, :HEIGHT, and :DEPTH. It
     is valid to pass a window whose class is :INPUT-ONLY as the
     :DRAWABLE argument. The :WIDTH and :HEIGHT arguments must be
     nonzero. The :DEPTH must be supported by the screen of the
     specified :DRAWABLE.

    PIXMAP
          Type PIXMAP.


 -- Function: free-pixmap pixmap
    PIXMAP
          A PIXMAP.

     Allows the X server to free the pixmap storage when no other server
     resources reference it. The pixmap should never be referenced
     again.


 -- Function: pixmap-display pixmap
    PIXMAP
          A PIXMAP.

     Returns the DISPLAY object associated with the specified _pixmap_.

    DISPLAY
          Type DISPLAY.


 -- Function: pixmap-equal pixmap-1 pixmap-2
    PIXMAP-1
    PIXMAP-2
          A three-dimensional array of bits to be tested.

     Returns true if the two arguments refer to the same server
     resource, and NIL if they do not.


 -- Function: pixmap-id pixmap
    PIXMAP
          A PIXMAP.

     Returns the unique resource ID that has been assigned to the
     specified _pixmap_.

    ID
          Type RESOURCE-ID.


 -- Function: pixmap-p object
    PIXMAP
          Type BOOLEAN.

     Returns true if the argument is a PIXMAP object and NIL otherwise.


 -- Function: pixmap-plist pixmap
    PIXMAP
          A PIXMAP.

     Returns and (with `setf') sets the property list for the specified
     _pixmap_. This function provides a hook where extensions can add
     data.

    PLIST
          A property list.



File: clx.info,  Node: Graphics Contexts,  Next: Graphic Operations,  Prev: Windows and Pixmaps,  Up: Top

6 Graphics Contexts
*******************

Clients of the X Window System specify the visual attributes of
graphical output primitives by using _graphics contexts_. A graphics
context is a set of graphical attribute values such as foreground
color, font, line style, and so forth. Like a window, a graphics
context is another kind of X server resource which is created and
maintained at the request of a client program. The client program,
which may use several different graphics contexts at different times,
is responsible for specifying a graphics context to use with each
graphical output function.

   CLX represents a graphics context by an object of type GCONTEXT and
defines functions to create, modify, and manipulate GCONTEXT objects.
By default, CLX also records the contents of graphics contexts in a
cache associated with each display. This local caching of graphics
contexts has two important advantages:

  1. Communication efficiency - Changes to attribute values in a
     GCONTEXT are first made only in the local cache. Just before a
     GCONTEXT is actually used, CLX automatically sends any changes to
     the X server, batching all changes into a single request.

  2. Inquiring GCONTEXT contents - Accessor functions can be used to
     return the value of any individual GCONTEXT component by reading
     the copy of the GCONTEXT from the cache. This kind of inquiry is
     not supported by the basic X protocol. There is no way for a
     client program to request an X server to return the contents of a
     GCONTEXT.

   Caching graphics contexts can result in a synchronization problem if
more than one client program modifies a graphics context. However, this
problem is unusual. Sharing a graphics context among several clients,
while possible, is not expected to be useful and is not very easy to
do. At any rate, a client program can choose to not cache a GCONTEXT
when it is created.

   Each client program must determine its own policy for creating and
using graphics contexts. Depending on the display hardware and the
server implementation, creating a new graphics context can be more or
less expensive than modifying an existing one. In general, some amount
of graphics context information can be cached in the display hardware,
in which case modifying the hardware cache is faster than replacing it.
Typical display hardware can cache only a small number of graphics
contexts. Graphics output is fastest when only a few graphics contexts
are used without heavy modifications.

   This section explains the CLX functions used to:

   * Create a graphics context

   * Return the contents of a graphics context

   * Change the contents of a graphics context

   * Copy a graphics context

   * Free a graphics context

* Menu:

* Creating Graphics Contexts::
* Graphics Context Attributes::
* Copying Graphics Contexts::
* Destroying Graphics Contexts::
* Graphics Context Cache::


File: clx.info,  Node: Creating Graphics Contexts,  Next: Graphics Context Attributes,  Prev: Graphics Contexts,  Up: Graphics Contexts

6.1 Creating Graphics Contexts
==============================

To create a graphics context, use CREATE-GCONTEXT.

 -- Function: create-gcontext &key :arc-mode :background (:cache-p t)
          :cap-style :clip-mask :clip-ordering :clip-x :clip-y
          :dash-offset :dashes :drawable :exposures :fill-rule
          :fill-style :font :foreground :function :join-style
          :line-style :line-width :plane-mask :stipple :subwindow-mode
          :tile :ts-x :ts-y
    :CACHE-P
          Specifies if this graphics context should be cached locally
          by CLX. If NIL then the state is not cached, otherwise a
          local cache is kept.

    :DRAWABLE
          The DRAWABLE whose root and depth are to be associated with
          this graphics context. This is a required keyword argument.

    :ARC-MODE
    :BACKGROUND
    :CAP-STYLE
    :CLIP-MASK
    :CLIP-ORDERING
    :CLIP-X
    :CLIP-Y
    :DASH-OFFSET
    :DASHES
    :EXPOSURES
    :FILL-RULE
    :FILL-STYLE
    :FONT
    :FOREGROUND
    :FUNCTION
    :JOIN-STYLE
    :LINE-STYLE
    :LINE-WIDTH
    :PLANE-MASK
    :STIPPLE
    :SUBWINDOW-MODE
    :TILE
    :TS-X
    :TS-Y
          Initial attribute values for the graphics context.

     Creates, initializes, and returns a graphics context (GCONTEXT).
     The graphics context can only be used with destination drawables
     having the same root and depth as the specified :DRAWABLE. If
     :CACHE-P is non-NIL, the graphics context state is cached locally,
     and changing a component has no effect unless the new value
     differs from the cached value.  Changes to a graphics context
     (`setf' and WITH-GCONTEXT) are always deferred regardless of the
     cache mode and sent to the server only when required by a local
     operation or by an explicit call to FORCE-GCONTEXT-CHANGES.

     All of the graphics context components are set to the values that
     are specified by the keyword arguments, except that a value of NIL
     causes the default value to be used. These default values are as
     follows:

     ARC-MODE    :PIE-SLICE
     BACKGROUND  1
     CAP-STYLE   :BUTT
     CLIP-MASK   :NONE
     CLIP-ORDERING:UNSORTED
     CLIP-X      0
     CLIP-Y      0
     DASH-OFFSET 0
     DASHES      4 (that is,
                 the list '(4,
                 4))
     EXPOSURES   :ON
     FILL-RULE   :EVEN-ODD
     FILL-STYLE  :SOLID
     FONT        server
                 dependent
     FOREGROUND  0
     FUNCTION    BOOLE-1
     JOIN-STYLE  :MITER
     LINE-STYLE  :SOLID
     LINE-WIDTH  0
     PLANE-MASK  A bit mask of
                 all ones
     STIPPLE     Pixmap of
                 unspecified
                 size filled
                 with ones
     SUBWINDOW-MODE:CLIP-BY-CHILDREN
     TILE        Pixmap of an
                 unspecified
                 size filled
                 with the
                 foreground
                 pixel (that
                 is, the
                 client-specified
                 pixel if any,
                 or else 0)
     TS-X        0
     TS-Y        0

     Note that foreground and background do not default to any values
     that are likely to be useful on a color display. Since specifying a
     NIL value means use the default, this implies for clip-mask that
     an empty rectangle sequence cannot be specified as an empty list;
     :NONE must be used instead. Specifying a STRINGABLE for font
     causes an implicit OPEN-FONT call to occur.

    GCONTEXT
          Type GCONTEXT.



File: clx.info,  Node: Graphics Context Attributes,  Next: Copying Graphics Contexts,  Prev: Creating Graphics Contexts,  Up: Graphics Contexts

6.2 Graphics Context Attributes
===============================

The following paragraphs describe the CLX functions used to return or
change the attributes of a GCONTEXT. Functions that return the contents
of a GCONTEXT return NIL if the last value stored is unknown (for
example, if the GCONTEXT was not cached or if the GCONTEXT was not
created by the inquiring client).

 -- Function: gcontext-arc-mode gcontext
    GCONTEXT
          A GCONTEXT.

     Returns and (with `setf') changes the arc-mode attribute of the
     specified graphics context.

     The arc-mode attribute of a graphics context controls the kind of
     filling, if any, to be done by the DRAW-ARCS function. A value of
     :CHORD specifies that arcs are filled inward to the chord between
     the end points of the arc. :PIE-SLICE specifies that arcs are
     filled inward to the center point of the arc, creating a pie slice
     effect.

    ARC-MODE
          Either :CHORD or :PIE-SLICE.


 -- Function: gcontext-background gcontext
    GCONTEXT
          A GCONTEXT.

     Returns and (with `setf') changes the background attribute of the
     specified graphics context.

     The background attribute specifies the pixel value drawn for pixels
     that are not set in a bitmap and for pixels that are cleared by a
     graphics operation, such as the gaps in dashed lines.

    BACKGROUND
          Type CARD32.


 -- Function: gcontext-cache-p gcontext
    GCONTEXT
          A GCONTEXT.

     Returns and (with `setf') changes the local cache mode for the
     _gcontext_. If true, the state of the _gcontext_ is cached by CLX
     and changes to its attributes have no effect unless the new value
     differs from its cached value.

    CACHE-P
          Type BOOLEAN.

      -- Function: gcontext-cap-style gcontext
         GCONTEXT
               A GCONTEXT.

          Returns and (with `setf') changes the cap-style attribute of
          the specified graphics context.

          The cap-style attribute of a graphics context defines how the
          end points of a path are drawn. The possible values and their
          interpretations are as follows:
          :BUTT       Square at the
                      end point
                      (perpendicular
                      to the slope of
                      the line) with
                      no projection
                      beyond.
          :NOT-LAST   Equivalent to
                      :BUTT, except
                      that for a
                      line-width of
                      zero or one the
                      final end point
                      is not drawn.
          :PROJECTING Square at the
                      end, but the
                      path continues
                      beyond the end
                      point for a
                      distance equal
                      to half the
                      line-width. This
                      is equivalent to
                      :BUTT for
                      line-width zero
                      or one.
          :ROUND      A circular arc
                      with the radius
                      equal to 1/2 of
                      the line-width,
                      centered on the
                      end point. This
                      is equivalent to
                      :BUTT for
                      line-width zero
                      or one.

          The following table describes what happens when the end
          points of a line are identical.  The effect depends on both
          the cap style and line width.

          :BUTT       thin         Device
                                   dependent,
                                   but the
                                   desired
                                   effect
                                   is that
                                   a
                                   single
                                   pixel is
                                   drawn.
          :BUTT       wide         Nothing
                                   is
                                   drawn.
          :NOT-LAST   thin         Device
                                   dependent,
                                   but the
                                   desired
                                   effect
                                   is that
                                   nothing
                                   is
                                   drawn.
          :PROJECTING thin         Same as
                                   :BUTT
                                   with
                                   thin
                                   line-width.
          :PROJECTING wide         The
                                   closed
                                   path is
                                   a
                                   square,
                                   aligned
                                   with
                                   the
                                   coordinate
                                   axes,
                                   centered
                                   at the
                                   end
                                   point,
                                   with
                                   sides
                                   equal
                                   to the
                                   line-width.
          :ROUND      wide         The
                                   closed
                                   path is
                                   a
                                   circle,
                                   centered
                                   at the
                                   end
                                   point,
                                   with
                                   diameter
                                   equal
                                   to the
                                   line-width.
          :ROUND      thin         Same as
                                   :BUTT
                                   with
                                   thin
                                   line-width.

         CAP-STYLE
               One of :BUTT, :NOT-LAST, :PROJECTING, or :ROUND.


      -- Function: gcontext-clip-mask gcontext &optional ordering
         GCONTEXT
               A GCONTEXT.

         ORDERING
               One of :UNSORTED, :Y-SORTED, :YX-BANDED, :YX-SORTED, or
               NIL.

          Returns and (with `setf') changes the clip-mask attribute of
          the graphics context.

          When changing the clip-mask attribute, the new clip-mask can
          be specified as a pixmap or a RECT-SEQ or as the values :NONE
          or NIL. The ordering argument can be specified only with
          `setf' when the new clip-mask is a RECT-SEQ.

          The clip-mask attribute of a graphics context affects all
          graphics operations and is used to restrict output to the
          destination drawable. The clip-mask does not clip the source
          of a graphics operation. A value of :NONE for clip-mask
          indicates that no clipping is to be done.

          If a pixmap is specified as the clip-mask, it must have depth
          one and the same root as the specified graphics context.
          Pixels where the clip-mask has a one bit are drawn. Pixels
          outside the area covered by the clip-mask or where the
          clip-mask has a zero bit are not drawn.

          If a sequence of rectangles is specified as the clip-mask,
          the output is clipped to remain contained within the
          rectangles. The rectangles should be non-intersecting, or the
          results of graphics operations will be undefined. The
          rectangle coordinates are interpreted relative to the clip
          origin. Note that the sequence of rectangles can be empty,
          which effectively disables output. This is the opposite of
          setting the clip-mask to :NONE.

          If known by the client, the ordering of clip-mask rectangles
          can be specified to provide faster operation by the server. A
          value of :UNSORTED means the rectangles are in arbitrary
          order. A value of :Y-SORTED means that the rectangles are
          non-decreasing in their Y origin. A :YX-SORTED value is like
          :Y-SORTED with the additional constraint that all rectangles
          with an equal Y origin are non-decreasing in their X origin.
          A :YX-BANDED value additionally constrains :YX-SORTED by
          requiring that, for every possible Y scan line, all
          rectangles that include that scan line have an identical Y
          origins and Y extents. If incorrect ordering is specified,
          the X server may generate an error, but it is not required to
          do so. If no error is generated, the results of the graphics
          operations are undefined.


      -- Function: gcontext-clip-x gcontext
         GCONTEXT
               A GCONTEXT.

          Returns and (with `setf') changes the clip-x attribute of the
          specified graphics context.

          The clip-x and clip-y attributes specify the origin for the
          clip-mask, whether it is a pixmap or a sequence of
          rectangles. These coordinates are interpreted relative to the
          origin of whatever destination drawable is specified in a
          graphics operation.

         CLIP-X
               Type INT16.


      -- Function: gcontext-clip-y gcontext
         GCONTEXT
               A GCONTEXT.

          Returns and (with `setf') changes the clip-y attribute of the
          specified graphics context.

          The clip-x and clip-y attributes specify the origin for the
          clip-mask, whether it is a pixmap or a sequence of
          rectangles. These coordinates are interpreted relative to the
          origin of whatever destination drawable is specified in a
          graphics operation.
         CLIP-Y
               Type INT16.


      -- Function: gcontext-dash-offset gcontext
         GCONTEXT
               A GCONTEXT.

          Returns and (with `setf') changes the dash-offset attribute
          of the specified graphics context.

          The dash-offset attribute of a graphics context defines the
          phase of the pattern contained in the dashes attribute. This
          phase specifies how many elements (pixels) into the path the
          pattern should actually begin in any single graphics
          operation. Dashing is continuous through path elements
          combined with a join-style, but is reset to the dash-offset
          each time a cap-style is applied at a line end point.
         DASH-OFFSET
               Type CARD16.


      -- Function: gcontext-dashes gcontext
         GCONTEXT
               A GCONTEXT.

          Returns and (with `setf') changes the dashes attribute of the
          specified graphics context.  The sequence must be non-empty
          and the elements must be non-zero CARD8 values.

          The dashes attribute in a graphics context specifies the
          pattern that is used for graphics operations which use the
          dashed line styles. It is a non-NIL sequence with each
          element representing the length of a single dash or space.
          The initial and alternating elements of the dashes are the
          even dashes, while the others are the odd dashes. An odd
          length sequence is equivalent to the same sequence
          concatenated with itself to produce an even length sequence.
          All of the elements of a dashes sequence must be non-zero.

          Specifying a single integer value, _N_, for the dashes
          attribute is an abbreviated way of specifying a two element
          sequence with both elements equal to the specified value
          [_N_, _N_].

          The unit of measure for dashes is the same as in the ordinary
          coordinate system. Ideally, a dash length is measured along
          the slope of the line, but server implementations are only
          required to match this ideal for horizontal and vertical
          lines.
         DASHES
               Type SEQUENCE or CARD8.


      -- Function: gcontext-display gcontext
         GCONTEXT
               A GCONTEXT.

          Returns the DISPLAY object associated with the specified
          _gcontext_.
         DISPLAY
               Type DISPLAY.


      -- Function: gcontext-equal gcontext-1 gcontext-2
         GCONTEXT-1
         GCONTEXT-2
               A GCONTEXT.

          Returns true if the two arguments refer to the same server
          resource, and NIL if they do not.
         EQUAL-P
               Type BOOLEAN.


      -- Function: gcontext-exposures gcontext
         GCONTEXT
               A GCONTEXT.

          Returns and (with `setf') changes the exposures attribute of
          the specified graphics context.

          The exposures attribute in a graphics context controls the
          generation of :GRAPHICS-EXPOSURE events for calls to the
          COPY-AREA and COPY-PLANE functions. If :ON,
          :GRAPHICS-EXPOSURE events will be reported when calling the
          COPY-AREA and COPY-PLANE functions with this graphics
          context. Otherwise, if :OFF, the events will not be reported.
         EXPOSURES
               Either :OFF or :ON.


      -- Function: gcontext-fill-rule gcontext
         GCONTEXT
               A GCONTEXT.

          Returns and (with `setf') changes the fill-rule attribute of
          the specified graphics context.

          The fill-rule attribute in a graphics context specifies the
          rule used to determine the interior of a filled area. It can
          be specified as either :EVEN-ODD or :WINDING.

          The :EVEN-ODD rule defines a point to be inside if any
          infinite ray starting at the point crosses the border an odd
          number of times. Tangencies do not count as a crossing.

          The :WINDING rule defines a point to be inside if any infinite
          ray starting at the point crosses an unequal number of
          clockwise and counterclockwise directed border segments. A
          clockwise directed border segment crosses the ray from left
          to right as observed from the point. A counterclockwise
          segment crosses the ray from right to left as observed from
          the point. The case where a directed line segment is
          coincident with the ray is uninteresting because you can
          simply choose a different ray that is not coincident with a
          segment.

          For both :EVEN-ODD and :WINDING, a point is infinitely small,
          and the border is an infinitely thin line. A pixel is inside
          if the center point of the pixel is inside, and the center
          point is not on the border. If the center point is on the
          border, the pixel is inside if, and only if, the polygon
          interior is immediately to its right (x increasing
          direction). Pixels with centers along a horizontal edge are a
          special case and are inside if, and only if, the polygon
          interior is immediately below (y increasing direction).
         FILL-RULE
               Either :EVEN-ODD or :WINDING.


      -- Function: gcontext-fill-style gcontext
         GCONTEXT
               A GCONTEXT.

          Returns and (with `setf') changes the fill-style attribute of
          the specified graphics context.

          The fill-style attribute of a graphics context defines the
          contents of the source for line, text, and fill graphics
          operations. It determines whether the source image is drawn
          with a solid color, a tile, or a stippled tile. The possible
          values and their meanings are as follows:

         :OPAQUE-STIPPLED
               Filled with a tile with the same width and height as
               stipple, but with the background value used everywhere
               stipple has a zero and the foreground pixel value used
               everywhere stipple has a one.

         :SOLID
               Filled with the foreground pixel value.

         :STIPPLED
               Filled with the foreground pixel value masked by stipple.

         :TILED
               Filled with tile.

          When drawing lines with line-style :DOUBLE-DASH, the filling
          of the odd dashes are controlled by the fill-style in the
          following manner:

         :OPAQUE-STIPPLED
               Same as for even dashes.

         :SOLID
               Filled with the background pixel value.

         :STIPPLED
               Filled with the background pixel value masked by stipple.

         :TILED
               Filled the same as the even dashes.

         FILL-STYLE
               One of :OPAQUE-STIPPLED, :SOLID, :STIPPLED, or :TILED.


      -- Function: gcontext-font gcontext &optional metrics-p
         GCONTEXT
               A GCONTEXT.

         METRICS-P
               Specifies whether a pseudo-font is returned when the
               real font stored in the graphics context is not known.
               The default is NIL, which means do not return a
               pseudo-font.

          Returns and (with `setf') changes the _font_ attribute of the
          specified graphics context. If the stored font is known, it is
          returned. If it is not known and the _metrics-p_ argument is
          NIL, then NIL is returned. If the font is not known and
          _metrics-p_ is true, then a pseudo-font is constructed and
          returned. For a constructed pseudo-font, full metric and
          property information can be obtained, but it does not have a
          name or a resource ID, and attempts to use it where a
          resource ID is required results in an invalid-font error.

          The font attribute in a graphics context defines the default
          text font used in text drawing operations. When setting the
          value of the font attribute, either a FONT object or a font
          name can be used. If a font name is passed, OPEN-FONT is call
          automatically to get the FONT object.

         FONT
               Type FONT or NULL.


 -- Function: gcontext-foreground gcontext
    GCONTEXT
          A GCONTEXT.

     Returns and (with `setf') changes the foreground attribute of the
     specified graphics context.

     The foreground attribute of a graphics context specifies the pixel
     value drawn for set bits in a bitmap and for bits set by a graphics
     operation.
    FOREGROUND
          Type CARD32.


 -- Function: gcontext-function gcontext
    GCONTEXT
          A GCONTEXT.

     Returns the _function_ of the specified graphics context.

     In all graphic operations, given a source pixel and a corresponding
     destination pixel, the resulting pixel drawn is computed bitwise on
     the bits of the source and destination pixels. That is, a logical
     operation is used to combine each bit plane of corresponding source
     and destination pixels. The graphics context function attribute
     specifies the logical operation used via one of the 16 operation
     codes defined by Common Lisp for the BOOLE function.

     The following table shows each of the logical operation codes that
     can be given by the function attribute. For each operation code,
     its result is shown as a logical function of a source pixel _S_
     and a destination pixel _D_.

     BOOLE-1  _S_
     BOOLE-2  _D_
     BOOLE-ANDC1(logandc1
              _S D_)
     BOOLE-ANDC2(logandc2
              _S D_)
     BOOLE-AND(logand
              _S D_)
     BOOLE-C1 (lognot
              _S_)
     BOOLE-C2 (lognot
              _D_)
     BOOLE-CLR0
     BOOLE-EQV(logeqv
              _S D_)
     BOOLE-IOR(logior
              _S D_)
     BOOLE-NAND(lognand
              _S D_)
     BOOLE-NOR(lognor
              _S D_)
     BOOLE-ORC1(logorc1
              _S D_)
     BOOLE-ORC2(logorc2
              _S D_)
     BOOLE-SET1
     BOOLE-XOR(logxor
              _S D_)

    FUNCTION
          Type BOOLE-CONSTANT.


 -- Function: gcontext-id gcontext
    GCONTEXT
          A GCONTEXT.

     Returns the unique ID that has been assigned to the specified
     graphics context.
    ID
          Type RESOURCE-ID.


 -- Function: gcontext-join-style gcontext
    GCONTEXT
          A GCONTEXT.

     Returns and (with `setf') changes the join-style attribute of the
     specified graphics context.

     The join-style attribute of a graphics context defines how the
     segment intersections are drawn for wide polylines. The possible
     values and their interpretations are as follows:

    :BEVEL
          Uses :BUTT end point styles with the triangular notch filled.

    :MITER
          The outer edges of two lines extend to meet at an angle.

    :ROUND
          A circular arc with diameter equal to the line-width,
          centered on the join point.

     When the end points of a polyline segment are identical, the
     effect is as if the segment was removed from the polyline. When a
     polyline is a single point, the effect is the same as when the
     cap-style is applied at both end points.

    JOIN-STYLE
          One of :BEVEL, :MITER, or :ROUND.


 -- Function: gcontext-line-style gcontext
    GCONTEXT
          A GCONTEXT.

     Returns and (with `setf') changes the line-style attribute of the
     specified graphics context.

     The line-style attribute of a graphics context specifies how (which
     sections of) lines are drawn for a path in graphics operations. The
     possible values and their meanings are as follows:

    :SOLID
          The full path is drawn.

    :DOUBLE-DASH
          The full path is drawn, but the even dashes are filled
          differently than the odd dashes. The :BUTT style is used
          where even and odd dashes meet (see paragraph 5.4.7,
          Fill-Rule and Fill-Style).

    :ON-OFF-DASH
          Only the even dashes are drawn, with cap-style applied to all
          internal ends of the individual dashes, except :NOT-LAST is
          treated as :BUTT.

    LINE-STYLE
          One of :DASH, :DOUBLE-DASH, or :SOLID.


 -- Function: gcontext-line-width gcontext
    GCONTEXT
          A GCONTEXT.

     Returns the _line-width_ of the specified graphics context.

     The line-width is measured in pixels and can be greater than or
     equal to one (wide line) or can be the special value zero (thin
     line).

     Wide lines are drawn centered on the path described by the graphics
     operation. Unless otherwise specified by the join-style or
     cap-style, the bounding box of a wide line with end points [x1,
     y1], [x2, y2], and width w is a rectangle with vertices at the
     following real coordinates:

     [x1 - (w*_sin_/2), y1 + (w*_cos_/2)], [x1+ (w*_sin_/2), y1 -
     (w*_cos_/2)],
     [x2 - (w*_sin_/2), y2 + (w*_cos_/2)], [x2 + (w*_sin_/2), y2 -
     (w*_cos_/2)]

     where _sin_ is the sine of the angle of the line and _cos_ is the
     cosine of the angle of the line. A pixel is part of the line and,
     hence, is drawn if the center of the pixel is fully inside the
     bounding box (which is viewed as having infinitely thin edges). If
     the center of the pixel is exactly on the bounding box, it is part
     of the line if, and only if, the interior is immediately to its
     right (x increasing direction). Pixels with centers on a
     horizontal edge are a special case and are part of the line if,
     and only if, the interior is immediately below (y increasing
     direction).

     Thin lines (zero line-width) are always one pixel wide lines drawn
     using an unspecified, device dependent algorithm. There are only
     two constraints on this algorithm.

       1. If a line is drawn unclipped from [x1,y1] to [x2,y2] and if
          another line is drawn unclipped from [x1+dx,y1+dy] to
          [x2+dx,y2+dy], a point [x,y] is touched by drawing the first
          line if, and only if, the point [x+dx,y+dy] is touched by
          drawing the second line.

       2. The effective set of points comprising a line cannot be
          affected by clipping. That is, a point is touched in a
          clipped line if, and only if, the point lies inside the
          clipping region and the point would be touched by the line
          when drawn unclipped.

     A wide line drawn from [x1,y1] to [x2,y2] always draws the same
     pixels as a wide line drawn from [x2,y2] to [x1,y1], not counting
     cap-style and join-style. Implementors are encouraged to make this
     property true for thin lines, but it is not required. A line-width
     of zero may differ from a line-width of one in which pixels are
     drawn. This permits the use of many manufacturer's line drawing
     hardware, which may run much faster than the more precisely
     specified wide lines.

     In general, drawing a thin line is faster than drawing a wide line
     of width one. However, because of their different drawing
     algorithms, thin lines may not mix well, aesthetically speaking,
     with wide lines. If it is desirable to obtain precise and uniform
     results across all displays, a client should always use a
     line-width of one, rather than a line-width of zero.
    LINE-WIDTH
          Type CARD16.


 -- Function: gcontext-p gcontext
    GCONTEXT
          Type BOOLEAN.

     Returns non-NIL if the argument is a graphics context and


 -- Function: gcontext-plane-mask gcontext
    GCONTEXT
          A GCONTEXT.

     Returns the _plane-mask_ of the specified graphics context.

     The plane-mask attribute of a graphics context specifies which bit
     planes of the destination drawable are modified during a graphic
     operation. The plane-mask is a pixel value in which a 1 bit means
     that the corresponding bit plane will be modified and a 0 bit
     means that the corresponding bit plane will not be affected during
     a graphic operations. Thus, the actual result of a graphic
     operation depends on both the function and plane-mask attributes
     of the graphics context and is given by the following expression:

          (logior (logand
          	 (boole function source destination)
          	 plane-mask)

          	(logandc2
          	 destination
          	 plane-mask))

    PLANE-MASK
          Type CARD32.


 -- Function: gcontext-plist gcontext
    GCONTEXT
          A GCONTEXT.

     Returns and (with `setf') sets the property list for the specified
     _gcontext_. This function provides a hook where extensions can add
     data.

    GCONTEXT-P
          Type LIST.


 -- Function: gcontext-stipple gcontext
    GCONTEXT
          A GCONTEXT.

     Returns the _stipple_ of the specified graphics context.

     The stipple attribute of a graphics context is a bitmap used to
     prevent certain pixels in the destination of graphics operations
     from being affected by tiling.

     The stipple and tile have the same origin. This origin point is
     interpreted relative to the origin of whatever destination
     drawable is specified in a graphics request. The stipple pixmap
     must have depth one and must have the same root as the graphics
     context. The tile pixmap must have the same root and depth as the
     graphics context. For stipple operations where the fill-style is
     :STIPPLED (but not :OPAQUE-STIPPLED), the stipple pattern is tiled
     in a single plane and acts as an additional clip mask to be ANDed
     with the clip-mask.  Any size pixmap can be used for stipple or
     tile, although some sizes may be faster to use than others.

     Specifying a pixmap for stipple or tile in a graphics context
     might or might not result in a copy being made. If the pixmap is
     later used as the destination for a graphics operation, the change
     might or might not be reflected in the graphics context. If the
     pixmap is used both as the destination for a graphics operation
     and as a stipple or tile, the results are not defined.

     Some displays have hardware support for tiling or stippling with
     patterns of specific sizes. Tiling and stippling operations that
     restrict themselves to those sizes may run much faster than such
     operations with arbitrary size patterns. CLX provides functions to
     determine the best size for stipple or tile (see
     QUERY-BEST-STIPPLE and QUERY-BEST-TILE).

    STIPPLE
          Type PIXMAP.


 -- Function: gcontext-subwindow-mode gcontext
    GCONTEXT
          A GCONTEXT.

     Returns and (with `setf') changes the subwindow-mode attribute of
     the specified graphics context.

     The subwindow-mode attribute of a graphics context specifies
     whether subwindows obscure the contents of their parent window
     during a graphics operation. For a value of :CLIP-BY-CHILDREN, both
     source and destination windows are clipped by all viewable
     :INPUT-OUTPUT class children. This clipping is in addition to the
     clipping provided by the clip-mode attribute. For a value of
     :INCLUDE-INFERIORS, neither the source nor destination window is
     clipped by its inferiors. This results in the inclusion of
     subwindow contents in the source and the drawing through of
     subwindow boundaries of the destination. The use of
     :INCLUDE-INFERIORS on a window of one depth with mapped inferiors
     of differing depth is not illegal, but the semantics are not
     defined by the core protocol.
    SUBWINDOW-MODE
          One of :CLIP-BY-CHILDREN or :INCLUDE-INFERIORS.


 -- Function: gcontext-tile gcontext
    GCONTEXT
          A GCONTEXT.

     Returns the _tile_ of the specified graphics context.

     The tile attribute is a pixmap used to fill in areas for graphics
     operations. It is so named because copies of it are laid out side
     by side to fill the area.

     The stipple and tile have the same origin. This origin point is
     interpreted relative to the origin of whatever destination
     drawable is specified in a graphics request. The stipple pixmap
     must have depth one and must have the same root as the graphics
     context. The tile pixmap must have the same root and depth as the
     graphics context. For stipple operations where the fill-style is
     :STIPPLED (but not :OPAQUE-STIPPLED), the stipple pattern is tiled
     in a single plane and acts as an additional clip mask to be ANDed
     with the clip-mask.  Any size pixmap can be used for stipple or
     tile, although some sizes may be faster to use than others.

     Specifying a pixmap for stipple or tile in a graphics context
     might or might not result in a copy being made. If the pixmap is
     later used as the destination for a graphics operation, the change
     might or might not be reflected in the graphics context. If the
     pixmap is used both as the destination for a graphics operation
     and as a stipple or tile, the results are not defined.

     Some displays have hardware support for tiling or stippling with
     patterns of specific sizes. Tiling and stippling operations that
     restrict themselves to those sizes may run much faster than such
     operations with arbitrary size patterns. CLX provides functions to
     determine the best size for stipple or tile (see
     QUERY-BEST-STIPPLE and QUERY-BEST-TILE).
    TILE
          Type PIXMAP.


 -- Function: gcontext-ts-x gcontext
    GCONTEXT
          A GCONTEXT.

     Returns the _ts-x_ attribute of the specified graphics context.

     The ts-x and ts-y attributes of a graphics context are the
     coordinates of the origin for tile pixmaps and the stipple.
    TS-X
          Type INT16.


 -- Function: gcontext-ts-y gcontext
    GCONTEXT
          A GCONTEXT.

     Returns the _ts-y_ attribute of the specified graphics context.

     The ts-x and ts-y attributes of a graphics context are the
     coordinates of the origin for tile pixmaps and the stipple.
    TS-Y
          Type INT16.


 -- Function: query-best-stipple width height drawable
    WIDTH
    HEIGHT
          Specifies the width and height of the desired stipple pattern.

    DRAWABLE
          A DRAWABLE.

     Returns the _best-width_ and _best-height_ for stipple pixmaps on
     the _drawable_.

     The _drawable_ indicates the screen and possibly the window class
     and depth. An :INPUT-ONLY window cannot be specified as the
     _drawable_. The size is returned as width and height values.

    BEST-WIDTH
    BEST-HEIGHT
          Type CARD16.


 -- Function: query-best-tile width height drawable
    WIDTH
    HEIGHT
          Specifies the width and height of the desired tile pattern.

    DRAWABLE
          A DRAWABLE.

     Returns the _best-width_ and _best-height_ for tile pixmaps on the
     _drawable_.

     The _drawable_ indicates the screen and possibly the window class
     and depth. An :INPUT-ONLY window cannot be specified as the
     _drawable_. The size is returned as width and height values.

    BEST-WIDTH
    BEST-HEIGHT
          Type CARD16.



File: clx.info,  Node: Copying Graphics Contexts,  Next: Destroying Graphics Contexts,  Prev: Graphics Context Attributes,  Up: Graphics Contexts

6.3 Copying Graphics Contexts
=============================

CLX provides functions to copy some or all attribute values from one
graphics context to another. These functions are generally more
efficient than using `setf' to copy GCONTEXT attributes individually.

 -- Function: copy-gcontext source destination
    SOURCE
          The source GCONTEXT.

    DESTINATION
          The destination GCONTEXT.

     Copies all the values of the attributes of the source graphics
     context into the destination graphics context. The source and
     destination graphics contexts must have the same root and depth.


 -- Function: copy-gcontext-components source destination &rest keys
    SOURCE
          The source GCONTEXT.

    DESTINATION
          The destination GCONTEXT.

    KEYS
          The remaining arguments are keywords, of type GCONTEXT-KEY,
          which specify which attributes of the graphics context are to
          be copied.

     Copies the values of the specified attributes of the source
     graphics context to the destination graphics context. The source
     and destination graphics contexts must have the same root and
     depth.



File: clx.info,  Node: Destroying Graphics Contexts,  Next: Graphics Context Cache,  Prev: Copying Graphics Contexts,  Up: Graphics Contexts

6.4 Destroying Graphics Contexts
================================

To destroy a graphics context, use FREE-GCONTEXT.

 -- Function: free-gcontext gcontext
    GCONTEXT
          A GCONTEXT.

     Deletes the association between the assigned resource ID and the
     specified graphics context, and then destroys the graphics context.



File: clx.info,  Node: Graphics Context Cache,  Prev: Destroying Graphics Contexts,  Up: Graphics Contexts

6.5 Graphics Context Cache
==========================

CLX provides a set of functions to control the automatic graphics
context caching mechanism.

 -- Function: force-gcontext-changes gcontext
    GCONTEXT
          A GCONTEXT.

     Forces any delayed changes to the specified graphics context to be
     sent out to the server.  Note that FORCE-GCONTEXT-CHANGES is
     called by all of the graphics functions.


 -- Macro: with-gcontext gcontext &key :arc-mode :background :cap-style
          :clip-mask :clip-ordering :clip-x :clip-y :dashes
          :dash-offset :exposures :fill-rule :fill-style :font
          :foreground :function :join-style :line-style :line-width
          :plane-mask :stipple :subwindow-mode :tile :ts-x :ts-y
          &allow-other-keys &body body
     Changes the indicated graphics context components to the specified
     values only within the dynamic extent of the body. WITH-GCONTEXT
     works on a per-process basis in a multiprocessing environment. The
     _body_ is not surrounded by a WITH-DISPLAY form. If there is no
     local cache for the specified graphics context, or if some of the
     component states are unknown, WITH-GCONTEXT does the save and
     restore by creating a temporary graphics context and copying
     components to and from it using COPY-GCONTEXT-COMPONENTS.

    GCONTEXT
          A GCONTEXT.

    :ARC-MODE
    :BACKGROUND
    :CAP-STYLE
    :CLIP-MASK
    :CLIP-ORDERING
    :CLIP-X
    :CLIP-Y
    :DASHES
    :DASH-OFFSET
    :EXPOSURES
    :FILL-RULE
    :FILL-STYLE
    :FONT
    :FOREGROUND
    :FUNCTION
    :JOIN-STYLE
    :LINE-STYLE
    :LINE-WIDTH
    :PLANE-MASK
    :STIPPLE
    :SUBWINDOW-MODE
    :TILE
    :TS-X
    :TS-Y
          These keyword arguments and associated values specify which
          graphics context components are to be changed. Any components
          not specified are left unmodified. *Note Creating Graphics
          Contexts::, for more information.

    BODY
          The body of code which will have access to the altered
          graphics context.



File: clx.info,  Node: Graphic Operations,  Next: Images,  Prev: Graphics Contexts,  Up: Top

7 Graphic Operations
********************

Once connected to an X server, a client can use CLX functions to
perform graphic operations on drawables.

   This section describes CLX functions to:

   * Operate on areas and planes

   * Draw points

   * Draw lines

   * Draw rectangles

   * Draw arcs

   * Draw text


* Menu:

* Area and Plane Operations::
* Drawing Points::
* Drawing Lines::
* Drawing Rectangles::
* Drawing Arcs::
* Drawing Text::


File: clx.info,  Node: Area and Plane Operations,  Next: Drawing Points,  Prev: Graphic Operations,  Up: Graphic Operations

7.1 Area and Plane Operations
=============================

CLEAR-AREA clears an area or an entire window to the background.  Since
pixmaps do not have backgrounds, they cannot be filled by using the
functions described in the following paragraphs. Instead, you should
use DRAW-RECTANGLE, which sets the pixmap to a known value. *Note
Drawing Rectangles::, for information on DRAW-RECTANGLE.

 -- Function: clear-area window &key (:x 0) (:y 0) :width :height
          :exposures-p
    WINDOW
          A WINDOW.

    :X
    :Y
          Upper-left corner of the area to be cleared. These
          coordinates are relative to the _window_ origin. Type is
          INT16.

    :WIDTH
          The width of the area to clear or NIL to clear to the
          remaining width of the window. Type is CARD16 or NULL.

    :HEIGHT
          The height of the area to clear or NIL to clear to the
          remaining height of the window. Type is CARD16 or NULL.

    :EXPOSURES-P
          Specifies if :EXPOSURE events should be generated for the
          affected areas. Type BOOLEAN.

     Draws a rectangular area in the specified _window_ with the
     background pixel or pixmap of the _window_. The :X and :Y
     coordinates are relative to the _window_ origin, and specify the
     upper-left corner of the rectangular area that is to be cleared. A
     NIL or zero value for :HEIGHT or :WIDTH clears the remaining area
     (height - y or width - x). If the _window_ has a defined
     background tile, the rectangle is tiled by using a plane-mask of
     all ones and a function of :COPY. If the _window_ has background
     :NONE, the contents of the _window_ are not changed. In either
     case, if :EXPOSURES-P is non-NIL, then one or more :EXPOSURE
     events are generated for regions of the rectangle that are either
     visible or are being retained in a backing store.

     To clear the entire area in a specified _window_, use (CLEAR-AREA
     _window_).


 -- Function: copy-area source gcontext source-x source-y width height
          destination destination-x destination-y
    SOURCE
          Source DRAWABLE.

    GCONTEXT
          The graphics context to use during the copy operation.

    SOURCE-X
    SOURCE-Y
          The x and y coordinates of the upper-left corner of the area
          in the _source_ DRAWABLE. These coordinates are relative to
          the _source_ DRAWABLE origin.  Type is INT16.

    WIDTH
    HEIGHT
          The width and height of the area being copied. These apply to
          both the _source_ and _destination_ areas. Type is CARD16.

    DESTINATION
          The destination DRAWABLE.

    DESTINATION-X
    DESTINATION-Y
          The x and y coordinates of the upper left corner of the area
          in the _destination_ DRAWABLE. These coordinates are relative
          to the _destination_ DRAWABLE origin. Type is INT16.

     Copies the specified rectangular area from the _source_ DRAWABLE
     to the specified rectangular area of the _destination_ DRAWABLE,
     combining them as specified in the supplied graphics context
     (_gcontext_). The _x_ and _y_ coordinates are relative to their
     respective drawable origin, with each pair specifying the upper
     left corner of the area.

     If either regions of the _source_ area are obscured and have not
     been retained in backing store, or regions outside the boundaries
     of the _source_ DRAWABLE are specified, those regions are not
     copied. Instead, the following occurs on all corresponding
     _destination_ regions that are either visible or are retained in
     backing store:

        * If the _destination_ rectangle is a window with a background
          other than :NONE, these corresponding regions of the
          _destination_ are tiled, using plane-mask of all ones and
          function of BOOLE-1 (copy source), with that background.

        * If the exposures attribute of the graphics context is :ON,
          then :GRAPHICS-EXPOSURE events for all corresponding
          _destination_ regions are generated (regardless of tiling or
          whether the _destination_ is a window or a pixmap).

        * If exposures is :ON but no regions are exposed, a
          :NO-EXPOSURE event is generated.  Note that by default,
          exposures is :ON for new graphics contexts. *Note Graphics
          Contexts::, for further information.



 -- Function: copy-plane source gcontext plane source-x source-y width
          height destination destination-x destination-y
    SOURCE
          The source DRAWABLE.

    GCONTEXT
          The graphics context to use during the copy operation.

    PLANE
          Specifies the bit-plane of the _source_ DRAWABLE. Exactly one
          bit must be set.  Type is PIXEL.

    SOURCE-X
    SOURCE-Y
          The _x_ and _y_ coordinates of the upper-left corner of the
          area in the _source_ DRAWABLE. These coordinates are relative
          to the _source_ DRAWABLE origin.  Type is INT16.

    WIDTH
    HEIGHT
          The width and height of the area being copied. These apply to
          both the _source_ and _destination_ areas. Type is CARD16.

    DESTINATION
          The destination DRAWABLE.

    DESTINATION-X
    DESTINATION-Y
          The x and y coordinates of the upper-left corner of the
          destination area in the _destination_ DRAWABLE. These
          coordinates are relative to the _destination_ DRAWABLE
          origin. Type is INT16.

     Uses a single bit plane of the specified rectangular area of the
     _source_ DRAWABLE along with the specified graphics context
     (_gcontext_) to modify the specified rectangle area of the
     _destination_ DRAWABLe. The drawables specified by the _source_
     and _destination_ arguments must have the same root but need not
     have the same depth.

     Effectively, this operation forms a pixmap of the same depth as
     _destination_ and with a size specified by the _source_ area. It
     then uses the foreground and background from the graphics context
     (foreground where the bit-plane in _source_ contains a one bit,
     background where the bit-plane in _source_ contains a zero bit),
     and the equivalent of a COPY-AREA operation is performed with all
     the same exposure semantics. This can also be thought of as using
     the specified region of the _source_ bit-plane as a stipple with a
     fillstyle of :OPAQUE-STIPPLED for filling a rectangular area of
     the _destination_.



File: clx.info,  Node: Drawing Points,  Next: Drawing Lines,  Prev: Area and Plane Operations,  Up: Graphic Operations

7.2 Drawing Points
==================

The DRAW-POINT and DRAW-POINTS functions make use of the following
graphics context components: function, plane-mask, foreground,
subwindow-mode, clip-x, clip-y, clip-ordering, clip-region and
clip-mask.

   The DRAW-POINT function uses the foreground pixel and function
components of the graphics context to draw a single point into the
specified drawable, while DRAW-POINTS draws multiple points into the
specified drawable. These functions are not affected by the tile or
stipple in the graphics context.

 -- Function: draw-point drawable gcontext x y
    DRAWABLE
          The destination DRAWABLE.

    GCONTEXT
          The graphics context for drawing the point.

    X
    Y
          The _x_ and _y_ coordinates of the point drawn. Type is INT16.
     Combines the foreground pixel in the _gcontext_ with the pixel in
     the _drawable_ specified by the _x_ and _y_ coordinates.


 -- Function: draw-points drawable gcontext points &optional relative-p
    DRAWABLE
          The destination DRAWABLE.

    GCONTEXT
          The graphics context for drawing the points.

    POINTS
          A list of points to be drawn in the order listed. The first
          point is always relative to the _drawable_'s origin; if
          _relative-p_, the rest of the points are drawn relative to the
          previous point, else they are drawn relative to the
          _drawable_'s origin. Type is POINT-SEQ.

    RELATIVE-P
          Specifies the coordinate mode used for drawing the pixels
          either relative to the origin or to the previous point. Type
          BOOLEAN.

     Combines the foreground pixels in the graphics context with the
     pixels at each point in the _drawable_. The points are drawn in the
     order listed.

     DRAW-POINTS requires a mode argument, _relative-p_ that indicates
     whether the points are relative to the destination origin or to
     the previous point. In either case, the first point is always
     relative to the destination origin. The rest of the points are
     relative either to the _drawable_'s origin or to the previous
     point, depending on the value of _relative-p_.



File: clx.info,  Node: Drawing Lines,  Next: Drawing Rectangles,  Prev: Drawing Points,  Up: Graphic Operations

7.3 Drawing Lines
=================

The DRAW-LINE, DRAW-LINES, and DRAW-SEGMENTS functions use the following
graphics context components: background, cap-style, clip-x-origin,
clip-y-origin, clip-mask, dash-list, dash-offset, fill-style,
foreground, function, plane-mask, line-width, line-style, stipple,
subwindow-mode, tile, ts-x-origin, and ts-y-origin.

   The DRAW-LINES function also uses the join-style graphics context
component.

 -- Function: draw-line drawable gcontext x1 y1 x2 y2 &optional
          relative-p
    DRAWABLE
          The destination DRAWABLE.

    GCONTEXT
          The graphics context for drawing the line.

    X1
    Y1
    X2
    Y2
          The end points of the line.

    RELATIVE-P
          Specifies the coordinate mode used for drawing the line
          either relative to the origin or the previous point. In
          either case, the first point is always drawn relative to the
          _drawable_'s origin.

     Draws a line from the point _x1_,_y1_ to the point _x2_,_y2_. When
     _relative-p_ is true, the first point is relative to the
     destination origin but the second point is relative to the first
     point.  When _relative-p_ is NIL, both points are relative to the
     destination origin.


 -- Function: draw-lines drawable gcontext points &key :relative-p
          :fill-p (:shape :complex)
    DRAWABLE
          The destination DRAWABLE.

    GCONTEXT
          The graphics context for drawing the lines.

    POINTS
          A list of points that define the lines. Type is POINT-SEQ.

    :RELATIVE-P
          The coordinate mode of the points.

    :FILL-P
          When true, a filled polygon is drawn instead of a polyline.

    :SHAPE
          A hint that allows the server to use the most efficient area
          fill algorithm.  Either :CONVEX, :NON-CONVEX, or :COMPLEX.

     Draws a line between each pair of _points_ in the points list. The
     lines are drawn in the order listed and join correctly at all
     intermediate points. The join-style graphics context component
     defines the type of joint to use. When the first and last points
     coincide, the first and last lines also join correctly to produce a
     hollow polygon.

     When :RELATIVE-P is true, the first point is always relative to
     the destination origin, but the rest are relative to the previous
     point. When :RELATIVE-P is NIL, the rest of the points are drawn
     relative to the destination origin.

     When :FILL-P is true, the polygon defined by the _points_ list is
     filled. The :SHAPE keyword provides the server with a hint about
     how to fill the polygon. :SHAPE can be either :COMPLEX (by
     default), :CONVEX, or :NON-CONVEX.

     The :CONVEX operand is the simplest type of area and the fastest
     to fill. A fill area is convex if every straight line connecting
     any two interior points is entirely inside the area.  For example,
     triangles and rectangles are convex polygons.

     The :NON-CONVEX operand is for filling an area that is not convex
     and is also not self-intersecting. Filling this type of area is
     harder than filling a convex area, but easier than filling one
     that is self-intersecting. For example, the shape of the letter
     "T" is non-convex and non-self-intersecting.

     The :COMPLEX operand is the most general (and therefore the
     hardest) type of fill area. A complex fill area can be non-convex
     and self-intersecting. For example, draw the outline of a bow tie,
     without lifting your pencil or tracing over an edge twice. This
     shape is non-convex and intersects itself at the knot in the
     middle.

     NOTE: Unless you are sure that a shape is :CONVEX or :NON-CONVEX,
     it should always be drawn as a :COMPLEX shape. If :CONVEX or
     :NON-CONVEX is specified incorrectly, the graphics result is
     undefined.


 -- Function: draw-segments drawable gcontext segments
    DRAWABLE
          The destination DRAWABLE to receive the line segments.

    GCONTEXT
          Specifies the graphics context for drawing the lines.

    SEGMENTS
          The points list for the segments to draw. Type is SEQ.

     Draws multiple lines, not necessarily connected. _segments_ is a
     sequence of the form {x1 y1 x2 y2}*, in which each subsequence
     specifies the end points of a line segment. Line segments are
     drawn in the order given by _segments_. Unlike DRAW-LINES, no
     joining is performed at coincident end points.



File: clx.info,  Node: Drawing Rectangles,  Next: Drawing Arcs,  Prev: Drawing Lines,  Up: Graphic Operations

7.4 Drawing Rectangles
======================

The DRAW-RECTANGLE and DRAW-RECTANGLES functions draw hollow or filled
outlines of the specified rectangle or rectangles as if a five-point
polyline were specified for each rectangle, as follows:

     [x,y,] [x+width,y] [x+width,y+height] [x,y+height] [x,y]

   DRAW-RECTANGLE and DRAW-RECTANGLES use the following graphics
context components: background, function, plane-mask, foreground,
subwindow-mode, cap-style, clip-x, clip-y, clip-ordering, clip-region
and clip-mask, dash-list, dash-offset, fill-style, join-style,
line-width, line-style, stipple, tile, ts-x-origin, and ts-y-origin.

 -- Function: draw-rectangle drawable gcontext x y width height
          &optional fill-p
    DRAWABLE
          The destination DRAWABLE.

    GCONTEXT
          The graphics context for drawing the rectangle.

    X
    Y
          The x and y coordinates that define the upper left corner of
          the rectangle. The coordinates are relative to the
          destination origin. Type is INT16.

    WIDTH
    HEIGHT
          Specifies the width and height that define the outline of the
          rectangle.  Type is CARD16.

    FILL-P
          Specifies whether the rectangle is filled or not. Type
          BOOLEAN.

     Draws a rectangle defined by the _x_, _y_, _width_, and

     _height_ arguments.


 -- Function: draw-rectangles drawable gcontext rectangles &optional
          fill-p
    DRAWABLE
          The destination DRAWABLE.

    GCONTEXT
          The graphics context.

    RECTANGLES
          A list specifying the upper left corner x and y, width and
          height of the rectangles. Type is RECT-SEQ.

    FILL-P
          Specified if the rectangles are filled or not. Type is
          BOOLEAN.

     Draws the rectangles in the order listed in _rectangles_. For the
     specified _rectangle_ or _rectangles_, no pixel is drawn more than
     once. The x and y coordinates of each rectangle are relative to
     the destination origin and define the upper left corner of the
     rectangle. If rectangles intersect, the intersecting pixels are
     drawn multiple times.



File: clx.info,  Node: Drawing Arcs,  Next: Drawing Text,  Prev: Drawing Rectangles,  Up: Graphic Operations

7.5 Drawing Arcs
================

DRAW-ARC draws a single circular or an elliptical arc, while DRAW-ARCS
draws multiple circular or elliptical arcs. DRAW-ARC and DRAW-ARCS use
the following graphics context components: arc-mode, background,
cap-style, clip-x, clip-y, clip-mask, dash-list, dash-offset,
fill-style, foreground, join-style, function, plane-mask, line-width,
line-style, stipple, subwindow-mode, tile, ts-x-origin, and ts-y-origin.

 -- Function: draw-arc drawable gcontext x y width height angle1 angle2
          &optional fill-p
    DRAWABLE
          The destination DRAWABLE.

    GCONTEXT
          The graphics context for drawing the arc.

    X
    Y
          The x and y coordinates of the arc rectangle relative to the
          origin of the _drawable_.  Type is INT16.

    WIDTH
    HEIGHT
          Specifies the width and height of the rectangle. These are
          the major and minor axes of the arc. Type is CARD16.

    ANGLE1
          Specifies the start of the arc in radians. Type is ANGLE.

    ANGLE2
          Specifies the direction and end point of the arc. Type is
          ANGLE.

    FILL-P
          Specifies whether the arc is filled or not. Type BOOLEAN.

     Draws either a circular or an elliptical arc. Also, outlined or
     filled arcs can be drawn.  Each arc is specified by a rectangle
     (_x_, _y_, _width_, and _height_) and two angles (_angle1_ and
     _angle2_). The angles are signed integers in radians, with
     positive indicating counterclockwise motion and negative
     indicating clockwise motion. The start of the arc is specified by
     _angle1_, and the path and extent of the arc is specified by
     _angle2_ relative to the start of the arc. If the magnitude of
     _angle2_ is greater than 360 degrees, it is truncated to 360
     degrees. The _x_ and _y_ coordinates of the rectangle are relative
     to the _drawable_'s origin.

     For example, an arc specified as
     [_x_,_y_,_width_,_height_,_angle1_,_angle2_] has the origin of the
     major and minor axes at:

          [_x_+(_width_/2),_y_+(_height_/2)]

     The infinitely thin path describing the entire circle/ellipse
     intersects the horizontal axis at:

          [_x_,_y_+(_height_/2)] and [_x_+_width_,_y_+(_height_/2)]

     The intersection of the vertical axis is at:

          [_x_+(_width_/2),_y_] and [_x_+(_width_/2),_y_+_height_]

     These coordinates can be fractional; that is, they are not
     truncated to discrete coordinates. Note that the angle values are
     slightly different in CLX than in the X protocol specification.

     If _fill-p_ is NIL, then only the outline of the arc is drawn.
     Otherwise, if _fill-p_ is true, DRAW-ARC fills the area bounded by
     the arc outline and one or two line segments, depending on the
     arc-mode. If the arc-mode is :CHORD, the filled area is bounded by
     the arc outline and the line segment joining the arc end points.
     If the arc-mode is :PIE-SLICE, the filled area is bounded by the
     arc outline and the two line segments joining each arc end point
     with the center point.


 -- Function: draw-arcs drawable gcontext arcs &optional fill-p
    DRAWABLE
          Specifies the DRAWABLE where you want the arcs drawn.

    GCONTEXT
          Specifies the graphics context for drawing the arc.

    ARCS
          A sequence containing the width, height, angle1, and angle2
          arguments defining the arcs. See DRAW-ARC for more detail.
          Type is ARC-SEQ.

    FILL-P
          Specifies whether the arcs are filled or not. Type is BOOLEAN.

     Draws circular or elliptical, outlined or filled arcs. Each arc is
     specified by a rectangle and two angles. For a more detailed
     description, see DRAW-ARC.

     The arcs are filled in the order listed. For any given arc, no
     pixel is drawn more than once. If regions intersect, the
     intersecting pixels are drawn multiple times.



File: clx.info,  Node: Drawing Text,  Prev: Drawing Arcs,  Up: Graphic Operations

7.6 Drawing Text
================

CLX provides functions for drawing text using text fonts provided by
the X server.  An X font is array of character bit maps indexed by
integer codes. *Note Font and Characters::, for a complete discussion
of the CLX functions used to manage fonts and characters.

   Since Common Lisp programs typically represent text as sequences of
characters (that is, strings), CLX text functions must be prepared to
convert a Common Lisp character into the integer code used to index the
appropriate character bitmap in a given font. The :TRANSLATE argument
to a text function is a function which performs this conversion. The
default :TRANSLATE function handles all characters that satisfy
GRAPHIC-CHAR-P by converting each character into its ASCII code. Note
that the assumption made by the default :TRANSLATE function-that is,
that an X font indexes bitmaps by ASCII codes-is often valid, but other
encodings are possible. In general, a :TRANSLATE function can perform
complex transformations. It can be used to convert non-character input,
to handle non-ASCII character encodings, and to change the fonts used to
access character bitmaps.  The complete behavior of a :TRANSLATE
function is given below by describing a prototypical TRANSLATE-FUNCTION.

   CLX offers two different ways to draw text-filled text and block
text. The DRAW-GLYPH and DRAW-GLYPHS functions create filled text, in
which each character image is treated as an area to be filled according
to the fill-style of the given graphics context, without otherwise
disturbing the surrounding background. In addition, filled text sends a
complex type of server request which allows a series of font indices,
font changes, and horizontal position changes to be compiled into a
single request. Filled text functions use the following graphics
context attributes: background, clip-mask, clip-x-origin,
clip-y-origin, fill-style, font, foreground, function, plane-mask,
stipple, subwindow-mode, tile, ts-x-origin, ts-y-origin.

   Block text is a rendering style commonly used by display terminals,
in which each character image appears in the foreground pixel inside a
rectangular character cell drawn in the graphics context background
pixel. The DRAW-IMAGE-GLYPH and DRAW-IMAGE-GLYPHS functions create
block text. Block text functions use the following graphics context
attributes: background, clip-mask, clip-x-origin, clip-y-origin, font,
foreground, plane-mask, stipple, subwindow-mode, tile, ts-x-origin,
ts-y-origin.

 -- Function: draw-glyph drawable gcontext x y element &key :translate
          :width (:size :default)
    DRAWABLE
          The destination DRAWABLE.

    GCONTEXT
          The graphics context for drawing text.

    X
    Y
          The left baseline position for the character drawn.

    ELEMENT
          A character or other object to be translated into a font
          index.

    :TRANSLATE
          A function to translate text to font indexes. Default is
          #'TRANSLATE-DEFAULT.

    :WIDTH
          The total pixel width of the character actually drawn, if
          known.

    :SIZE
          Specifies the element size of the destination buffer given to
          :TRANSLATE (8, 16, or :DEFAULT).

     Draws a single character of filled text represented by the given
     _element_. The given _x_ and _y_ specify the left baseline
     position for the character. The first return value is true if the
     character is successfully translated and drawn, or NIL if the
     :TRANSLATE function did not translate it. The second return value
     gives the total pixel width of the character actually drawn, if
     known.

     Specifying a :WIDTH is a hint to improve performance. The :WIDTH
     is assumed to be the total pixel width of the character actually
     drawn. Specifying :WIDTH permits appending the output of
     subsequent calls to the same protocol request, provided _gcontext_
     has not been modified in the interim. If :WIDTH is not specified,
     appending of subsequent output might not occur (unless :TRANSLATE
     returns the character width).

     The :SIZE specifies the element size of the destination buffer
     given to :TRANSLATE (either 8, 16, or :DEFAULT). If :DEFAULT is
     specified, the size is based on the current font, if known;
     otherwise, 16 is used.

    OUTPUT-P
          Type BOOLEAN.

    WIDTH
          Type INT32 or NULL.


 -- Function: draw-glyphs drawable gcontext x y sequence &key (:start
          0) :end :translate :width (:size :default)
    DRAWABLE
          The destination DRAWABLE.

    GCONTEXT
          The graphics context for drawing text.

    X
    Y
          The left baseline position for the character drawn.

    SEQUENCE
          A sequence of characters or other objects to be translated
          into font indexes.

    :START
    :END
          Start and end indexes defining the elements to draw.

    :TRANSLATE
          A function to translate text to font indexes. Default is
          #'TRANSLATE-DEFAULT.

    :WIDTH
          The total total pixel width of the character actually drawn,
          if known.

    :SIZE
          The element size of the destination buffer given to
          :TRANSLATE (8, 16, or :DEFAULT).

     Draws the filled text characters represented by the given
     sequence. :START and :END define the elements of the sequence
     which are drawn. The given _x_ and _y_ specify the left baseline
     position for the first character. The first return value is NIL if
     all characters are successfully translated and drawn; otherwise,
     the index of the first untranslated sequence element is returned.
     The second return value gives the total pixel width of the
     characters actually drawn, if known.

     Specifying a :WIDTH is a hint to improve performance. The :WIDTH
     is assumed to be the total pixel width of the character sequence
     actually drawn. Specifying :WIDTH permits appending the output of
     subsequent calls to the same protocol request, provided _gcontext_
     has not been modified in the interim. If :WIDTH is not specified,
     appending of subsequent output might not occur (unless :TRANSLATE
     returns the character width).

     The :SIZE specifies the element size of the destination buffer
     given to :TRANSLATE (either 8, 16, or :DEFAULT). If :DEFAULT is
     specified, the size is based on the current font, if known;
     otherwise, 16 is used.
    NEW-START
          Type ARRAY-INDEX or NULL.

    WIDTH
          Type INT32 or NULL.


 -- Function: draw-image-glyph drawable gcontext x y element &key
          :translate :width (:size :default)
    DRAWABLE
          The destination DRAWABLE.

    GCONTEXT
          The graphics context for drawing text.

    X
    Y
          The left baseline position for the character drawn.

    ELEMENT
          A character or other object to be translated into a font
          index.

    :TRANSLATE
          A function to translate text to font indexes. Default is
          #'TRANSLATE-DEFAULT.

    :WIDTH
          The total pixel width of the character actually drawn, if
          known.

    :SIZE
          Specifies the element size of the destination buffer given to
          :TRANSLATE (8, 16, or :DEFAULT).

     Draws a single character of block text represented by the given
     _element_. The given _x_ and _y_ specify the left baseline
     position for the character. The first return value is true if the
     character is successfully translated and drawn, or NIL if the
     :TRANSLATE function did not translate it. The :TRANSLATE function
     is allowed to return an initial font change. The second return
     value gives the total pixel width of the character actually drawn,
     if known.

     The :TRANSLATE function may not return a horizontal position
     change, since DRAW-IMAGE-GLYPH does not generate complex output
     requests.

     Specifying a :WIDTH is a hint to improve performance. The :WIDTH
     is assumed to be the total pixel width of the character actually
     drawn. Specifying :WIDTH permits appending the output of
     subsequent calls to the same protocol request, provided _gcontext_
     has not been modified in the interim. If :WIDTH is not specified,
     appending of subsequent output might not occur (unless :TRANSLATE
     returns the character width).

     The :SIZE specifies the element size of the destination buffer
     given to :TRANSLATE (either 8, 16, or :DEFAULT). If :DEFAULT is
     specified, the size is based on the current font, if known;
     otherwise, 16 is used.
    OUTPUT-P
          Type BOOLEAN.

    WIDTH
          Type INT32 or NULL.


 -- Function: draw-image-glyphs drawable gcontext x y sequence &key
          (:start 0) :end :translate :width (:size :default)
    DRAWABLE
          The destination DRAWABLE.

    X
    Y
          The left baseline position for the character drawn.

    GCONTEXT
          The graphics context for drawing text.

    SEQUENCE
          A sequence of characters or other objects to be translated
          into font indexes.

    :START
    :END
          Start and end indexes defining the elements to draw.

    :TRANSLATE
          A function to translate text to font indexes. Default is
          #'TRANSLATE-DEFAULT.

    :WIDTH
          The total total pixel width of the character actually drawn,
          if known.

    :SIZE
          The element size of the destination buffer given to
          :TRANSLATE (8, 16, or :DEFAULT).

     Draws the block text characters represented by the given SEQUENCE.
     :START and :END define the elements of the _sequence_ which are
     drawn. The given _x_ and _y_ specify the left baseline position
     for the first character. The first return value is NIL if all
     characters are successfully translated and drawn; otherwise, the
     index of the first untranslated sequence element is returned. The
     :TRANSLATE function is allowed to return an initial font change.
     The second return value gives the total pixel width of the
     characters actually drawn, if known.

     The :TRANSLATE function may not return a horizontal position
     change, since DRAW-IMAGE-GLYPHS does not generate complex output
     requests.

     Specifying a :WIDTH is a hint to improve performance. The :WIDTH
     is assumed to be the total pixel width of the character sequence
     actually drawn. Specifying :WIDTH permits appending the output of
     subsequent calls to the same protocol request, provided _gcontext_
     has not been modified in the interim. If :WIDTH is not specified,
     appending of subsequent output might not occur (unless :TRANSLATE
     returns the character width).

     The :SIZE specifies the element size of the destination buffer
     given to :TRANSLATE (either 8, 16, or :DEFAULT). If :DEFAULT is
     specified, the size will be based on the current font, if known;
     otherwise, 16 is used.

    NEW-START
          Type ARRAY-INDEX or NULL.

    WIDTH
          Type INT32 or NULL.


 -- Function: translate-function source source-start source-end font
          destination destination-start
    SOURCE
          A sequence of characters or other objects to be translated.

    SOURCE-START
          An array-index specifying the first _source_ element to be
          translated.

    SOURCE-END
          An array-index specifying the end of the _source_ subsequence
          to be translated.

    FONT
          The font indexed by translated _source_ elements.

    DESTINATION
          A vector where translated _source_ elements are stored.

    DESTINATION-START
          An array-index specifying the position to begin storing
          translated _source_ elements.

     A function used as the :TRANSLATE argument for text functions.
     Converts elements of the _source_ (sub)sequence into font indexes
     for the given _font_ and stores them into the _destination_ vector.

     The _destination_ vector is created automatically by CLX.
     _destination_ is guaranteed to have room for (- _source-end
     source-star_t) integer elements, starting at _destination-start_.
     Elements of _destination_ can be either CARD8 or CARD16 integers,
     depending on the context. _font_ is the current font, if known, or
     NIL otherwise. Starting with the element at _source-start_,
     TRANSLATE-FUNCTION should translate as many elements of _source_
     as possible (up to the _source-end_ element) into indexes in the
     current _font_, and store them into _destination_. The first
     return value should be the source index of the first untranslated
     element.

     The second return value indicates the changes which should be made
     to the current text output request before translating the
     remaining _source_ elements. If no further elements need to be
     translated, the second return value should be NIL. If a horizontal
     motion is required before further translation, the second return
     value should be the change in x position. If a font change is
     required for further translation, the second return value should
     be the new font.

     If known, the pixel width of the translated text can be returned
     as the third value; this can allow for appending of subsequent
     output to the same protocol request, if no overall width has been
     specified at the higher level.
    FIRST-NOT-DONE
          Type ARRAY-INDEX.

    TO-CONTINUE
          Type INT16, FONT, or NULL.

    CURRENT-WIDTH
          Type INT32 or NULL.



File: clx.info,  Node: Images,  Next: Font and Characters,  Prev: Graphic Operations,  Up: Top

8 Images
********

The X protocol provides for the transfer of images (two-dimensional
arrays of pixel data) between a client program and a DRAWABLE. The
format for image data can vary considerably. In order to present a
uniform data representation for the manipulation of a variety of
images, CLX defines a special IMAGE data type. Additional IMAGE
subtypes - IMAGE-XY and IMAGE-Z - allow for the representation of an
image either as a sequence of bit planes or as an array of pixels. CLX
includes functions for accessing IMAGE objects; for transferring image
data between IMAGE objects, DRAWABLES, and files; and also for direct
transfer of raw image data.

* Menu:

* Image Types::
* Image Functions::
* Image Files::
* Direct Image Transfer::


File: clx.info,  Node: Image Types,  Next: Image Functions,  Prev: Images,  Up: Images

8.1 Image Types
===============

The IMAGE data type is the base type for all IMAGE objects. IMAGE-XY
and IMAGE-Z are subtypes of the IMAGE type which furnish accessors
specialized for different image representations.

* Menu:

* Basic Images::
* XY-Format Images::
* Z-Format Images::


File: clx.info,  Node: Basic Images,  Next: XY-Format Images,  Prev: Image Types,  Up: Image Types

8.1.1 Basic Images
------------------

The following paragraphs describe the CLX functions that can be used to
access all types of IMAGE objects.

 -- Function: image-blue-mask image
    IMAGE
          An IMAGE object.

     Returns (and with `setf') changes the _mask_ that selects the
     pixel subfield for blue intensity values. The _mask_ is non-NIL
     only for images for :DIRECT-COLOR or :TRUE-COLOR visual types.

    MASK
          Type PIXEL or NULL.


 -- Function: image-depth image
    IMAGE
          An IMAGE object.

     Returns the _depth_ (that is, the number of bits per pixel) for
     the _image_.
    DEPTH
          Type CARD8.


 -- Function: image-green-mask image
    IMAGE
          An IMAGE object.

     Returns (and with `setf') changes the mask that selects the pixel
     subfield for green intensity values. The mask is non-NIL only for
     images for :DIRECT-COLOR or :TRUE-COLOR visual types.
    MASK
          Type PIXEL or NULL.


 -- Function: image-height image
    IMAGE
          An IMAGE object.

     Returns the _height_ of the _image_ in pixels.
    HEIGHT
          Type CARD16.


 -- Function: image-name image
    IMAGE
          An IMAGE object.

     Returns and (with `setf') changes the _name_ string optionally
     associated with the _image_.
    NAME
          Type STRINGABLE or NULL.


 -- Function: image-plist image
    IMAGE
          An IMAGE object.

     Returns and (with `setf') changes the _image_ property list. The
     property list is a hook for added application extensions.
    PLIST
          Type LIST.


 -- Function: image-red-mask image
    IMAGE
          An IMAGE object.

     Returns (and with `setf') changes the _mask_ which selects the
     pixel subfield for red intensity values. The _mask_ is non-NIL
     only for images for :DIRECT-COLOR or :TRUE-COLOR visual types.
    MASK
          Type PIXEL or NULL.


 -- Function: image-width image
    IMAGE
          An IMAGE object.

     Returns the _width_ of the _image_ in pixels.
    WIDTH
          Type CARD16.


 -- Function: image-x-hot image
    IMAGE
          An IMAGE object.

     Returns and (with `setf') changes the x position of the hot spot
     for an image used as a cursor glyph. The hot spot position is
     specified relative to the upper-left origin of the _image_.
    X-POSITION
          Type CARD16 or NULL.


 -- Function: image-y-hot image
    IMAGE
          An IMAGE object.

     Returns and (with `setf') changes the y position of the hot spot
     for an image used as a cursor glyph. The hot spot position is
     specified relative to the upper-left origin of the _image_.
    Y-POSITION
          Type CARD16 or NULL.



File: clx.info,  Node: XY-Format Images,  Next: Z-Format Images,  Prev: Basic Images,  Up: Image Types

8.1.2 XY-Format Images
----------------------

The IMAGE-XY subtype represents an image as a sequence of bitmaps, one
for each plane of the image, in most-significant to least-significant
bit order. The following paragraphs describe the additional CLX
functions that can be used to access IMAGE-XY objects.

 -- Function: image-xy-bitmap-list image
    IMAGE
          An IMAGE-XY object.

     Returns and (with `setf') changes the list of bitmap planes for
     the _image_.
    BITMAPS
          Type LIST of BITMAP.



File: clx.info,  Node: Z-Format Images,  Prev: XY-Format Images,  Up: Image Types

8.1.3 Z-Format Images
---------------------

The IMAGE-Z subtype represents an image as a two-dimensional array of
pixels, in scanline order. The following paragraphs describe the
additional CLX functions that can be used to access IMAGE-Z objects.

 -- Function: image-z-bits-per-pixel image
    IMAGE
          An IMAGE-Z object.

     Returns and (with `setf') changes the number of bits per data unit
     used to contain a pixel value for the _image_. Depending on the
     storage format for image data, this value can be larger than the
     actual _image_ depth.
    PIXEL-DATA-SIZE
          One of 1, 4, 8, 16, 24, or 32.


 -- Function: image-z-pixarray image
    IMAGE
          An IMAGE-Z object.

     Returns and (with `setf') changes the two-dimensional array of
     pixel data for the _image_.
    PIXARRAY
          Type PIXARRAY.



File: clx.info,  Node: Image Functions,  Next: Image Files,  Prev: Image Types,  Up: Images

8.2 Image Functions
===================

The following paragraphs describe the CLX functions used to:

   * Create an IMAGE object.

   * Copy an image or a subimage.

   * Read an image from a DRAWABLE.

   * Display an image to a DRAWABLE.

 -- Function: create-image &key :bit-lsb-first-p :bits-per-pixel
          :blue-mask :byte-lsb-first-p :bytes-per-line :data :depth
          :format :green-mask :height :name :plist :red-mask :width
          :x-hot :y-hot Function
    :BIT-LSB-FIRST-P
          For a returned image, true if the order of bits in each :DATA
          byte is least-significant bit first.

    :BITS-PER-PIXEL
          One of 1, 4, 8, 16, 24, or 32.

    :BLUE-MASK
          For :TRUE-COLOR or :DIRECT-COLOR images, a pixel mask.

    :BYTE-LSB-FIRST-P
          For a returned _image_, true if the :DATA byte order is
          least-significant byte first.

    :BYTES-PER-LINE
          For a returned _image_, the number of :DATA bytes per
          scanline.

    :DATA
          Either a LIST of BITMAPS, a PIXARRAY, or an array of CARD8
          bytes.

    :DEPTH
          The number of bits per displayed pixel.

    :FORMAT
          One of :BITMAP, :XY-FORMAT, or :Z-FORMAT.

    :GREEN-MASK
          For :TRUE-COLOR or :DIRECT-COLOR images, a pixel mask.

    :HEIGHT
          A CARD16 for the image height in pixels.

    :NAME
          An optional STRINGABLE for the image name.

    :PLIST
          An optional image property list.

    :RED-MASK
          For :TRUE-COLOR or :DIRECT-COLOR images, a pixel mask.

    :WIDTH
          A CARD16 for the image width in pixels.

    :X-HOT
          For a CURSOR image, the x position of the hot spot.

    :Y-HOT
          For a cursor image, the y position of the hot spot.

     Creates an IMAGE object from the given :DATA and returns either an
     IMAGE, IMAGE-XY, or an IMAGE-Z, depending on the type of image
     :DATA. If the :DATA is a list, it is assumed to be a LIST of
     BITMAPS and an IMAGE-XY is created. If the :DATA is a PIXARRAY, an
     IMAGE-Z is created. Otherwise, the :DATA must be an array of bytes
     (CARD8), in which case a basic IMAGE object is created.

     If the :DATA is a list, each element must be a bitmap of equal
     size. :WIDTH and :HEIGHT default to the bitmap width -
     (ARRAY-DIMENSION BITMAP 1) - and the bitmap height -
     (ARRAY-DIMENSION BITMAP 0) - respectively. :DEPTH defaults to the
     number of bitmaps.

     If the :DATA is a PIXARRAY, :WIDTH and :HEIGHT default to the
     PIXARRAY width - (ARRAY-DIMENSION PIXARRAY 1), and the pixarray
     height - (ARRAY-DIMENSION PIXARRAY 0), respectively. :DEPTH
     defaults to (PIXARRAY-DEPTH :DATA). The :BITS-PER-PIXEL is rounded
     to a valid size, if necessary. By default, the :BITS-PER-PIXEL is
     equal to the :DEPTH.

     If the :DATA is an array of CARD8, the :WIDTH and :HEIGHT are
     required to interpret the image data correctly. The
     :BITS-PER-PIXEL defaults to the :DEPTH, and the :DEPTH defaults to
     1. :BYTES-PER-LINE defaults to:

          (FLOOR (LENGTH :DATA) (* :BITS-PER-PIXEL :HEIGHT))

     The :FORMAT defines the storage format of image data bytes and can
     be one of the following values:

    :XY-PIXMAP
          The :DATA is organized as a set of bitmaps representing image
          bit planes, appearing in most-significant to
          least-significant bit order.

    :Z-PIXMAP
          The :DATA is organized as a set of pixel values in scanline
          order.

    :BITMAP
          Similar to :XY-PIXMAP, except that the :DEPTH must be 1, and
          1 and 0 bits represent the foreground and background pixels,
          respectively.

     By default, the :FORMAT is :BITMAP if :DEPTH is 1; otherwise,
     :Z-PIXMAP.

          Type IMAGE.


 -- Function: copy-image image &key (:x 0) (:y 0) :width :height
          :result-type
    IMAGE
          An IMAGE object.

    :X
    :Y
          CARD16 values defining the position of the upper-left corner
          of the subimage copied.

    :WIDTH
    :HEIGHT
          CARD16 values defining the size of subimage copied.

    :RESULT-TYPE
          One of 'IMAGE-X, 'IMAGE-XY, or 'IMAGE-Z.

     Returns a new image, of the given :RESULT-TYPE, containing a copy
     of the portion of the _image_ defined by :X, :Y, :WIDTH, and
     :HEIGHT. By default, :WIDTH is:

          (- (IMAGE-WIDTH _image_) :X)

     and :HEIGHT is:

          (- (IMAGE-HEIGHT _image_) :Y)

     If necessary, the new image is converted to the :RESULT-TYPE, that
     can be one of the following values:

    `'image-x'
          A basic IMAGE object is returned.

    `'image-xy'
          An IMAGE-XY is returned.

    `'image-z'
          An IMAGE-Z is returned.

    NEW-IMAGE
          Type IMAGE.


 -- Function: get-image drawable &key :x :y :width :height :plane-mask
          (:format :z-format) :result-type Function
    DRAWABLE
          A DRAWABLE.

    :X
    :Y
          CARD16 values defining the upper-left DRAWABLE pixel
          returned. These arguments are required.

    :WIDTH
    :HEIGHT
          CARD16 values defining the size of the _image_ returned. These
          arguments are required.

    :PLANE-MASK
          A pixel mask.

    :FORMAT
          Either :XY-PIXMAP or :Z-PIXMAP.

    :RESULT-TYPE
          One of 'IMAGE-X, 'IMAGE-XY, or 'IMAGE-Z.

     Returns an _image_ containing pixel values from the region of the
     _drawable_ given by :X, :Y, :WIDTH, and :HEIGHT. The bits for all
     planes selected by 1 bits in the :PLANE-MASK are returned as zero;
     the default :PLANE-MASK is all 1 bits. The :FORMAT of the returned
     pixel values may be either :XY-FORMAT or :Z-FORMAT.

     The :RESULT-TYPE defines the type of image object returned:

    `'image-x'
          A basic IMAGE object is returned.

    `'image-xy'
          An IMAGE-XY is returned.

    `'image-z'
          An IMAGE-Z is returned.

     By default, :RESULT-TYPE is 'IMAGE-Z if :FORMAT is :Z-FORMAT and
     'IMAGE-XY if :FORMAT is :XY-FORMAT.
          Type IMAGE.


 -- Function: put-image drawable gcontext image &key (:src-x 0) (:src-y
          0) :x :y :width :height :bitmap-p
    DRAWABLE
          The destination DRAWABLE.

    GCONTEXT
          The graphics context used to display the _image_.

    IMAGE
          An IMAGE object.

    :SRC-X
    :SRC-Y
          CARD16 values defining the upper-left position of the _image_
          region to display.

    :X
    :Y
          The position in the _drawable_ where the _image_ region is
          displayed. These arguments are required.

    :WIDTH :HEIGHT
          CARD16 values defining the size of the _image_ region
          displayed.

    :BITMAP-P
          If _image_ is depth 1, then if true, foreground and
          background pixels are used to display 1 and 0 bits of the
          _image_.

     Displays a region of the _image_ defined by :SRC-X, :SRC-Y,
     :WIDTH, and :HEIGHT on the destination d_rawable_, with the
     upper-left pixel of the _image_ region displayed at the _drawable_
     position given by :X and :Y. By default, :WIDTH is:

          (- (IMAGE-WIDTH _image_) :SRC-X)

     and :HEIGHT is:

          (- (IMAGE-HEIGHT _image_) :SRC-Y)

     The following attributes of the _gcontext_ are used to display the
     IMAGE: clip-mask, clip-x, clip-y, function, plane-mask, and
     subwindow-mode.

     The :BITMAP-P argument applies only to images of depth 1. In this
     case, if :BITMAP-P is true or if the _image_ is a basic IMAGE
     object created with :FORMAT :BITMAP, the _image_ is combined with
     the foreground and background pixels of the GCONTEXT. 1 bits of
     the _image_ are displayed in the foreground pixel and 0 bits are
     displayed in the background pixel.



File: clx.info,  Node: Image Files,  Next: Direct Image Transfer,  Prev: Image Functions,  Up: Images

8.3 Image Files
===============

CLX provides functions that allow images to be written to a file in a
standard X format. The following paragraphs describe the CLX functions
used to:

   * Read an image from a file.

   * Write an image to a file.

 -- Function: read-bitmap-file pathname
    PATHNAME
          An image file pathname.

     Reads an image file in standard X format and returns an IMAGE
     object. The returned _image_ can have depth greater than one.
    IMAGE
          Type IMAGE.


 -- Function: write-bitmap-file pathname image &optional name
    PATHNAME
          An image file pathname.

    IMAGE
          An IMAGE object.

    NAME
          A STRINGABLE image name.

     Writes the _image_ to an image file in standard X format. The
     _image_ can have depth greater than one. The _name_ is an image
     identifier written to the file; the default _name_ is (OR
     (IMAGE-NAME _image_) 'IMAGE).



File: clx.info,  Node: Direct Image Transfer,  Prev: Image Files,  Up: Images

8.4 Direct Image Transfer
=========================

For cases where the IMAGE representation is not needed, CLX provides
functions to read and display image data directly.

 -- Function: get-raw-image drawable &key :data (:start 0) :x :y :width
          :height :plane-mask (:format :z-format) (:result-type
          '(vector card8))
    DRAWABLE
          A DRAWABLE.

    :DATA
          An optional SEQUENCE of CARD8.

    :START
          The index of the first :DATA element modified.

    :X
    :Y
          CARD16 values defining the size of the IMAGE returned. These
          arguments are required.

    :WIDTH
    :HEIGHT
          CARD16 values defining the size of the image returned.These
          arguments are required.

    :PLANE-MASK
          A pixel mask.

    :FORMAT
          Either :XY-PIXMAP or :Z-PIXMAP. This argument is required.

    :RESULT-TYPE
          The type of image data sequence to return.

     Returns a sequence of image data from the region of the _drawable_
     given by :X, :Y, :WIDTH, and :HEIGHT. If :DATA is given, it is
     modified beginning with the element at the :START index and
     returned. The _depth_ and _visua_l type ID of the _drawable_ are
     also returned.

     The bits for all planes selected by 1 bits in the :PLANE-MASK are
     returned as zero; the default :PLANE-MASK is all 1 bits. The
     :FORMAT of the returned pixel values may be either :XY-FORMAT or
     :Z-FORMAT. The :RESULT-TYPE defines the type of image data
     returned.

     The calling program is responsible for handling the byte-order and
     bit-order returned by the server for the _drawable_'s display (see
     DISPLAY-BYTE-ORDER and DISPLAY-IMAGE-LSB-FIRST-P).
    DATA
          Type SEQUENCE or CARD8.

    DEPTH
          Type CARD8.

    VISUAL
          Type CARD29.


 -- Function: put-raw-image drawable gcontext data &key (:start 0)
          :depth :x :y :width :height (:left-pad 0) :format
    DRAWABLE
          The destination DRAWABLE.

    GCONTEXT
          The graphics context used to display the image.

    DATA
          A sequence of integers.

    :START
          The index of the first element of _data_ displayed.

    :DEPTH
          The number of bits per pixel displayed. This argument is
          required.

    :X
    :Y
          The position in the _drawable_ where the image region is
          displayed. These arguments are required.

    :WIDTH
    :HEIGHT
          CARD16 values defining the size of the image region
          displayed. These arguments are required.

    :LEFT-PAD
          A CARD8 specifying the number of leading bits to discard for
          each image scanline.

    :FORMAT
          One of :BITMAP, :XY-PIXMAP, or :Z-PIXMAP.

     Displays a region of the image data defined by :START, :LEFT-PAD,
     :WIDTH, and :HEIGHT on the destination _drawable_, with the
     upper-left pixel of the image region displayed at the _drawable_
     position given by :X and :Y.

     The :FORMAT can be either :XY-PIXMAP, :Z-PIXMAP, or :BITMAP. If
     :XY-PIXMAP or :Z-PIXMAP formats are used, :DEPTH must match the
     depth of the destination _drawable_. For :XY-PIXMAP, the data must
     be in XY format. For :Z-PIXMAP, the data must be in Z format for
     the given :DEPTH.

     If the :FORMAT is :BITMAP, the :DEPTH must be 1. In this case, the
     image is combined with the foreground and background pixels of the
     _gcontext_. 1 bits of the image are displayed in the foreground
     pixel and 0 bits are displayed in the background pixel.

     The :LEFT-PAD must be zero for :Z-PIXMAP format. For :BITMAP and
     :XY-PIXMAP formats, the :LEFT-PAD must be less than the
     bitmap-scanline-pad for the _drawable_'s display (*note
     display-bitmap-format::). The first :LEFT-PAD bits in every
     scanline are to be ignored by the server; the actual image begins
     that many bits into the data.

     The following attributes of the _gcontext_ are used to display the
     IMAGE: clip-mask, clip-x, clip-y, function, plane-mask, and
     subwindow-mode.

     The calling program is responsible for handling the byte-order and
     bit-order required by the server for the _drawable_'s display (see
     DISPLAY-BYTE-ORDER and DISPLAY-IMAGE-LSB-FIRST-P).



File: clx.info,  Node: Font and Characters,  Next: Colors,  Prev: Images,  Up: Top

9 Font and Characters
*********************

An X server maintains a set of fonts used in the text operations
requested by client programs. An X font is an array of character bit
maps (or _glyphs_) indexed by integer codes. In fact, font glyphs can
also represent cursor shapes or other images and are not limited to
character images. X supports both linear and matrix encoding of font
indexes.  With linear encoding, a font index is interpreted as a single
16-bit integer index into a one-dimensional array of glyphs. With matrix
encoding, a font index is interpreted as a pair of 8-bit integer indexes
into a two-dimensional array of glyphs. The type of index encoding used
is font-dependent.

   In order to access or use a font, a client program must first open it
using the OPEN-FONT function, sending a font name string as an
identifier. OPEN-FONT creates a CLX FONT object used to refer to the
font in subsequent functions. Afterward, calling OPEN-FONT with the
same font name returns the same FONT object. When a font is no longer
in use, a client program can call CLOSE-FONT to destroy the FONT object.

   A font has several attributes which describe its geometry and its
glyphs. CLX provides functions to return the attributes of a font, as
well functions for accessing the attributes of individual font glyphs.
Glyph attributes are referred to as _character attributes_, since
characters are the most common type of font glyphs. A font also has a
property list of values recorded by the X server. However, the set of
possible font properties and their values are not standardized and are
implementation-dependent. Typically, CLX maintains a cache of font and
character attributes, in order to minimize server requests.  However,
the font cache mechanism is implementation-dependent and cannot be
controlled by the client. In some cases, CLX may create a _pseudo-font_
object solely for the purpose of accessing font attributes. A
pseudo-font is represented by a special type of FONT object that cannot
be used in a GCONTEXT. If necessary, CLX can automatically convert a
pseudo-font into a true font, if the name of the pseudo-font is known.

   The set of available fonts is server-dependent; that is, font names
are not guaranteed to be portable from one server to the next. However,
the public X implementation from MIT includes a set of fonts that are
typically available with most X servers.

   The following paragraphs describe CLX functions to:

   * Open and close fonts.

   * List available fonts.

   * Access font attributes.

   * Access character attributes.

   * Return the size of a text string.

* Menu:

* Opening Fonts::
* Listing Fonts::
* Font Attributes::
* Chracter Attributes::
* Querying Text Size::


File: clx.info,  Node: Opening Fonts,  Next: Listing Fonts,  Prev: Font and Characters,  Up: Font and Characters

9.1 Opening Fonts
=================

The following paragraphs discuss the CLX functions for opening and
closing fonts.

 -- Function: open-font display name
    DISPLAY
          A DISPLAY object.

    NAME
          A font name string.

     Opens the font with the given _name_ and returns a FONT object.
     The name string should contain only ISO Latin-1 characters; case
     is not significant.

    FONT
          Type FONT.


 -- Function: close-font font
    FONT
          A FONT object.

     Deletes the association between the resource ID and the _font_.
     The _font_ is freed when no other server resource references it.
     The _font_ can be unloaded by the X server if this is the last
     reference to the _font_ by any client. In any case, the _font_
     should never again be referenced because its resource ID is
     destroyed. This might not generate a protocol request if the
     _font_ is reference-counted locally or if it is a pseudo-font.


 -- Function: discard-font-info fonts
    FONT
          A FONT object.

     Discards any state that can be re-obtained with OPEN-FONT. This is
     simply a performance hint for memory-limited systems.



File: clx.info,  Node: Listing Fonts,  Next: Font Attributes,  Prev: Opening Fonts,  Up: Font and Characters

9.2 Listing Fonts
=================

The following paragraphs describe CLX functions that return fonts or
font names that match a given pattern string. Such pattern strings
should contain only ISO Latin-1 characters; case is not significant. The
following pattern characters can be used for _wildcard_ matching:

`#\*'
     Matches any sequence of zero or more characters.

`#\?'
     Matches any single character.

   For example, the pattern "T?mes Roman" matches the name "Times Roman"
but not the name "Thames Roman". However, the pattern "T*mes Roman"
matches both names.

 -- Function: font-path display &key (:result-type 'list)
    DISPLAY
          A DISPLAY object.

    :RESULT-TYPE
          Specifies the type of resulting sequence.

     Returns a LIST (by default) of names containing the current search
     path for fonts. With `setf', this function sets the search path
     for font lookup. There is only one search path per server, not one
     per client. The interpretation of the names is server-dependent,
     but they are intended to specify directories to be searched in the
     order listed.

     Setting the path to the empty list restores the default path
     defined for the server. Note that as a side-effect of executing
     this request, the server is guaranteed to flush all cached
     information about fonts for which there are currently no explicit
     resource IDs allocated.
    PATHS
          Type SEQUENCE of either STRING or PATHNAME.


 -- Function: list-font-names display pattern &key (:max-fonts 65535)
          (:result-type 'list)
    DISPLAY
          A DISPLAY object.

    PATTERN
          A string used to match font names. Only font names that match
          the pattern are returned.

    :MAX-FONTS
          The maximum number of font names returned. Default is 65535.

    :RESULT-TYPE
          The type of sequence to return. Default is 'LIST.

     Returns a sequence of strings containing the font names that match
     the _pattern_. The fonts available are determined by the font
     search path; see FONT-PATH). The maximum number of font names
     returned is determined by :MAX-FONTS.

    FONT-NAME
          Type SEQUENCE of STRING.


 -- Function: list-fonts display pattern &key (:max-fonts 65535)
          (:result-type 'list)
    DISPLAY
          A DISPLAY object.

    PATTERN
          A string used to match font names. Only fonts whose name
          matches the pattern are returned.

    :MAX-FONTS
          The maximum number of fonts returned. Default is 65535.

    :RESULT-TYPE
          The type of sequence to return. Default is 'LIST.

     Returns a sequence of pseudo-fonts corresponding to the available
     fonts whose names match the _pattern_. The fonts available are
     determined by the font search path; see FONT-PATH). The maximum
     number of FONT objects returned is determined by :MAX-FONTS.

    FONT
          Type SEQUENCE of FONT.



File: clx.info,  Node: Font Attributes,  Next: Chracter Attributes,  Prev: Listing Fonts,  Up: Font and Characters

9.3 Font Attributes
===================

The following paragraphs describe the CLX functions used to access font
attributes.

 -- Function: font-all-chars-exist-p font
    EXISTS-P
          Type BOOLEAN.

     Returns true if glyphs exist for all indexes in the range returned
     by FONT-MIN-CHAR and FONT-MAX-CHAR. Returns NIL if an index in the
     range corresponds to empty glyph.

    FONT
          A FONT object.


 -- Function: font-ascent font
    ASCENT
          Type INT16.

     Returns the vertical _ascent_ of the _font_ used for interline
     spacing. The _ascent_ defines the nominal distance in pixels from
     the baseline to the bottom of the previous line of text.  Some
     font glyphs may actually extend beyond the font _ascent_.
    FONT
          A FONT object.


 -- Function: font-default-char font
    INDEX
          Type CARD16.

     Returns the _index_ of the glyph drawn when an invalid or empty
     glyph index is specified.  If the default index specifies an
     invalid or empty glyph, an invalid or empty index has no effect.
    FONT
          A FONT object.


 -- Function: font-descent font
    DESCENT
          Type INT16.

     Returns the vertical _descent_ of the _font_ used for interline
     spacing. The _descent_ defines the nominal distance in pixels from
     the baseline to the top of the next line of text. Some font glyphs
     may actually extend beyond the font _descent_.
    FONT
          A FONT object.


 -- Function: font-direction font
    DIRECTION
          Type DRAW-DIRECTION.

     Returns the nominal drawing _direction_ for the _font_. The font
     drawing direction is only a hint that indicates whether the
     _char-width_ of most font glyphs is positive (:LEFT-TO-RIGHT
     direction) or negative (:RIGHT-TO-LEFT direction). Note that X
     does not provide any direct support for vertical text.
    FONT
          A FONT object.


 -- Function: font-display font
    FONT
          A FONT object.

     Returns the DISPLAY object associated with the specified _font_.

    DISPLAY
          Type DISPLAY.


 -- Function: font-equal font-1 font-2
    FONT-1
    FONT-2
          The FONT objects.

     Returns true if the two arguments refer to the same server
     resource and NIL if they do not.


 -- Function: font-id font
    FONT
          A FONT object.

     Returns the unique resource ID assigned to the specified _font_.

    ID
          Type RESOURCE-ID.


 -- Function: font-max-byte1 font
    FONT
          A FONT object.

     Returns zero if the _font_ uses linear index encoding. Otherwise,
     if the _font_ uses matrix index encoding, a value between 1 and
     255 is returned that specifies the maximum value for the most
     significant byte of font indexes.
    MAX-BYTE1
          Type CARD8_._


 -- Function: font-max-byte2 font
    FONT
          A FONT object.

     Returns zero if the _font_ uses linear index encoding. Otherwise,
     if the _font_ uses matrix index encoding, a value between 1 and
     255 is returned that specifies the maximum value for the least
     significant byte of font indexes.
    MAX-BYTE2
          Type CARD8_._


 -- Function: font-max-char font
    FONT
          A FONT object.

     Returns the maximum valid value used for linear encoded indexes.
     This function is not meaningful for fonts that use matrix index
     encoding.
    INDEX
          Type CARD16.


 -- Function: font-min-byte1 font
    FONT
          A FONT object.

     Returns zero if the _font_ uses linear index encoding. Otherwise,
     if the _font_ uses matrix index encoding, a value between 1 and
     255 is returned that specifies the minimum value for the most
     significant byte of font indexes.
    MIN-BYTE1
          Type CARD8.


 -- Function: font-min-byte2 font
    FONT
          A FONT object.

     Returns zero if the _font_ uses linear index encoding. Otherwise,
     if the _font_ uses matrix index encoding, a value between 1 and
     255 is returned that specifies the minimum value for the least
     significant byte of font indexes.
    MIN-BYTE2
          Type CARD8.


 -- Function: font-min-char font
    FONT
          A FONT object.

     Returns the minimum valid value used for linear encoded indexes.
     This function is not meaningful for fonts that use matrix index
     encoding.
    INDEX
          Type CARD16.


 -- Function: font-name font
    FONT
          A FONT object.

     Returns the name of the _font_, or NIL if _font_ is a pseudo-font.
    NAME
          Type STRING or NULL.


 -- Function: font-p font
     Returns true if the argument is a FONT object and NIL otherwise.

    FONT-P
          Type BOOLEAN.


 -- Function: font-plist font
    FONT
          A FONT object.

     Returns and (with `setf') sets the property list for the specified
     _font_. This function provides a hook where extensions can add
     data.
    PLIST
          Type LIST.


 -- Function: font-properties font
    FONT
          A FONT object.

     Returns the list of font _properties_ recorded by the X server.
     The returned list is a property list of keyword/value pairs. The
     set of possible font property keywords is implementation-dependent.
    PROPERTIES
          Type LIST.


 -- Function: font-property font name
    FONT
          A FONT object.

    NAME
          A font property keyword.

     Returns the value of the font _property_ specified by the _name_
     keyword. The property value, if it exists, is returned as an
     uninterpreted 32-bit integer.
    PROPERTY
          Type INT32 or NULL.


 -- Function: max-char-ascent font
    FONT
          A FONT object.

     Returns the maximum CHAR-ASCENT value for all characters in _font_.
    ASCENT
          Type INT16.


 -- Function: max-char-attributes font
    FONT
          A FONT object.

     Returns the maximum CHAR-ATTRIBUTES value for all characters in
     _font_.
    ATTRIBUTES
          Type INT16.


 -- Function: max-char-descent font
    FONT
          A FONT object.

     Returns the maximum CHAR-DESCENT value for all characters in
     _font_.
    DESCENT
          Type INT16.


 -- Function: max-char-left-bearing font
    FONT
          A FONT object.

     Returns the maximum CHAR-LEFT-BEARING value for all characters in
     _font_.
    LEFT-BEARING
          Type INT16.


 -- Function: max-char-right-bearing font
    FONT
          A FONT object.

     Returns the maximum CHAR-RIGHT-BEARING value for all characters in
     _font_.
    RIGHT-BEARING
          Type INT16.


 -- Function: max-char-width font
    FONT
          A FONT object.

     Returns the maximum CHAR-WIDTH value for all characters in _font_.
    WIDTH
          Type INT16.


 -- Function: min-char-ascent font
    FONT
          A FONT object.

     Returns the minimum CHAR-ASCENT for all characters in _font_.
    ASCENT
          Type INT16.


 -- Function: min-char-attributes font
    FONT
          A FONT object.

     Returns the minimum CHAR-ATTRIBUTES for all characters in _font_.
    ATTRIBUTES
          Type INT16.


 -- Function: min-char-descent font
    FONT
          A FONT object.

     Returns the minimum CHAR-DESCENT for all characters in _font_.
    DESCENT
          Type INT16.


 -- Function: min-char-left-bearing font
    FONT
          A FONT object.

     Returns the minimum CHAR-LEFT-BEARING for all characters in _font_.
    LEFT-BEARING
          Type INT16.


 -- Function: min-char-right-bearing font
    FONT
          A FONT object.

     Returns the minimum CHAR-RIGHT-BEARING for all characters in
     _font_.
    RIGHT-BEARING
          Type INT16.


 -- Function: min-char-width font
    FONT
          A FONT object.

     Returns the minimum CHAR-WIDTH for all characters in _font_.
    WIDTH
          Type INT16.



File: clx.info,  Node: Chracter Attributes,  Next: Querying Text Size,  Prev: Font Attributes,  Up: Font and Characters

9.4 Chracter Attributes
=======================

The following paragraphs describe the CLX functions used to access the
attributes of individual font glyphs.

 -- Function: char-ascent font index
    FONT
          A FONT object.

    INDEX
          An INT16 font index.

     Returns the vertical distance in pixels from the baseline to the
     top of the given font glyph. Returns NIL if the index is invalid
     or specifies an empty glyph, or if the _font_ is a pseudo-font.
    ASCENT
          Type INT16 or NULL.


 -- Function: char-attributes font index
    FONT
          A FONT object.

    INDEX
          An INT16 font index.

     Returns font-specific _attributes_ of the given glyph. The
     interpretation of such attributes is server-dependent. Returns NIL
     if the _index_ is invalid or specifies an empty glyph, or if the
     _font_ is a pseudo-font.
    ATTRIBUTES
          Type INT16 or NULL.


 -- Function: char-descent font index
    FONT
          A FONT object.

    INDEX
          An INT16 font index.

     Returns the vertical distance in pixels from the baseline to the
     bottom of the given font glyph. Returns NIL if the _index_ is
     invalid or specifies an empty glyph, or if the _font_ is a
     pseudo-font.
    DESCENT
          Type INT16 or NULL.


 -- Function: char-left-bearing font index
    FONT
          A FONT object.

    INDEX
          An INT16 font index.

     Returns the left side bearing of the given font glyph. If
     DRAW-GLYPH is called with horizontal position _x_, the leftmost
     pixel of the glyph is drawn at the position (+ _x left-bearing_).
     Returns NIL if the _index_ is invalid or specifies an empty glyph,
     or if the _font_ is a pseudo-font.
    LEFT-BEARING
          Type INT16 or NULL.


 -- Function: char-right-bearing font index
    FONT
          A _font_ object.

    INDEX
          An INT16 font index.

     Returns the right side bearing of the given font glyph. If
     nDRAW-GLYPH is called with horizontal position _x_, the rightmost
     pixel of the glyph is drawn at the position (+ _x rightbearing_).
     Returns NIL if the _index_ is invalid or specifies an empty glyph,
     or if the _font_ is a pseudo-font.

    RIGHT-BEARING
          Type INT16 or NULL.


 -- Function: char-width font index
    FONT
          A FONT object.

    INDEX
          An INT16 font index.

     Returns the _width_ of the given font glyph. The _width_ is
     defined to be equal to (- _rightbearing left-bearing_). Returns
     NIL if the _index_ is invalid or specifies an empty glyph, or if
     the _font_ is a pseudo-font.

    WIDTH
          Type INT16 or NULL.



File: clx.info,  Node: Querying Text Size,  Prev: Chracter Attributes,  Up: Font and Characters

9.5 Querying Text Size
======================

CLX defines functions to return the size of text drawn in a specified
font. *Note Drawing Text::, for a description of the :TRANSLATE
function used by the functions in the following paragraphs.

 -- Function: text-extents font sequence &key (:start 0) :end :translate
    FONT
          The font (or GCONTEXT) used for measuring characters.

    SEQUENCE
          A sequence of characters or other objects to be translated
          into font indexes.

    :START
    :END
          Start and end indexes defining the elements to draw.

    :TRANSLATE
          A function to translate text to font indexes. Default is
          #'TRANSLATE-DEFAULT.

     Returns the complete geometry of the given _sequence_ when drawn
     in the given _fon_t. The _font_ can be a GCONTEXT, in which case
     the font attribute of the given graphics context is used. :START
     and :END define the elements of the _sequence_ which are used.

     The returned _width_ is the total pixel width of the translated
     character sequence. The returned _ascent_ and _descent_ give the
     vertical ascent and descent for characters in the translated
     _sequence_. The returned _left_ gives the left bearing of the
     leftmost character. The returned _right_ gives the right bearing
     of the rightmost character. The returned _font-ascent_ and
     _font-descent_ give the maximum vertical ascent and descent for
     all characters in the _fon_t. If :TRANSLATE causes font changes,
     then _font-ascent_ and _font-descent_ will be the maximums over
     all fonts used. The _direction_ returns the preferred draw
     direction for the font. If :TRANSLATE causes font changes, then
     the _direction_ will be NIL. The _first-not-done_ value returned
     is NIL if all elements of the _sequence_ were successfully
     translated; otherwise the index of the first untranslated element
     is returned.

    WIDTH
          Type INT32.

    ASCENT
          Type INT16.

    DESCENT
          Type INT16.

    LEFT
          Type INT32.

    RIGHT
          Type INT32.

    FONT-ASCENT
          Type INT16.

    DIRECTION
          Type DRAW-DIRECTION.

    FIRST-NOT-DONE
          Type ARRAY-INDEX or NULL.


 -- Function: text-width font sequence &key (:start 0) :end :translate
    FONT
          The font (or GCONTEXT) used for measuring characters.

    SEQUENCE
          A sequence of characters or other objects to be translated
          into font indexes.

    :START

    :END
          Start and end indexes defining the elements to draw.

    :TRANSLATE
          A function to translate text to font indexes. Default is
          #'TRANSLATE-DEFAULT.

     Returns the total pixel width of the given _sequence_ when drawn
     in the given _font_. The _font_ can be a GCONTEXT, in which case
     the font attribute of the given graphics context is used. :START
     and :END define the elements of the _sequence_ which are used. The
     second value returned is NIL if all elements of the _sequence_ were
     successfully translated; otherwise the index of the first
     untranslated element is returned.
    WIDTH
          Type INT32.

    FIRST-NOT-DONE
          Type ARRAY-INDEX or NULL.



File: clx.info,  Node: Colors,  Next: Cursors,  Prev: Font and Characters,  Up: Top

10 Colors
*********

* Menu:

* Colormaps and Colors::
* Color Functions::
* Colormap Functions::


File: clx.info,  Node: Colormaps and Colors,  Next: Color Functions,  Prev: Colors,  Up: Colors

10.1 Colormaps and Colors
=========================

In X, a _color_ is defined by a set of three numeric values,
representing intensities of red, green, and blue. Red, green, and blue
are referred to as the _primary_ hues. A _colormap_ is a list of
colors, each indexed by an integer _pixel_ value. Each entry in a
colormap is called a color _cell_. Raster graphics displays store pixel
values in a special screen hardware memory. As the screen hardware
scans this memory, it reads each pixel value, looks up the color in the
corresponding cell of a colormap, and displays the color on its screen.

   The colormap abstraction applies to all classes of visual types
supported by X, including those for screens which are actually
monochrome. For example, :GRAY-SCALE screens use colormaps in which
colors actually specify the monochrome intensity. A typical
black-and-white monochrome display has a :STATIC-GRAY screen with a
two-cell colormap.

   The following list describes how pixel values and colormaps are
handled for each visual class.

:DIRECT-COLOR
     A pixel value is decomposed into separate red, green, and blue
     subfields. Each subfield indexes a separate colormap. Entries in
     all colormaps can be changed.

:GRAY-SCALE
     A pixel value indexes a single colormap that contains monochrome
     intensities. Colormap entries can be changed.

:PSEUDO-COLOR
     A pixel value indexes a single colormap that contains color
     intensities. Colormap entries can be changed.

:STATIC-COLOR
     Same as :PSEUDO-COLOR, except that the colormap entries are
     predefined by the hardware and cannot be changed.

:STATIC-GRAY
     Same as :GRAY-SCALE, except that the colormap entries are
     predefined by the hardware and cannot be changed.

:TRUE-COLOR
     Same as :DIRECT-COLOR, except that the colormap entries are
     predefined by the hardware and cannot be changed. Typically, each
     of the red, green, and blue colormaps provides a (near) linear
     ramp of intensity.

   CLX provides functions to create colormaps, access and modify colors
and color cells, and install colormaps in screen hardware.


File: clx.info,  Node: Color Functions,  Next: Colormap Functions,  Prev: Colormaps and Colors,  Up: Colors

10.2 Color Functions
====================

A color is represented by a CLX color object, in which each of the red,
green, and blue values is specified by an RGB-VAL - a floating point
number between 0.0 and 1.0.  (*note Data Types::). The value 0.0
represents the minimum intensity, while 1.0 represents the maximum
intensity. CLX automatically converts RGB-VAL values into 16-bit
integers when sending colors to an X server. The X server, in turn,
scales 16-bit color values to match the actual intensity range
supported by the screen.

   Colors used on :GRAY-SCALE screens must have the same value for each
of red, green, and blue. Only one of these values is used by screen
hardware to determine intensity; however, CLX does not define which of
red, green, or blue is actually used.

   The following paragraphs describe the CLX functions used to create,
access, and modify colors.

 -- Function: make-color &key (:blue 1.0) (:green 1.0) (:red 1.0)
          &allow-other-keys
    :BLUE
    :GREEN
    :RED
          RGB-VAL values that specify the saturation for each primary.

     Creates, initializes, and returns a new COLOR object with the
     specified values for red, green, and blue.
    COLOR
          Type COLOR.


 -- Function: color-blue color
    COLOR
          A COLOR object.

     Returns and (with `setf') sets the value for blue in the _color_.
    BLUE-INTENSITY
          Type RGB-VAL.


 -- Function: color-green color
    COLOR
          A COLOR object.

     Returns and (with `setf') sets the value for green in the _color_.
    GREEN-INTENSITY
          Type RGB-VAL.


 -- Function: color-p color
     Returns non-NIL if the argument is a COLOR object and NIL
     otherwise.

    COLOR-P
          Type BOOLEAN.


 -- Function: color-red color
    COLOR
          A COLOR object.

     Returns and (with `setf') sets the value for red in the _color_.
    RED-INTENSITY
          Type RGB-VAL.


 -- Function: color-rgb color
    COLOR
          A COLOR object.

     Returns the values for red, green, and blue in the _color_.
    RED
    GREEN
    BLUE
          Type RGB-VAL.



File: clx.info,  Node: Colormap Functions,  Prev: Color Functions,  Up: Colors

10.3 Colormap Functions
=======================

A colormap is represented in CLX by a COLORMAP object. A CLX program
can create and manipulate several COLORMAP objects. However, the colors
contained in a COLORMAP are made visible only when the COLORMAP is
_installed_. Each window is associated with a COLORMAP that is used to
translate window pixels into colors (see WINDOW-COLORMAP). However, a
window will appear in its true colors only if its associated COLORMAP is
installed.

   The total number of colormaps that can be installed depends on the
screen hardware.  Most hardware devices allow exactly one COLORMAP to
be installed at any time. That is, SCREEN-MIN-INSTALLED-MAPS and
SCREEN-MAX-INSTALLED-MAPS are both equal to 1.  Installing a new
COLORMAP can cause a previously installed COLORMAP to be uninstalled.
It is important to remember that the set of installed COLORMAPS is a
hardware resource shared cooperatively among all client programs
connected to an X server.

   A CLX program can control the contents of COLORMAPS by allocating
color cells in one of two ways: read-only or read-write. Allocating a
read-only color cell establishes a color value for a specified pixel
value that cannot be changed. However, read-only color cells can be
shared among all client programs. Read-only allocation is the best
strategy for making use of limited COLORMAP hardware in a multi-client
environment.

   Alternatively, allocating a read-write color cell allows a client the
exclusive right to set the color value stored in the cell. A cell
allocated read-write by one client cannot be allocated by another
client, not even as a read-only cell. Note that read-write allocation is
not allowed for screens whose visual type belongs to one of the
:STATIC-GRAY, :STATIC-COLOR, or :TRUE-COLOR classes. For screens of
these classes, COLORMAP cells cannot be modified.

   Two entries of the default colormap, typically containing the colors
black and white, are automatically allocated read-only. The pixel values
for these entries can be returned by the functions SCREEN-BLACK-PIXEL
and SCREEN-WHITE-PIXEL. Applications that need only two colors and also
need to operate on both monochrome and color screens should always use
these pixel values. The names _black_ and _white_ are intended to
reflect relative intensity levels and need not reflect the actual
colors displayed for these pixel values.

   Each screen has a default COLORMAP, which is initially installed. By
conventions, clients should allocate only read-only cells from the
default COLORMAP.

* Menu:

* Creating Colormaps::
* Installing Colormaps::
* Allocating Colors::
* Finding Colors::
* Changing Colors::
* Colormap Attributes::


File: clx.info,  Node: Creating Colormaps,  Next: Installing Colormaps,  Prev: Colormap Functions,  Up: Colormap Functions

10.3.1 Creating Colormaps
-------------------------

CLX provides functions for creating and freeing new COLORMAP objects.

 -- Function: create-colormap visual window &optional alloc-p
    VISUAL
          A VISUAL type ID.

    WINDOW
          A WINDOW.

    ALLOC-P
          Specifies whether COLORMAP cells are permanently allocated
          read-write.

     Creates and returns a _colormap_ of the specified _visual_ type
     for the screen containing the _window_. The _visual_ type must be
     one of those supported by the screen.

     Initial color cell values are undefined for visual types belonging
     to the :GRAY-SCALE, :PSEUDO-COLOR, and :DIRECT-COLOR classes.
     Color cell values for visual types belonging to the :STATIC-GRAY,
     :STATIC-COLOR, and :TRUE-COLOR classes have initial values defined
     by the visual type. However, X does not define the set of possible
     visual types or their initial color cell values.

     If _alloc-p_ is true, all colormap cells are permanently allocated
     read-write and cannot be freed by FREE-COLORS. It is an error for
     _alloc-p_ to be true when the visual type belongs to the
     :STATIC-GRAY, :STATIC-COLOR, or :TRUE-COLOR classes.

    COLORMAP
          Type COLORMAP.


 -- Function: copy-colormap-and-free colormap
    COLORMAP
          A COLORMAP.

     Creates and returns a new COLORMAP by copying, then freeing,
     allocated cells from the specified _colormap_.

     All color cells allocated read-only or read-write in the original
     COLORMAP have the same color values and the same allocation status
     in the _new-colormap_. The values of unallocated color cells in
     the _new-colormap_ are undefined. After copying, all allocated
     color cells in the original COLORMAP are freed, as if FREE-COLORS
     was called. The unallocated cells of the original COLORMAP are not
     affected.

     If _alloc-p_ was true when the original COLORMAP was created, then
     all color cells of the _new-colormap_ are permanently allocated
     read-write, and all the color cells of the original COLORMAP are
     freed.

    NEW-COLORMAP
          Type COLORMAP.


 -- Function: free-colormap colormap
    COLORMAP
          A COLORMAP.

     Destroys the _colormap_ and frees its server resource. If the
     _colormap_ is installed, it is uninstalled. For any window
     associated with the _colormap_, the window is assigned a NIL
     COLORMAP, and a :COLORMAP-NOTIFY event is generated. The colors
     displayed for a window with a NIL COLORMAP are undefined.

     However, this function has no effect if the _colormap_ is a screen
     default COLORMAP.



File: clx.info,  Node: Installing Colormaps,  Next: Allocating Colors,  Prev: Creating Colormaps,  Up: Colormap Functions

10.3.2 Installing Colormaps
---------------------------

The following paragraphs describe the CLX functions to install and
uninstall colormaps and to return the set of installed colormaps.

   Initially, the default COLORMAP for a screen is installed (but is
not in the required list).

 -- Function: install-colormap colormap
    COLORMAP
          A COLORMAP.

     Installs the _colormap._ All windows associated with this
     _colormap_ immediately display with true colors. As a side-effect,
     additional colormaps might be implicitly uninstalled by the server.

     If the specified _colormap_ is not already installed, a
     :COLORMAP-NOTIFY event is generated on every window associated
     with this _colormap_. In addition, for every other colormap that
     is implicitly uninstalled, a :COLORMAP-NOTIFY event is generated
     on every associated window.


 -- Function: installed-colormaps window &key (:result-type 'list)
    WINDOW
          A WINDOW.

    :RESULT-TYPE
          A sub-type of SEQUENCE that indicates the type of sequence to
          return.

     Returns a sequence containing the installed COLORMAPS for the
     screen of the specified _window_. The order of the colormaps is
     not significant.
    COLORMAP
          Type SEQUENCE of COLORMAP.


 -- Function: uninstall-colormap colormap
    COLORMAP
          A COLORMAP.

     Uninstalls the _colormap_. However, the _colormap_ is not actually
     uninstalled if this would reduce the set of installed colormaps
     below the value of SCREEN-MIN-INSTALLED-MAPS. If the _colormap_ is
     actually uninstalled, a :COLORMAP-NOTIFY event is generated on
     every associated window.



File: clx.info,  Node: Allocating Colors,  Next: Finding Colors,  Prev: Installing Colormaps,  Up: Colormap Functions

10.3.3 Allocating Colors
------------------------

The following paragraphs describe the functions for allocating read-only
and read-write color cells, allocating color planes, and freeing color
cells.

 -- Function: alloc-color colormap color
    COLORMAP
          A COLORMAP.

    COLOR
          A COLOR object or a STRINGABLE containing a color name.

     Returns a _pixel_ for a read-only color cell in the _colormap_.
     The color in the allocated cell is the closest approximation to
     the requested _color_ possible for the screen hardware. The other
     values returned give both the approximate color stored in the cell
     and the exact color requested.

     The requested _color_ can be either a COLOR object or a STRINGABLE
     containing a color name.  If a color name is given, a
     corresponding color value is looked up (see LOOKUP-COLOR) and
     used. Color name strings must contain only ISO Latin-1 characters;
     case is not significant.

    PIXEL
          Type PIXEL.

    SCREEN-COLOR
    EXACT-COLOR
          Type COLOR.


 -- Function: alloc-color-cells colormap colors &key (:planes 0)
          :contiguous-p (:result-type 'list)
    COLORMAP
          A COLORMAP.

    COLORS
          A positive number defining the length of the pixels sequence
          returned.

    :PLANES
          A non-negative number defining the length of the masks
          sequence returned.

    :CONTIGUOUS-P
          If true, the masks form contiguous sets of bits.

    :RESULT-TYPE
          A subtype of SEQUENCE that indicates the type of sequences
          returned.

     Returns a SEQUENCE of _pixels_ for read-write color cells in the
     _colormap_. The allocated cells contain undefined color values.
     The visual type class of the COLORMAP must be either :GRAY-SCALE,
     :PSEUDO-COLOR, or :DIRECT-COLOR.

     The _colors_ argument and the :PLANES argument define the number
     of pixels and the number of masks returned, respectively. The
     number of colors must be positive, and the number of planes must
     be non-negative. A total of (* _colors_ (EXPT 2 _planes_)) color
     cells are allocated. The pixel values for the allocated cells can
     be computed by combining the returned pixels and masks.

     The length of the returned masks sequence is equal to :PLANES.
     Each mask of the returned masks sequence defines a single
     bitplane. None of the masks have any 1 bits in common. Thus, by
     selectively combining masks with LOGIOR, (EXPT 2 _planes_)
     distinct combined plane masks can be computed.

     The length of the returned _pixels_ sequence is equal to _colors_.
     None of the pixels have any 1 bits in common with each other or
     with any of the returned masks. By combining pixels and plane
     masks with LOGIOR, (* _colors_ (EXPT 2 _planes_)) distinct pixel
     values can be produced.

     If the _colormap_ class is :GRAY-SCALE or :PSEUDO-COLOR, each
     _mask_ will have exactly one bit set. If the COLORMAP class is
     :DIRECT-COLOR, each _mask_ will have exactly three bits set.  If
     :CONTIGUOUS-P is true, combining all masks with LOGIOR produces a
     plane mask with either one set of contiguous bits (for :GRAY-SCALE
     and :PSEUDO-COLOR) or three sets of contiguous bits (for
     :DIRECT-COLOR).

    PIXELS
    MASK
          Type SEQUENCE of PIXELS.


 -- Function: alloc-color-planes colormap colors &key (:reds 0)
          (:greens 0) (:blues 0) :contiguous-p (:result-type 'list)
    COLORMAP
          A COLORMAP.

    COLORS
          A positive number defining the length of the pixels sequence
          returned.

    :PLANES
          A non-negative number defining the length of the masks
          sequence returned.

    :CONTIGUOUS-P
          If true, then the masks form contiguous sets of bits.

    :RESULT-TYPE
          A subtype of SEQUENCE that indicates the type of sequences
          returned.

     Returns a SEQUENCE of _pixels_ for read-write color cells in the
     _colormap_. The allocated cells contain undefined color values.
     The visual type class of the _colormap_ must be either
     :GRAY-SCALE, :PSEUDO-COLOR, or :DIRECT-COLOR.

     The _colors_ argument defines the number of pixels returned. The
     :REDS, :GREENS, and :BLUES arguments define the number of bits set
     in the returned red, green, and blue masks, respectively. The
     number of colors must be positive, and the number of bits for each
     mask must be non-negative. A total of (* _colors_ (EXPT 2 (+ _reds
     greens_ _blues_))) color cells are allocated. The pixel values for
     the allocated cells can be computed by combining the returned
     _pixels_ and masks.

     Each mask of the returned masks defines a pixel subfield for the
     corresponding primary.  None of the masks have any 1 bits in
     common. By selectively combining subsets of the red, green, and
     blue masks with LOGIOR, (EXPT 2 (+ _reds greens blues_) distinct
     combined plane masks can be computed.

     The length of the returned _pixels_ SEQUENCE is equal to _colors_.
     None of the pixels have any 1 bits in common with each other or
     with any of the returned masks. By combining pixels and plane
     masks with LOGIOR, (* _colors_ (EXPT 2 (+ _reds greens blues_))
     distinct pixel values can be produced.

     If :CONTIGUOUS-P is true, each of returned masks consists of a set
     of contiguous bits. If the COLORMAP class is :DIRECT-COLOR, each
     returned mask lies within the pixel subfield for its primary.

    PIXELS
          Type SEQUENCE of PIXEL.

    RED-MASK
    GREEN-MASK
    BLUE-MASK
          Type PIXEL.


 -- Function: free-colors colormap pixels &optional (plane-mask 0)
    COLORMAP
          A COLORMAP.

    PIXELS
          A SEQUENCE of pixel values.

    PLANE-MASK
          A pixel value with no bits in common with any of the _pixels_.

     Frees a set of allocated color cells from the _colormap_. The
     pixel values for the freed cells are computed by combining the
     given _pixels_ sequence and :PLANE-MASK. The total number of cells
     freed is:

          (* (LENGTH _pixels_) (EXPT 2 (LOGCOUNT _plane-mask_)))

     The :PLANE-MASK must not have any bits in common with any of the
     given _pixels_. The pixel values for the freed cells are produced
     by using LOGIOR to combine each of the given pixels with all
     subsets of the :PLANE-MASK.

     Note that freeing an individual pixel allocated by
     ALLOC-COLOR-PLANES may not allow it to be reused until all related
     pixels computed from the same plane mask are also freed.

     A single error is generated if any computed pixel is invalid or if
     its color cell is not allocated by the client. Even if an error is
     generated, all valid pixel values are freed.



File: clx.info,  Node: Finding Colors,  Next: Changing Colors,  Prev: Allocating Colors,  Up: Colormap Functions

10.3.4 Finding Colors
---------------------

A CLX program can ask the X server to return the colors stored in
allocated color cells. The server also maintains a dictionary of color
names and their associated color values. CLX provides a function to look
up the values for common colors by names such as "red", "purple", and so
forth. The following paragraphs describe the CLX functions for returning
the color values associated with color cells or with color names.

 -- Function: lookup-color colormap name
    COLORMAP
          A COLORMAP.

    NAME
          A STRINGABLE color name.

     Returns the color associated by the X server with the given color
     _name_. The _name_ must contain only ISO Latin-1 characters; case
     is not significant. The first value returned is the closest
     approximation to the requested color possible on the screen
     hardware. The second value returned is the true color value for the
     requested color.

    SCREEN-COLOR
    EXACT-COLOR
          Type COLOR.


 -- Function: query-colors colormap pixels &key (:result-type 'list)
    COLORMAP
          A COLORMAP.

    PIXELS
          A SEQUENCE of PIXEL values.

    :RESULT-TYPE
          A subtype of SEQUENCE that indicates the type of sequences
          returned.

     Returns a SEQUENCE of the colors contained in the allocated cells
     of the _colormap_ specified by the given _pixels_. The values
     returned for unallocated cells are undefined.
    COLORS
          Type SEQUENCE of COLOR.



File: clx.info,  Node: Changing Colors,  Next: Colormap Attributes,  Prev: Finding Colors,  Up: Colormap Functions

10.3.5 Changing Colors
----------------------

The following paragraphs describe the CLX functions to change the colors
in colormap cells.

 -- Function: store-color colormap pixel color &key (:red-p t)
          (:green-p t) (:blue-p t)
    COLORMAP
          A COLORMAP.

    PIXEL
          A PIXEL.

    COLOR
          A color OBJECT or a STRINGABLE containing a color name.

    :RED-P
    :GREEN-P
    :BLUE-P
          BOOLEAN values indicating which color components to store.

     Changes the contents of the _colormap_ cell indexed by the
     _pixel_. Components of the given _color_ are stored in the cell.
     The :RED-P, :GREEN-P, and :BLUE-P arguments indicate which
     components of the given _color_ are stored.

     The _color_ can be either a COLOR object or a STRINGABLE
     containing a color name. If a color name is given, a corresponding
     color value is looked up (see LOOKUP-COLOR) and used.  Color name
     strings must contain only ISO Latin-1 characters; case is not
     significant.


 -- Function: store-colors colormap pixel-colors &key (:red-p t)
          (:green-p t) (:blue-p t)
    COLORMAP
          A COLORMAP.

    PIXEL-COLORS
          A list of the form ({_pixel color_}*).

    :RED-P
    :GREEN-P
    :BLUE-P
          BOOLEAN values indicating which color components to store.

     Changes the contents of multiple _colormap_ cells. _pixel-colors_
     is a list of the form ({ _pixel color_}*), indicating a set of
     pixel values and the colors to store in the corresponding cells.
     The :RED-P, :GREEN-P, and :BLUE-P arguments indicate which
     components of the given colors are stored.

     Each color can be either a COLOR object or a STRINGABLE containing
     a color name. If a color name is given, a corresponding color
     value is looked up (see LOOKUP-COLOR) and used.  Color name
     strings must contain only ISO Latin-1 characters; case is not
     significant.



File: clx.info,  Node: Colormap Attributes,  Prev: Changing Colors,  Up: Colormap Functions

10.3.6 Colormap Attributes
--------------------------

The complete set of colormap attributes is discussed in the following
paragraphs.

 -- Function: colormap-display colormap
    COLORMAP
          A COLORMAP.

     Returns the DISPLAY object associated with the specified
     _colormap_.
    DISPLAY
          Type DISPLAY.


 -- Function: colormap-equal colormap-1 colormap-2
    COLORMAP-1
    COLORMAP-2
          A COLORMAP.

     Returns true if the two arguments refer to the same server resource
     and NIL if they do not.


 -- Function: colormap-id colormap
    COLORMAP
          A COLORMAP.

     Returns the unique ID assigned to the specified _colormap_.

    ID
          Type RESOURCE-ID.


 -- Function: colormap-p colormap
     Returns non-NIL if the argument is a COLORMAP and NIL otherwise.

    MAP-P
          Type BOOLEAN.


 -- Function: colormap-plist colormap
    COLORMAP
          A COLORMAP.

     Returns and (with `setf') sets the property list for the specified
     _colormap_. This function provides a hook where extensions can add
     data.

    COLORMAP-P
          Type BOOLEAN.



File: clx.info,  Node: Cursors,  Next: Atoms,  Prev: Colors,  Up: Top

11 Cursors
**********

A _cursor_ is a visible shape that appears at the current position of
the pointer device. The cursor shape moves with the pointer to provide
continuous feedback to the user about the current location of the
pointer. Each window can have a cursor attribute that defines the
appearance of the pointer cursor when the pointer position lies within
the window. See WINDOW-CURSOR.

   A cursor image is composed of a source bitmap, a mask bitmap, a _hot
spot_, a foreground color, and a background color. Either 1-bit pixmaps
or font glyphs can be used to specify source and mask bitmaps. The
source bitmap identifies the foreground and background pixels of the
cursor image; the mask bitmap identifies which source pixels are
actually drawn. The mask bitmap thus allows a cursor to assume any
shape. The hot spot defines the position within the cursor image that
is displayed at the pointer position.

   In CLX, a cursor is represented by a CURSOR object. This section
describes the CLX functions to:

   * Create and free cursor objects

   * Change cursor colors

   * Inquire the best cursor size

   * Access cursor attributes

* Menu:

* Creating Cursors::
* Cursor Functions::
* Cursor Attributes::


File: clx.info,  Node: Creating Cursors,  Next: Cursor Functions,  Prev: Cursors,  Up: Cursors

11.1 Creating Cursors
=====================

The following paragraphs describe the CLX functions used to create and
free CURSOR objects.

 -- Function: create-cursor &key :source :mask :x :y :foreground
          :background
    :SOURCE
          The source pixmap. This argument is required.

    :MASK
          The mask pixmap.

    :X
    :Y
          The hot spot position in the :SOURCE. This argument is
          required.

    :FOREGROUND
          A COLOR object specifying the foreground color. This argument
          is required.

    :BACKGROUND
          A COLOR object specifying the background color. This argument
          is required.

     Creates and returns a cursor. :X and :Y define the position of the
     hot spot relative to the origin of the :SOURCE. :FOREGROUND and
     :BACKGROUND colors must be specified, even if the server only has
     a :STATIC-GRAY or :GRAY-SCALE screen. The :SOURCE, :X, and :Y
     arguments must also be specified.

     The cursor image is drawn by drawing a pixel from the :SOURCE
     bitmap at every position where the corresponding bit in the :MASK
     bitmap is 1. If the corresponding :SOURCE bit is 1, a pixel is
     drawn in the :FOREGROUND color; otherwise, a pixel is drawn in the
     :BACK-GROUND color. If the :MASK is omitted, all :SOURCE pixels
     are drawn. If given, the :MASK must be the same size as the
     :SOURCE.

     An X server may not be able to support every cursor size. A server
     is free to modify any component of the cursor to satisfy hardware
     or software limitations.

     The :SOURCE and :MASK can be freed immediately after the cursor is
     created. Subsequent drawing in the :SOURCE or :MASK pixmap has an
     undefined effect on the cursor.

    CURSOR
          Type CURSOR.


 -- Function: create-glyph-cursor &key :source-font :source-char
          :mask-font (:mask-char 0) :foreground :background
    :SOURCE-FONT
          The source font. This is a required argument.

    :SOURCE-CHAR
          An index specifying a glyph in the source font. This is a
          required argument.

    :MASK-FONT
          The mask font.

    :MASK-CHAR
          An index specifying a glyph in the mask font.

    :FOREGROUND
          A COLOR object specifying the foreground color. This is a
          required argument.

    :BACKGROUND
          A COLOR object specifying the background color. This is a
          required argument.

     Creates and returns a cursor defined by font glyphs. The source
     bitmap is defined by the :SOURCE-FONT and :SOURCE-CHAR. The mask
     bitmap is defined by the :MASK-FONT and :MASK-CHAR. It is an error
     if the :SOURCE-CHAR and :MASK-CHAR are not valid indexes for the
     :SOURCE-FONT and :MASK-FONT, respectively. The hot spot position
     is defined by the "character origin" of the source glyph, that is,
     the position [- _char-left-bearing_, _char-ascent_] relative to
     the upper left corner of the source glyph bitmap.

     Source and mask bits are compared after aligning the character
     origins of the source and mask glyphs. The source and mask glyphs
     need not have the same size or character origin position. If the
     :MASK-FONT is omitted, all source pixels are drawn.

     An X server may not be able to support every cursor size. A server
     is free to modify any component of the cursor to satisfy hardware
     or software limitations.

     Either of the :SOURCE-FONT or :MASK-FONT can be closed after the
     cursor is created.

    CURSOR
          Type CURSOR.


 -- Function: free-cursor cursor
    CURSOR
          A CURSOR object.

     Destroys the CURSOR object. Cursor server resources are freed when
     no other references remain.



File: clx.info,  Node: Cursor Functions,  Next: Cursor Attributes,  Prev: Creating Cursors,  Up: Cursors

11.2 Cursor Functions
=====================

The following paragraphs describe the CLX functions used to operate on
CURSOR objects.

 -- Function: query-best-cursor width height display
    DISPLAY
          A DISPLAY object.

    WIDTH
    HEIGHT
          The requested cursor size.

     Returns the cursor size closest to the requested _width_ and
     _height_ that is best suited to the display. The _width_ and
     _height_ returned define the largest cursor size supported by the
     X server. Clients should always be prepared to limit cursor sizes
     to those supported by the server.

    WIDTH
    HEIGHT
          Type CARD16.


 -- Function: recolor-cursor cursor foreground background
    CURSOR
          A CURSOR object.

    FOREGROUND
          A COLOR object specifying the new foreground color.

    BACKGROUND
          A COLOR object specifying the new background color.

     Changes the color of the specified _cursor_. If the cursor is
     displayed on a screen, the change is visible immediately.



File: clx.info,  Node: Cursor Attributes,  Prev: Cursor Functions,  Up: Cursors

11.3 Cursor Attributes
======================

The complete set of cursor attributes is discussed in the following
paragraphs.

 -- Function: cursor-display cursor
    CURSOR
          A CURSOR object.

     Returns the DISPLAY object associated with the specified _cursor_.

    DISPLAY
          Type DISPLAY.


 -- Function: cursor-equal cursor-1 cursor-2
    CURSOR-1
    CURSOR-2
          CURSOR objects.

     Returns true if the two arguments refer to the same server resource
     and NIL if they do not.


 -- Function: cursor-id cursor
    CURSOR
          A CURSOR object.

     Returns the unique resource ID that has been assigned to the
     specified _cursor_.

    ID
          Type RESOURCE-ID.


 -- Function: cursor-p cursor
    CURSOR-P
          Type BOOLEAN.

     Returns true if the argument is a CURSOR object and NIL otherwise.


 -- Function: cursor-plist cursor
    CURSOR
          A CURSOR object.

     Returns and (with `setf') sets the property list for the specified
     _cursor_. This function provides a hook where extensions can add
     data.

    PLIST
          A property list.



File: clx.info,  Node: Atoms,  Next: Events and Input,  Prev: Cursors,  Up: Top

12 Atoms, Properties and Selections
***********************************

* Menu:

* Atoms (Atoms)::
* Properties::
* Selections::


File: clx.info,  Node: Atoms (Atoms),  Next: Properties,  Prev: Atoms,  Up: Atoms

12.1 Atoms
==========

In X, an _atom_ is a unique ID used as the name for certain server
resources - properties and selections.

   In CLX, an atom is represented by a keyword symbol. For convenience,
CLX functions also allow atoms to be specified by strings and
non-keyword symbols. XATOM is a CLX data type that permits either
string or symbol values. A string is equivalent to the XATOM given by
(INTERN _string_ 'KEYWORD). A symbol is equivalent to the XATOM given
by ( INTERN (SYMBOL-NAME _symbol_) 'KEYWORD). The symbol name string of
an XATOM must consist only of ISO Latin characters. Note that the case
of XATOM strings is important; the XATOM "Atom" is not the same as the
XATOM "ATOM".

   Certain atoms are already predefined by every X server. Predefined
atoms are designed to represent common names that are likely to be
useful for many client applications.  Note that these atoms are
predefined only in the sense of having XATOM and CARD29 values, not in
the sense of having required semantics. No interpretation is placed on
the meaning or use of an atom by the server. The XATOM objects
predefined by CLX are listed below.

:ARC                   :ITALIC_ANGLE          :STRING
:ATOM                  :MAX_SPACE             :SUBSCRIPT_X
:BITMAP                :MIN_SPACE             :SUBSCRIPT_Y
:CAP_HEIGHT            :NORM_SPACE            :SUPERSCRIPT_X
:CARDINAL              :NOTICE                :SUPERSCRIPT_Y
:COLORMAP              :PIXMAP                :UNDERLINE_POSITION
:COPYRIGHT             :POINT                 :UNDERLINE_THICKNESS
:CURSOR                :POINT_SIZE            :VISUALID
:CUT_BUFFER0           :PRIMARY               :WEIGHT
:CUT_BUFFER1           :QUAD_WIDTH            :WINDOW
:CUT_BUFFER2           :RECTANGLE             :WM_CLASS
:CUT_BUFFER3           :RESOLUTION            :WM_CLIENT_MACHINE
:CUT_BUFFER4           :RESOURCE_MANAGER      :WM_COMMAND
:CUT_BUFFER5           :RGB_BEST_MAP          :WM_HINTS
:CUT_BUFFER6           :RGB_BLUE_MAP          :WM_ICON_NAME
:CUT_BUFFER7           :RGB_COLOR_MAP         :WM_ICON_SIZE
:DRAWABLE              :RGB_DEFAULT_MAP       :WM_NAME
:END_SPACE             :RGB_GRAY_MAP          :WM_NORMAL_HINTS
:FAMILY_NAME           :RGB_GREEN_MAP         :WM_SIZE_HINTS
:FONT                  :RGB_RED_MAP           :WM_TRANSIENT_FOR
:FONT_NAME             :SECONDARY             :WM_ZOOM_HINTS
:FULL_NAME             :STRIKEOUT_ASCENT      :X_HEIGHT
:INTEGER               :STRIKEOUT_DESCENT     

   When creating a new atom, the following conventions should be obeyed
in order to minimize the conflict between atom names:

   * Symbol names beginning with an underscore should be used for atoms
     that are private to a particular vendor or organization. An
     additional prefix should identify the organization.

   * Symbol names beginning with two underscores should be used for
     atoms that are private to a single application or end user.

   CLX provides functions to convert between an XATOM and its
corresponding ID integer.  The data type of an atom ID is CARD29. The
XATOM representation is usually sufficient for most CLX programs.
However, it is occasionally useful to be able to convert an atom ID
returned in events or properties into its corresponding XATOM.

 -- Function: atom-name display atom-id
    DISPLAY
          A DISPLAY object.

    ATOM-ID
          A CARD29.

     Returns the atom keyword for the _atom-id_ on the given _display_
     server.

    ATOM-NAME
          Type KEYWORD.


 -- Function: find-atom display atom-name
    DISPLAY
          A DISPLAY object.

    ATOM-NAME
          An XATOM.

     Returns the atom ID for the given _atom-name_, if it exists. If no
     atom of that name exists for the display server, NIL is returned.

    ATOM-ID
          Type CARD29 or NULL.


 -- Function: intern-atom display atom-name
    DISPLAY
          A DISPLAY object.

    ATOM-NAME
          An XATOM.

     Creates an atom with the given name and returns its atom ID. The
     atom can survive the interning client; it exists until the last
     server connection has been closed and the server resets itself.

    ATOM-ID
          Type CARD29 or NULL.



File: clx.info,  Node: Properties,  Next: Selections,  Prev: Atoms (Atoms),  Up: Atoms

12.2 Properties
===============

For each window, an X server can record a set of _properties_.
Properties are a general mechanism for clients to associate arbitrary
data with a window, and for clients to communicate window data to each
other via the server. No interpretation is placed on property data by
the server itself.

   A property consists of a name, a type, a data format, and data. The
name of a property is given by an atom. The property type is another
atom used to denote the intended interpretation of the property data.
The property formats specifies whether the property data should be
treated as a set of 8-, 16-, or 32-bit elements. The property format
must be specified so that the X server can communicate property data
with the correct byte order.

   CLX provides functions to:

   * Create or change a property

   * Return property data

   * List window properties

   * Delete a property

 -- Function: change-property window property data type format &key
          (:mode :replace) (:start 0) :end :transform
    WINDOW
          A WINDOW.

    PROPERTY
          A property name XATOM.

    DATA
          A sequence of property data elements.

    TYPE
          The property type XATOM.

    FORMAT
          One of 8, 16, or 32.

    :MODE
          One of :REPLACE, :APPEND, or :PREPEND.

    :START
    :END
          Specify the subsequence of previous data replaced when :MODE
          is :REPLACE.

    :TRANSFORM
          A function that transforms each data element into a data
          value to store.

     Creates a new window property or changes an existing property. A
     :PROPERTY-NOTIFY event is generated for the _window_.

     If the :MODE is :REPLACE, the new _data_, _type_, and _format_
     replace any previous values.  The subsequence of previous data
     elements that are replaced is defined by the :START and :END
     indexes.

     If the :MODE is :PREPEND or :APPEND, no previous data is changed,
     but the new _data_ is added at the beginning or the end,
     respectively. For these modes, if the _property_ already exists,
     the new _type_ and _format_ must match the previous values.

     The :TRANSFORM, if given, is a function used to compute the actual
     property data stored.  The :TRANSFORM, which must accept a single
     data element and return a single transformed data element, is
     called for each data element. If the _data_ is a string, the
     default :TRANSFORM function transforms each character into its
     ASCII code; otherwise, the default is to store the _data_
     unchanged.


 -- Function: delete-property window property
    WINDOW
          A WINDOW.

    PROPERTY
          A property name XATOM.

     Deletes the _window property_. If the _property_ already exists, a
     :PROPERTY-NOTIFY event is generated for the _window_.


 -- Function: get-property window property &key :type (:start 0) :end
          :delete-p (:result-type 'list) :transform
    WINDOW
          A WINDOW.

    PROPERTY
          A property name XATOM.

    :TYPE
          The requested type XATOM or NIL.

    :START
    :END
          Specify the subsequence of property _data_ returned.

    :TRANSFORM
          A function that transforms each data element into a data
          value to return.

    :DELETE-P
          If true, the existing _property_ can be deleted.

    :RESULT-TYPE
          The t_ype_ of data sequence to return. Default is 'LIST.

     Returns a subsequence of the data for the window property. The
     :START and :END indexes specify the property _data_ elements
     returned. The :TRANSFORM function is called for elements of the
     specified subsequence to compute the _data_ sequence returned. The
     property _type_ and _format_ are also returned. The final return
     value gives the actual number of data bytes (not elements)
     following the last data element returned.

     If the _property_ does not exist, the returned _data_ and _type_
     are NIL and the returned _format_ and _bytes-after_ are zero.

     If the given :TYPE is non-NIL but does not match the actual
     property type, then the _data_ returned is NIL, the _type_ and
     _format_ returned give the actual property values, and the
     _bytes-after_ returned gives the total number of bytes (not
     elements) in the property data.

     If the given :TYPE is NIL or if it matches the actual property
     type, then:

        * The _data_ returned is the transformed subsequence of the
          property data.

        * The _type_ and _format_ returned give the actual property
          values.

        * The _bytes-after_ returned gives the actual number of data
          bytes (not elements) following the last data element returned.

     In this case, the :DELETE-P argument is also examined. If
     :DELETE-P is true and _bytes-after_ is zero, the property is
     deleted and a :PROPERTY-NOTIFY event is generated for the _window_.

    DATA
          Type SEQUENCE.

    TYPE
          Type XATOM.

    FORMAT
          Type (MEMBER 8 16 32).

    BYTES-AFTER
          Type CARD32.


 -- Function: list-properties window &key (:result-type 'list)
    WINDOW
          A WINDOW.

    :RESULT-TYPE
          The type of sequence to return. Default is 'LIST.

     Returns a sequence containing the names of all _window properties_.
    PROPERTIES
          Type SEQUENCE of KEYWORD.


 -- Function: rotate-properties window properties &optional (delta 1)
    WINDOW
          A WINDOW.

    PROPERTIES
          A sequence of XATOM values.

    DELTA
          The index interval between source and destination elements of
          _properties_.

     Rotates the values of the given _window properties_. The value of
     property _i_ in the given sequence is changed to the value of the
     property at index (MOD (+ _i delta_) (LENGTH _properties_)). This
     function operates much like the ROTATEF macro in Common Lisp.

     If (MOD _delta_ (LENGTH _properties_)) is non-zero, a
     :PROPERTY-NOTIFY event is generated on the window for each
     property, in the same order as they appear in the _properties_
     sequence.



File: clx.info,  Node: Selections,  Prev: Properties,  Up: Atoms

12.3 Selections
===============

A selection is an atom used to identify data that can be shared among
all client programs connected to an X server. Unlike properties, the
data represented by a selection is stored by some client program, not by
the server.

   The data named by a selection is associated with a client window,
which is referred to as the _selection owner_. The server always knows
which window is the owner of a selection.  Selections can be created
freely by clients using INTERN-ATOM to create an atom. CLX provides
functions to inquire or change the owner of a selection and to
_convert_ a selection.

   Conversion is the key to the use of selections for inter-client
communication. Suppose Client A wants to paste the contents of the data
named by selection _S_ into his window _WA_. Client A calls
CONVERT-SELECTION on selection atom _S_, sending a conversion request
to the server. The server, in turn, sends a :SELECTION-REQUEST event to
the current owner of _S_, which is window _WB_ belonging to Client B.
The :SELECTION-REQUEST event contains the _requestor_ window (_WA_),
the selection atom (_S_), an atom identifying a requested data type,
and the name of a property of _WA_ into which the value of _S_ will be
stored.

   Since _WB_ is the owner of _S_, it must be associated with the data
defined by Client B as the value of _S_. When _WB_ gets the
:SELECTION-REQUEST event, Client B is expected to convert the value of
_S_ to the requested data type (if possible) and store the converted
value in the given requestor property. Client B is then expected to
send a :SELECTION-NOTIFY event to the requestor window _WA_, informing
the requestor that the converted value for _S_ is ready. Upon receiving
the :SELECTION-NOTIFY event, Client A can call GET-PROPERTY to retrieve
the converted value and to paste it into _WA_.

   NOTE: Clients using selections must always be prepared to handle
:SELECTION-REQUEST events and/or :SELECTION-NOTIFY events. There is no
way for a client to ask not to receive these types of events.

   Type atoms used in selection conversion can represent arbitrary
client-defined interpretations of the selection data. For example, if
the value of selection _S_ is a text string, Client A might request its
typeface by requesting conversion to the :FONT type. A type ATOM can
also represent a request to the selection owner to perform some action
as a side-effect of conversion (for example, :DELETE). Some of the
predefined atoms of an X server are intended to be used as selection
types (for example, :COLORMAP, :BITMAP, :STRING, and so forth) However,
X does not impose any requirements on the interpretation of type atoms.

   When multiple clients negotiate for ownership of a selection, certain
race conditions might be possible. For example, two clients might each
receive a user command to assert ownership of the :PRIMARY selection,
but the order in which the server processes these client requests is
unpredictable. As a result, the ownership request initiated most
recently by the user might be incorrectly overridden by the other
earlier ownership request. To prevent such anomalies, the server records
a _last-changed_ timestamp for each change of selection ownership.

   Although inter-client communication via selections is rather
complex, it offers important benefits. Since selection communication is
mediated by an X server, clients can share data even though they are
running on different hosts and using different networking protocols.
Data storage and conversion is distributed among clients so that the
server is not required to provide all possible data types or to store
multiple forms of selection data.

   Certain predefined atoms are used as standard selections, as
described in the X11 Inter-client Communications Conventions Manual.
Some of the standard selections covered by these conventions are:

:PRIMARY
     The _primary selection_. The main vehicle for inter-client cut and
     paste operations.

:SECONDARY
     The _secondary selection_. In some environments, clients can use
     this as an auxiliary to :PRIMARY.

:CLIPBOARD
     Analogous to akill ring. Represents the most recently deleted data
     item.

 -- Function: convert-selection selection type requestor &optional
          property time
    SELECTION
          The XATOM for the selection name.

    TYPE
          The XATOM for the requested data type.

    REQUESTOR
          The WINDOW to receive the converted _selection_ value.

    PROPERTY
          The XATOM for the requestor property to receive the converted
          value.

    TIME
          A TIMESTAMP.

     Requests that the value of the _selection_ be converted to the
     specified _type_ and stored in the given _property_ of the
     _requestor_ window.

     If the _selection_ has an owner, the X server sends a
     :SELECTION-REQUEST event to the owner window. Otherwise, if no
     owner exists, the server generates on the requestor a
     :SELECTION-NOTIFY event containing a NIL _property_ atom.

     The given _property_ specifies the requestor property that will
     receive the converted value. If the _property_ is omitted, the
     _selection_ owner will define a property to use. The _time_
     furnishes a timestamp representing the time of the conversion
     request; by default, the current server time is used.

     NOTE: Standard conventions for inter-client communication require
     that both the requestor property and the time must be specified.
     If possible, the time should be the time of a user event which
     initiated the conversion. Alternatively, a timestamp can be
     obtained by calling CHANGE-PROPERTY to append zero-length data to
     some property; the timestamp in the resulting :PROPERTY-NOTIFY
     event can then be used.


 -- Function: selection-owner display selection &optional time
    DISPLAY
          A DISPLAY.

    SELECTION
          The XATOM for the selection name.

    TIME
          A TIMESTAMP.

     Returns and (with `setf') changes the owner and the last-changed
     _time_ for the _selection_. If the owner is NIL, no owner for the
     _selection_ exists. When the owner window for a _selection_ is
     destroyed, the _selection_ owner is set to NIL without affecting
     the last-changed _time_.

     The _time_ argument is used only when changing the _selection_
     owner. If the _time_ is NIL, the current server time is used. If
     the _time_ is earlier than the current last-changed time of the
     _selection_ or if the _time_ is later than the current server
     time, the owner is not changed. Therefore, a client should always
     confirm successful change of ownership by immediately calling
     SELECTION-OWNER. If the change in ownership is successful, the
     last-changed time of the _selection_ is set to the specified
     _time_.

     If the change in ownership is successful and the new owner is
     different from the previous owner, and if the previous owner is not
     NIL, a :SELECTION-CLEAR event is generated for the previous owner
     window.

     NOTE: Standard conventions for inter-client communication require
     that a non-nil time must be specified. If possible, the time
     should be the time of a user event which initiated the change of
     ownership. Alternatively, a timestamp can be obtained by calling
     change-property to append zero-length data to some property; the
     timestamp in the resulting :PROPERTY-NOTIFY event can then be used.
    OWNER
          Type WINDOW or NULL.


