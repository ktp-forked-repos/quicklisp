
(in-package :clem-test)

(defun matrix-test-1 ()
  (let ((m (array->matrix #2A((1 2 3)(4 1 6)(7 1 9)))))
    (print-matrix (invert-matrix m)))
  t)

(defun matrix-test-2 ()
  (let ((m (array->matrix #2A((1 2 3)(4 5 6)(7 8 9)))))
    (print-matrix m)
    (swap-rows m 0 2)
    (swap-cols m 0 2)
    (print-matrix m)
    (let ((q (val m 0 0)))
      (map-row m 0 #'(lambda (x) (/ x q)))
      (scalar-mult-col m 0 4)
      (scalar-divide-col m 0 3))
    (print-matrix m))
  t)

(defun matrix-test-3 ()
  (let ((m1 (array->matrix #2A((1 2 3)(4 5 6)(7 8 9) (10 11 12)))))
    (print-matrix m1)
    (print (dim m1))
    
    (let ((t1 (transpose m1)))
      (print-matrix t1)
      (print (dim t1)))
    
    (let ((m2 (array->matrix #2A((1 2 3 4 5 6 7 8 9)))))
      (print m2)
      (print-matrix m2)
      (print (dim m2))))
  t)

(defun matrix-test-4 ()
  (let ((m3 (array->matrix #2A((1) (2) (3) (4) (5) (6) (7) (8) (9)))))
    (print-matrix m3)
    (print (dim m3)))
  t)

(defun matrix-test-5 ()
  (let ((m (array->matrix #2A((1 2 3)(4 5 6)(7 8 9)))))
    (print-matrix (mat-mult m m))
    (let ((inv (invert-matrix m)))
      (when inv (print-matrix (invert-matrix m)))))
  t)

(defun matrix-test-6 ()
  (let ((m (array->matrix #2A((1 2 3)(4 5 6)(7 8 9)))))
    (print-matrix (mat-mult m m))
    (let ((inv (invert-matrix m)))
      (when inv (print-matrix (invert-matrix m)))))
  t)

(defun run-tests-1 ()
  (let ((run (make-test-run)))
    (run-test #'matrix-test-1 "matrix-test-1" run)
    (run-test #'matrix-test-2 "matrix-test-2" run)
    (run-test #'matrix-test-3 "matrix-test-3" run)
    (run-test #'matrix-test-4 "matrix-test-4" run)
    (run-test #'matrix-test-5 "matrix-test-5" run)
    (format t "~&~A of ~A tests passed"
            (test-run-passed run) (test-run-tests run))))

(defun run-defmatrix-tests ()
  (clem::defmatrixclass ape-matrix ()
      :element-type (unsigned-byte 8)
      :accumulator-type (unsigned-byte 32)
      :minval 23 :maxval 95)
  (let ((q (make-instance 'ape-matrix :rows 4 :cols 4)))
    (describe q)
    (print (class-of q))
    (print-matrix q)
    (describe (clem::matrix-vals q))
    (map-matrix-fit #'(lambda (a i j)
			(* i i j j 2))
		    q)
    (print-matrix q))

  (let ((q (make-instance 'sb8-matrix :rows 4 :cols 4)))
    (map-matrix-fit #'(lambda (a i j)
			(if (oddp (+ i j)) -255 255))
		    q)
    (print-matrix q))

  (let ((q (make-instance 't-matrix :rows 4 :cols 4)))
    (describe (clem::matrix-vals q)))
  (let ((q (make-instance 'bit-matrix :rows 4 :cols 4)))
    (describe (clem::matrix-vals q)))
  t)
