
(in-package :clem-test)

(defmethod test-typed-mref ()
  (let ((m (array->matrix #2A((1 2 3)(4 5 6)(7 8 9))
                          :matrix-class 'double-float-matrix))
        (n (array->matrix #2A((2 2 3)(4 5 6)(7 8 9))
                          :matrix-class 'double-float-matrix))
        (p (array->matrix #2A((3 2 3)(4 5 6)(7 8 9))
                          :matrix-class 'double-float-matrix))
        (q (array->matrix #2A((4 2 3)(4 5 6)(7 8 9))
                          :matrix-class 'double-float-matrix)))
    (destructuring-bind (rows cols) (dim m)
      (clem::with-typed-mref (m double-float)
        (clem::with-typed-mref (n double-float)
          (clem::with-typed-mref (p double-float)
            (clem::with-typed-mref (q double-float)
              (dotimes (i rows)
                (dotimes (j cols)
                  (setf (mref q j i)
                        (+ (mref m i j)
                           (mref n i j)
                           (mref p i j)
                           (mref q i j)))))))))
      q)))

(defmethod test-typed-mref-2 ()
  (let ((m (clem::random-double-float-matrix 1024 1024 :max 1d0))
        (n (clem::random-double-float-matrix 1024 1024 :max 1d0))
        (q (clem::random-double-float-matrix 1024 1024 :max 1d0)))
    (time
     (destructuring-bind (rows cols) (dim m)
       (clem::with-typed-mref (m double-float)
         (clem::with-typed-mref (q double-float)
           (clem::with-typed-mref (n double-float)
             (dotimes (i rows)
               (declare (type fixnum i))
               (dotimes (j cols)
                 (declare (type fixnum j))
                 (setf (mref q j i)
                       (+ (mref m i j)
                          (mref n i j))))))))
       q))))